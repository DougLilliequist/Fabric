{"version":3,"sources":["vendor/ogl/src/math/functions/Vec3Func.js","vendor/ogl/src/math/Vec3.js","vendor/ogl/src/core/Renderer.js","vendor/ogl/src/math/functions/Vec4Func.js","vendor/ogl/src/math/functions/QuatFunc.js","vendor/ogl/src/math/Quat.js","vendor/ogl/src/math/functions/Mat4Func.js","vendor/ogl/src/math/Mat4.js","vendor/ogl/src/math/functions/EulerFunc.js","vendor/ogl/src/math/Euler.js","vendor/ogl/src/core/Transform.js","vendor/ogl/src/core/Camera.js","vendor/ogl/src/math/functions/Vec2Func.js","vendor/ogl/src/math/Vec2.js","vendor/ogl/src/extras/Orbit.js","vendor/ogl/src/extras/Raycast.js","vendor/ogl/src/core/Texture.js","vendor/ogl/src/math/functions/Mat3Func.js","vendor/ogl/src/math/Mat3.js","vendor/ogl/src/core/Mesh.js","vendor/ogl/src/core/Geometry.js","vendor/ogl/src/extras/Plane.js","vendor/ogl/src/core/Program.js","src/World3d/debug/shader/quad.vert","src/World3d/debug/shader/quad.frag","src/World3d/debug/DisplayQuad.js","src/params.js","vendor/ogl/src/core/RenderTarget.js","vendor/ogl/src/extras/Triangle.js","vendor/ogl/src/extras/GPGPU.js","src/World3d/VerletGPU/Simulator/kernels/prevPos.frag","src/World3d/VerletGPU/Simulator/kernels/currentPos.frag","src/World3d/VerletGPU/Simulator/kernels/position.frag","src/World3d/VerletGPU/Simulator/kernels/calcNormal.frag","src/World3d/VerletGPU/Simulator/kernels/restLength.frag","src/World3d/VerletGPU/Simulator/kernels/restLengthDiagonal.frag","src/World3d/VerletGPU/Simulator/kernels/constrainHorizontal.frag","src/World3d/VerletGPU/Simulator/kernels/constrainVertical.frag","src/World3d/VerletGPU/Simulator/kernels/constrainBLTR.frag","src/World3d/VerletGPU/Simulator/kernels/constrainBRTL.frag","src/World3d/VerletGPU/Simulator/index.js","src/World3d/VerletGPU/shader/verlet.vert","src/World3d/VerletGPU/shader/verlet.frag","src/World3d/VerletGPU/index.js","src/World3d/index.js","src/index.js"],"names":["EPSILON","length","a","x","y","z","Math","sqrt","copy","out","set","add","b","subtract","multiply","divide","scale","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","transformMat4","m","w","scaleRotateMat4","transformMat3","transformQuat","q","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","PI","acos","exactEquals","Vec3","Array","constructor","v","Vec3Func","va","vb","sub","squaredLen","equals","applyMatrix4","mat4","scaleRotateMatrix4","applyQuaternion","clone","fromArray","o","toArray","transformDirection","tempVec3","ID","Renderer","canvas","document","createElement","width","height","dpr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","autoClear","webgl","attributes","color","id","gl","getContext","isWebgl2","renderer","setSize","state","blendFunc","src","ONE","dst","ZERO","blendEquation","modeRGB","FUNC_ADD","cullFace","frontFace","CCW","depthMask","depthFunc","LESS","premultiplyAlpha","flipY","unpackAlignment","framebuffer","viewport","textureUnits","activeTextureUnit","boundBuffer","uniformLocations","Map","extensions","getExtension","vertexAttribDivisor","drawArraysInstanced","drawElementsInstanced","createVertexArray","bindVertexArray","deleteVertexArray","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","Object","assign","style","setViewport","enable","disable","setBlendFunc","srcAlpha","dstAlpha","undefined","blendFuncSeparate","setBlendEquation","modeAlpha","blendEquationSeparate","setCullFace","value","setFrontFace","setDepthMask","setDepthFunc","activeTexture","TEXTURE0","bindFramebuffer","target","FRAMEBUFFER","buffer","extension","webgl2Func","extFunc","bind","sortOpaque","renderOrder","program","zDepth","sortTransparent","sortUI","getRenderList","scene","camera","frustumCull","sort","renderList","updateFrustum","traverse","node","visible","draw","frustumCulled","frustumIntersectsMesh","push","opaque","transparent","ui","forEach","depthTest","worldMatrix","getTranslation","projectionViewMatrix","concat","render","update","clear","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","updateMatrixWorld","aw","identity","setAxisAngle","axis","rad","s","sin","cos","bw","rotateX","rotateY","rotateZ","slerp","omega","cosom","sinom","scale0","scale1","invert","a0","a1","a2","a3","invDot","conjugate","fromMat3","fTrace","fRoot","i","j","k","fromEuler","euler","order","sx","cx","sy","cy","sz","cz","vec4","Quat","onChange","QuatFunc","qA","qB","fromMatrix3","matrix3","fromAxisAngle","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","transpose","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","determinant","b0","b1","b2","b3","translate","rotate","c","b12","b20","b21","b22","hypot","abs","mat","getScaling","getMaxScaleOnAxis","max","getRotation","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat","yx","zx","zy","perspective","fovy","aspect","near","far","f","tan","nf","ortho","left","right","bottom","top","lr","bt","targetTo","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","multiplyScalar","Mat4","Mat4Func","ma","mb","fromPerspective","fov","fromOrthogonal","fromQuaternion","setPosition","compose","pos","lookAt","fromRotationMatrix","asin","min","atan2","tmpMat4","Euler","reorder","EulerFunc","Transform","parent","children","matrix","matrixAutoUpdate","position","quaternion","rotation","setParent","notifyParent","removeChild","addChild","child","notifyChild","indexOf","splice","force","updateMatrix","worldMatrixNeedsUpdate","l","callback","decompose","tempMat4","tempVec3a","tempVec3b","Camera","zoom","projectionMatrix","viewMatrix","worldPosition","type","orthographic","project","unproject","frustum","constant","invLen","geometry","bounds","radius","Infinity","computeBoundingSphere","center","frustumIntersectsSphere","normal","plane","transformMat2","transformMat2d","Vec2","Vec2Func","applyMatrix3","mat3","STATE","NONE","ROTATE","DOLLY","PAN","DOLLY_PAN","tempVec2a","tempVec2b","Orbit","object","element","enabled","ease","inertia","enableRotate","rotateSpeed","autoRotate","autoRotateSpeed","enableZoom","zoomSpeed","enablePan","panSpeed","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","maxDistance","sphericalDelta","phi","theta","sphericalTarget","spherical","panDelta","offset","handleAutoRotate","sinPhiRadius","forcePosition","rotateStart","panStart","dollyStart","getZoomScale","pow","mouseButtons","ORBIT","ZOOM","pan","deltaX","deltaY","el","body","targetDistance","panLeft","clientHeight","panUp","dolly","dollyScale","handleMoveRotate","handleMovePan","onMouseDown","e","button","clientX","clientY","window","addEventListener","onMouseMove","onMouseUp","handleMouseMoveDolly","removeEventListener","onMouseWheel","stopPropagation","preventDefault","onTouchStart","touches","pageX","pageY","handleTouchStartDollyPan","dx","dy","onTouchMove","handleTouchMoveDollyPan","onTouchEnd","onContextMenu","remove","passive","tempVec2c","tempVec3c","tempVec3d","tempVec3e","tempVec3f","tempVec3g","tempVec3h","tempVec3i","tempVec3j","tempVec3k","Raycast","origin","direction","castMouse","mouse","intersectBounds","meshes","output","isArray","invWorldMat4","hits","mesh","localMaxDistance","localDistance","raycast","intersectSphere","intersectBox","hit","localPoint","point","intersectMeshes","includeUV","includeNormal","closestFaceNormal","faceNormal","barycoord","uvA","uvB","uvC","closestA","closestB","closestC","index","start","drawRange","end","count","ai","data","bi","ci","intersectTriangle","localFaceNormal","uv","localNormal","getBarycoord","sphere","ray","tca","d2","radius2","thc","t0","t1","box","tmin","tmax","tYmin","tYmax","tZmin","tZmax","invdirx","invdiry","invdirz","backfaceCulling","edge1","edge2","diff","DdN","sign","DdQxE2","DdE1xQ","QdN","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","emptyPixel","Uint8Array","isPowerOf2","Texture","image","TEXTURE_2D","UNSIGNED_BYTE","format","RGBA","internalFormat","wrapS","CLAMP_TO_EDGE","wrapT","generateMipmaps","minFilter","NEAREST_MIPMAP_LINEAR","LINEAR","magFilter","anisotropy","level","texture","createTexture","store","glState","REPEAT","bindTexture","textureUnit","needsUpdate","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_CUBE_MAP","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","ArrayBuffer","isView","isCompressedTexture","compressedTexImage2D","generateMipmap","onUpdate","fromMat4","normalFromMat4","projection","Mat3","Mat3Func","fromMatrix4","fromBasis","vec3a","vec3b","vec3c","getNormalMatrix","Mesh","mode","TRIANGLES","console","error","modelViewMatrix","normalMatrix","beforeRenderCallbacks","afterRenderCallbacks","onBeforeRender","onAfterRender","uniforms","modelMatrix","cameraPosition","flipFaces","use","ATTR_ID","isBoundsWarned","Geometry","VAOs","instancedCount","currentGeometry","key","addAttribute","attr","size","Float32Array","FLOAT","Uint16Array","UNSIGNED_SHORT","UNSIGNED_INT","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","normalized","stride","byteLength","divisor","instanced","createBuffer","updateAttribute","isInstanced","warn","bindBuffer","bufferData","STATIC_DRAW","setIndex","setDrawRange","setInstancedCount","createVAO","attributeOrder","bindAttributes","attributeLocations","location","name","numLoc","vertexAttribPointer","enableVertexAttribArray","drawElements","drawArrays","getPositionArray","computeBoundingBox","array","maxRadiusSq","vao","deleteBuffer","Plane","widthSegments","heightSegments","wSegs","hSegs","num","numIndices","Uint32Array","buildPlane","uDir","vDir","ii","io","segW","segH","iy","ix","d","arrayCacheF32","Program","vertex","fragment","BACK","depthWrite","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","addLineNumbers","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","getUniformLocation","split","match","uniformName","isStructArray","structIndex","Number","structProperty","isNaN","isStruct","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","getAttribLocation","join","applyState","CULL_FACE","BLEND","currentProgram","useProgram","activeUniform","setUniform","CW","deleteProgram","flatten","setValue","get","slice","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","arrayLen","valueLen","warnCount","message","module","exports","require","DisplayQuad","_Texture","_Aspect","innerWidth","innerHeight","_Scale","_ViewportPos","params","PHYSICS","STIFFNESS","MAX_BOUNDS","TIMESTEP","CLAMP","STEPS","CLOTH","SIZE","NOISE","SPATIAL_FREQ","TEMPORAL_FREQ","AMP","SHADOW","BIAS","RenderTarget","depthTexture","createFramebuffer","textures","framebufferTexture2D","COLOR_ATTACHMENT0","NEAREST","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_ATTACHMENT","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","stencilBuffer","STENCIL_INDEX8","STENCIL_ATTACHMENT","depthStencilBuffer","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","Triangle","GPGPU","filtering","initialData","passes","dataLength","ceil","log","LN2","coords","floor","floatArray","RGBA32F","options","HALF_FLOAT","HALF_FLOAT_OES","RGBA16F","fbo","read","write","swap","addPass","defaultVertex","defaultFragment","textureUniform","pass","filter","prevPosKernel","currentPosKernel","positionKernel","normalKernel","restlengthKernel","restLengthDiagonalKernel","constrainHorizontalKernel","constrainVerticalKernel","constrainBLTRKernel","constrainBRTLKernel","Simulator","countX","countY","initSimulators","initPrograms","prewarm","positionData","positionDataIterator","origDataIterator","corner","isTopLeft","isTopRight","isBottomLeft","isBottomRight","currentPosCapture","prevPositionData","prevPosIterator","offsetx","random","offsety","offsetz","prevPositionCapture","positionSim","normalData","normalIterator","normalSim","restlengthCapture","restlengthDiagonalCapture","constraintSim","restlengthCaptureU","_InitPos","_Size","restlengthDiagonalU","normalSimU","_Position","positionSimU","_PrevPos","_CurrentPos","_Normal","_Force","_Time","_InputWorldPos","_IsInteracting","_Corner","prevPosCaptureSimU","_Positions","currentPosCaptureSimU","constrainHorizontalFirstPassU","createConstraintUniform","flip","restlength","constrainHorizontalSecondPassU","constrainVerticalFirstPassU","constrainVerticalSecondPassU","constrainBLTRfirstPasssU","constrainBLTRsecondPasssU","constrainBRTLfirstPasssU","constrainBRTLsecondPasssU","createDataTexture","_TexelSize","_Stiffness","_Flip","_RestLength","_Clamp","cornerUpdated","isInteracting","inputWorldPos","Positions","Normals","RestLengthsOrtho","RestLengthsDiagonal","Verlet","initGeometry","initProgram","timestep","timeStepSQ","windForce","forceDir","gravity","flipped","refGeometry","faces","particles","sticks","simulator","cubeMapTexture","loadCubeMap","_Normals","_CubeMap","loadImage","Promise","res","img","Image","onload","images","all","cubemap","posx","negx","posy","negy","posz","negz","FlipFace","FRONT","World3d","init","initInputParams","clearColor","zIndex","appendChild","orbitCamera","initMesh","initDebug","inputPos","projectedInputPos","worldInputPos","verlet","positionQuad","prevPositionQuad","restlengthQuad","calcScreenToWorldPos","dist","dt","onResize","App","hideCTA","requestAnimationFrame","time","Date","now","tmpTime","deltaTime","prevTime","initEvents","ctaHidden","querySelector","classList"],"mappings":"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","file":"src.0d9df210.js","sourceRoot":"..","sourcesContent":["const EPSILON = 0.000001;\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    out[2] = a[2] * b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    out[2] = a[2] / b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n    let x = b[0] - a[0];\r\n    let y = b[1] - a[1];\r\n    let z = b[2] - a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n    let x = b[0] - a[0];\r\n    let y = b[1] - a[1];\r\n    let z = b[2] - a[2];\r\n    return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    out[2] = 1.0 / a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let len = x * x + y * y + z * z;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2];\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2];\r\n\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    w = w || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Same as above but doesn't apply translation.\r\n * Useful for rays.\r\n */\r\nexport function scaleRotateMat4(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    w = w || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    out[0] = x * m[0] + y * m[3] + z * m[6];\r\n    out[1] = x * m[1] + y * m[4] + z * m[7];\r\n    out[2] = x * m[2] + y * m[5] + z * m[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let qx = q[0],\r\n        qy = q[1],\r\n        qz = q[2],\r\n        qw = q[3];\r\n\r\n    let uvx = qy * z - qz * y;\r\n    let uvy = qz * x - qx * z;\r\n    let uvz = qx * y - qy * x;\r\n\r\n    let uuvx = qy * uvz - qz * uvy;\r\n    let uuvy = qz * uvx - qx * uvz;\r\n    let uuvz = qx * uvy - qy * uvx;\r\n\r\n    let w2 = qw * 2;\r\n    uvx *= w2;\r\n    uvy *= w2;\r\n    uvz *= w2;\r\n\r\n    uuvx *= 2;\r\n    uuvy *= 2;\r\n    uuvz *= 2;\r\n\r\n    out[0] = x + uvx + uuvx;\r\n    out[1] = y + uvy + uuvy;\r\n    out[2] = z + uvz + uuvz;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport const angle = (function () {\r\n    const tempA = [0, 0, 0];\r\n    const tempB = [0, 0, 0];\r\n\r\n    return function (a, b) {\r\n        copy(tempA, a);\r\n        copy(tempB, b);\r\n\r\n        normalize(tempA, tempA);\r\n        normalize(tempB, tempB);\r\n\r\n        let cosine = dot(tempA, tempB);\r\n\r\n        if (cosine > 1.0) {\r\n            return 0;\r\n        } else if (cosine < -1.0) {\r\n            return Math.PI;\r\n        } else {\r\n            return Math.acos(cosine);\r\n        }\r\n    };\r\n})();\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n","import * as Vec3Func from './functions/Vec3Func.js';\r\n\r\nexport class Vec3 extends Array {\r\n    constructor(x = 0, y = x, z = x) {\r\n        super(x, y, z);\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n    }\r\n\r\n    set z(v) {\r\n        this[2] = v;\r\n    }\r\n\r\n    set(x, y = x, z = x) {\r\n        if (x.length) return this.copy(x);\r\n        Vec3Func.set(this, x, y, z);\r\n        return this;\r\n    }\r\n\r\n    copy(v) {\r\n        Vec3Func.copy(this, v);\r\n        return this;\r\n    }\r\n\r\n    add(va, vb) {\r\n        if (vb) Vec3Func.add(this, va, vb);\r\n        else Vec3Func.add(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    sub(va, vb) {\r\n        if (vb) Vec3Func.subtract(this, va, vb);\r\n        else Vec3Func.subtract(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    multiply(v) {\r\n        if (v.length) Vec3Func.multiply(this, this, v);\r\n        else Vec3Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    divide(v) {\r\n        if (v.length) Vec3Func.divide(this, this, v);\r\n        else Vec3Func.scale(this, this, 1 / v);\r\n        return this;\r\n    }\r\n\r\n    inverse(v = this) {\r\n        Vec3Func.inverse(this, v);\r\n        return this;\r\n    }\r\n\r\n    // Can't use 'length' as Array.prototype uses it\r\n    len() {\r\n        return Vec3Func.length(this);\r\n    }\r\n\r\n    distance(v) {\r\n        if (v) return Vec3Func.distance(this, v);\r\n        else return Vec3Func.length(this);\r\n    }\r\n\r\n    squaredLen() {\r\n        return Vec3Func.squaredLength(this);\r\n    }\r\n\r\n    squaredDistance(v) {\r\n        if (v) return Vec3Func.squaredDistance(this, v);\r\n        else return Vec3Func.squaredLength(this);\r\n    }\r\n\r\n    negate(v = this) {\r\n        Vec3Func.negate(this, v);\r\n        return this;\r\n    }\r\n\r\n    cross(va, vb) {\r\n        if (vb) Vec3Func.cross(this, va, vb);\r\n        else Vec3Func.cross(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    scale(v) {\r\n        Vec3Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    normalize() {\r\n        Vec3Func.normalize(this, this);\r\n        return this;\r\n    }\r\n\r\n    dot(v) {\r\n        return Vec3Func.dot(this, v);\r\n    }\r\n\r\n    equals(v) {\r\n        return Vec3Func.exactEquals(this, v);\r\n    }\r\n\r\n    applyMatrix4(mat4) {\r\n        Vec3Func.transformMat4(this, this, mat4);\r\n        return this;\r\n    }\r\n\r\n    scaleRotateMatrix4(mat4) {\r\n        Vec3Func.scaleRotateMat4(this, this, mat4);\r\n        return this;\r\n    }\r\n\r\n    applyQuaternion(q) {\r\n        Vec3Func.transformQuat(this, this, q);\r\n        return this;\r\n    }\r\n\r\n    angle(v) {\r\n        return Vec3Func.angle(this, v);\r\n    }\r\n\r\n    lerp(v, t) {\r\n        Vec3Func.lerp(this, this, v, t);\r\n        return this;\r\n    }\r\n\r\n    clone() {\r\n        return new Vec3(this[0], this[1], this[2]);\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        this[2] = a[o + 2];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        a[o + 2] = this[2];\r\n        return a;\r\n    }\r\n\r\n    transformDirection(mat4) {\r\n        const x = this[0];\r\n        const y = this[1];\r\n        const z = this[2];\r\n\r\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\r\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\r\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\r\n\r\n        return this.normalize();\r\n    }\r\n}\r\n","import { Vec3 } from '../math/Vec3.js';\r\n\r\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\r\n\r\n// Not automatic - devs to use these methods manually\r\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n// gl.clearColor( r, g, b, a );\r\n// gl.stencilMask( stencilMask );\r\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\r\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\r\n// gl.clearStencil( stencil );\r\n\r\nconst tempVec3 = new Vec3();\r\nlet ID = 1;\r\n\r\nexport class Renderer {\r\n    constructor({\r\n        canvas = document.createElement('canvas'),\r\n        width = 300,\r\n        height = 150,\r\n        dpr = 1,\r\n        alpha = false,\r\n        depth = true,\r\n        stencil = false,\r\n        antialias = false,\r\n        premultipliedAlpha = false,\r\n        preserveDrawingBuffer = false,\r\n        powerPreference = 'default',\r\n        autoClear = true,\r\n        webgl = 2,\r\n    } = {}) {\r\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\r\n        this.dpr = dpr;\r\n        this.alpha = alpha;\r\n        this.color = true;\r\n        this.depth = depth;\r\n        this.stencil = stencil;\r\n        this.premultipliedAlpha = premultipliedAlpha;\r\n        this.autoClear = autoClear;\r\n        this.id = ID++;\r\n\r\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\r\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\r\n        this.isWebgl2 = !!this.gl;\r\n        if (!this.gl) {\r\n            this.gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);\r\n        }\r\n\r\n        // Attach renderer to gl so that all classes have access to internal state functions\r\n        this.gl.renderer = this;\r\n\r\n        // initialise size values\r\n        this.setSize(width, height);\r\n\r\n        // gl state stores to avoid redundant calls on methods used internally\r\n        this.state = {};\r\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\r\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\r\n        this.state.cullFace = null;\r\n        this.state.frontFace = this.gl.CCW;\r\n        this.state.depthMask = true;\r\n        this.state.depthFunc = this.gl.LESS;\r\n        this.state.premultiplyAlpha = false;\r\n        this.state.flipY = false;\r\n        this.state.unpackAlignment = 4;\r\n        this.state.framebuffer = null;\r\n        this.state.viewport = { width: null, height: null };\r\n        this.state.textureUnits = [];\r\n        this.state.activeTextureUnit = 0;\r\n        this.state.boundBuffer = null;\r\n        this.state.uniformLocations = new Map();\r\n\r\n        // store requested extensions\r\n        this.extensions = {};\r\n\r\n        // Initialise extra format types\r\n        if (this.isWebgl2) {\r\n            this.getExtension('EXT_color_buffer_float');\r\n            this.getExtension('OES_texture_float_linear');\r\n        } else {\r\n            this.getExtension('OES_texture_float');\r\n            this.getExtension('OES_texture_float_linear');\r\n            this.getExtension('OES_texture_half_float');\r\n            this.getExtension('OES_texture_half_float_linear');\r\n            this.getExtension('OES_element_index_uint');\r\n            this.getExtension('OES_standard_derivatives');\r\n            this.getExtension('EXT_sRGB');\r\n            this.getExtension('WEBGL_depth_texture');\r\n            this.getExtension('WEBGL_draw_buffers');\r\n        }\r\n\r\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\r\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\r\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\r\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\r\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\r\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\r\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\r\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\r\n\r\n        // Store device parameters\r\n        this.parameters = {};\r\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\r\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\r\n            : 0;\r\n    }\r\n\r\n    setSize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.gl.canvas.width = width * this.dpr;\r\n        this.gl.canvas.height = height * this.dpr;\r\n\r\n        Object.assign(this.gl.canvas.style, {\r\n            width: width + 'px',\r\n            height: height + 'px',\r\n        });\r\n    }\r\n\r\n    setViewport(width, height) {\r\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\r\n        this.state.viewport.width = width;\r\n        this.state.viewport.height = height;\r\n        this.gl.viewport(0, 0, width, height);\r\n    }\r\n\r\n    enable(id) {\r\n        if (this.state[id] === true) return;\r\n        this.gl.enable(id);\r\n        this.state[id] = true;\r\n    }\r\n\r\n    disable(id) {\r\n        if (this.state[id] === false) return;\r\n        this.gl.disable(id);\r\n        this.state[id] = false;\r\n    }\r\n\r\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\r\n        if (\r\n            this.state.blendFunc.src === src &&\r\n            this.state.blendFunc.dst === dst &&\r\n            this.state.blendFunc.srcAlpha === srcAlpha &&\r\n            this.state.blendFunc.dstAlpha === dstAlpha\r\n        )\r\n            return;\r\n        this.state.blendFunc.src = src;\r\n        this.state.blendFunc.dst = dst;\r\n        this.state.blendFunc.srcAlpha = srcAlpha;\r\n        this.state.blendFunc.dstAlpha = dstAlpha;\r\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\r\n        else this.gl.blendFunc(src, dst);\r\n    }\r\n\r\n    setBlendEquation(modeRGB, modeAlpha) {\r\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\r\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\r\n        this.state.blendEquation.modeRGB = modeRGB;\r\n        this.state.blendEquation.modeAlpha = modeAlpha;\r\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\r\n        else this.gl.blendEquation(modeRGB);\r\n    }\r\n\r\n    setCullFace(value) {\r\n        if (this.state.cullFace === value) return;\r\n        this.state.cullFace = value;\r\n        this.gl.cullFace(value);\r\n    }\r\n\r\n    setFrontFace(value) {\r\n        if (this.state.frontFace === value) return;\r\n        this.state.frontFace = value;\r\n        this.gl.frontFace(value);\r\n    }\r\n\r\n    setDepthMask(value) {\r\n        if (this.state.depthMask === value) return;\r\n        this.state.depthMask = value;\r\n        this.gl.depthMask(value);\r\n    }\r\n\r\n    setDepthFunc(value) {\r\n        if (this.state.depthFunc === value) return;\r\n        this.state.depthFunc = value;\r\n        this.gl.depthFunc(value);\r\n    }\r\n\r\n    activeTexture(value) {\r\n        if (this.state.activeTextureUnit === value) return;\r\n        this.state.activeTextureUnit = value;\r\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\r\n    }\r\n\r\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\r\n        if (this.state.framebuffer === buffer) return;\r\n        this.state.framebuffer = buffer;\r\n        this.gl.bindFramebuffer(target, buffer);\r\n    }\r\n\r\n    getExtension(extension, webgl2Func, extFunc) {\r\n        // if webgl2 function supported, return func bound to gl context\r\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\r\n\r\n        // fetch extension once only\r\n        if (!this.extensions[extension]) {\r\n            this.extensions[extension] = this.gl.getExtension(extension);\r\n        }\r\n\r\n        // return extension if no function requested\r\n        if (!webgl2Func) return this.extensions[extension];\r\n\r\n        // Return null if extension not supported\r\n        if (!this.extensions[extension]) return null;\r\n\r\n        // return extension function, bound to extension\r\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\r\n    }\r\n\r\n    sortOpaque(a, b) {\r\n        if (a.renderOrder !== b.renderOrder) {\r\n            return a.renderOrder - b.renderOrder;\r\n        } else if (a.program.id !== b.program.id) {\r\n            return a.program.id - b.program.id;\r\n        } else if (a.zDepth !== b.zDepth) {\r\n            return a.zDepth - b.zDepth;\r\n        } else {\r\n            return b.id - a.id;\r\n        }\r\n    }\r\n\r\n    sortTransparent(a, b) {\r\n        if (a.renderOrder !== b.renderOrder) {\r\n            return a.renderOrder - b.renderOrder;\r\n        }\r\n        if (a.zDepth !== b.zDepth) {\r\n            return b.zDepth - a.zDepth;\r\n        } else {\r\n            return b.id - a.id;\r\n        }\r\n    }\r\n\r\n    sortUI(a, b) {\r\n        if (a.renderOrder !== b.renderOrder) {\r\n            return a.renderOrder - b.renderOrder;\r\n        } else if (a.program.id !== b.program.id) {\r\n            return a.program.id - b.program.id;\r\n        } else {\r\n            return b.id - a.id;\r\n        }\r\n    }\r\n\r\n    getRenderList({ scene, camera, frustumCull, sort }) {\r\n        let renderList = [];\r\n\r\n        if (camera && frustumCull) camera.updateFrustum();\r\n\r\n        // Get visible\r\n        scene.traverse((node) => {\r\n            if (!node.visible) return true;\r\n            if (!node.draw) return;\r\n\r\n            if (frustumCull && node.frustumCulled && camera) {\r\n                if (!camera.frustumIntersectsMesh(node)) return;\r\n            }\r\n\r\n            renderList.push(node);\r\n        });\r\n\r\n        if (sort) {\r\n            const opaque = [];\r\n            const transparent = []; // depthTest true\r\n            const ui = []; // depthTest false\r\n\r\n            renderList.forEach((node) => {\r\n                // Split into the 3 render groups\r\n                if (!node.program.transparent) {\r\n                    opaque.push(node);\r\n                } else if (node.program.depthTest) {\r\n                    transparent.push(node);\r\n                } else {\r\n                    ui.push(node);\r\n                }\r\n\r\n                node.zDepth = 0;\r\n\r\n                // Only calculate z-depth if renderOrder unset and depthTest is true\r\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\r\n\r\n                // update z-depth\r\n                node.worldMatrix.getTranslation(tempVec3);\r\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\r\n                node.zDepth = tempVec3.z;\r\n            });\r\n\r\n            opaque.sort(this.sortOpaque);\r\n            transparent.sort(this.sortTransparent);\r\n            ui.sort(this.sortUI);\r\n\r\n            renderList = opaque.concat(transparent, ui);\r\n        }\r\n\r\n        return renderList;\r\n    }\r\n\r\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\r\n        if (target === null) {\r\n            // make sure no render target bound so draws to canvas\r\n            this.bindFramebuffer();\r\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\r\n        } else {\r\n            // bind supplied render target and update viewport\r\n            this.bindFramebuffer(target);\r\n            this.setViewport(target.width, target.height);\r\n        }\r\n\r\n        if (clear || (this.autoClear && clear !== false)) {\r\n            // Ensure depth buffer writing is enabled so it can be cleared\r\n            if (this.depth && (!target || target.depth)) {\r\n                this.enable(this.gl.DEPTH_TEST);\r\n                this.setDepthMask(true);\r\n            }\r\n            this.gl.clear(\r\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\r\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\r\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\r\n            );\r\n        }\r\n\r\n        // updates all scene graph matrices\r\n        if (update) scene.updateMatrixWorld();\r\n\r\n        // Update camera separately, in case not in scene graph\r\n        if (camera) camera.updateMatrixWorld();\r\n\r\n        // Get render list - entails culling and sorting\r\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\r\n\r\n        renderList.forEach((node) => {\r\n            node.draw({ camera });\r\n        });\r\n    }\r\n}\r\n","const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    out[3] = w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let w = a[3];\r\n    return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let w = a[3];\r\n    let len = x * x + y * y + z * z + w * w;\r\n    if (len > 0) {\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n    let aw = a[3];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    out[3] = aw + t * (b[3] - aw);\r\n    return out;\r\n}\r\n","import * as vec4 from './Vec4Func.js';\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n    rad = rad * 0.5;\r\n    let s = Math.sin(rad);\r\n    out[0] = s * axis[0];\r\n    out[1] = s * axis[1];\r\n    out[2] = s * axis[2];\r\n    out[3] = Math.cos(rad);\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiplies two quats\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2],\r\n        bw = b[3];\r\n\r\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n    rad *= 0.5;\r\n\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let bx = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw + aw * bx;\r\n    out[1] = ay * bw + az * bx;\r\n    out[2] = az * bw - ay * bx;\r\n    out[3] = aw * bw - ax * bx;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n    rad *= 0.5;\r\n\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let by = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw - az * by;\r\n    out[1] = ay * bw + aw * by;\r\n    out[2] = az * bw + ax * by;\r\n    out[3] = aw * bw - ay * by;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n    rad *= 0.5;\r\n\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let bz = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw + ay * bz;\r\n    out[1] = ay * bw - ax * bz;\r\n    out[2] = az * bw + aw * bz;\r\n    out[3] = aw * bw - az * bz;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n    // benchmarks:\r\n    //    http://jsperf.com/quaternion-slerp-implementations\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2],\r\n        bw = b[3];\r\n\r\n    let omega, cosom, sinom, scale0, scale1;\r\n\r\n    // calc cosine\r\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n    // adjust signs (if necessary)\r\n    if (cosom < 0.0) {\r\n        cosom = -cosom;\r\n        bx = -bx;\r\n        by = -by;\r\n        bz = -bz;\r\n        bw = -bw;\r\n    }\r\n    // calculate coefficients\r\n    if (1.0 - cosom > 0.000001) {\r\n        // standard case (slerp)\r\n        omega = Math.acos(cosom);\r\n        sinom = Math.sin(omega);\r\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n        scale1 = Math.sin(t * omega) / sinom;\r\n    } else {\r\n        // \"from\" and \"to\" quaternions are very close\r\n        //  ... so we can do a linear interpolation\r\n        scale0 = 1.0 - t;\r\n        scale1 = t;\r\n    }\r\n    // calculate final values\r\n    out[0] = scale0 * ax + scale1 * bx;\r\n    out[1] = scale0 * ay + scale1 * by;\r\n    out[2] = scale0 * az + scale1 * bz;\r\n    out[3] = scale0 * aw + scale1 * bw;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n    let a0 = a[0],\r\n        a1 = a[1],\r\n        a2 = a[2],\r\n        a3 = a[3];\r\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n    let invDot = dot ? 1.0 / dot : 0;\r\n\r\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n    out[0] = -a0 * invDot;\r\n    out[1] = -a1 * invDot;\r\n    out[2] = -a2 * invDot;\r\n    out[3] = a3 * invDot;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n    // article \"Quaternion Calculus and Fast Animation\".\r\n    let fTrace = m[0] + m[4] + m[8];\r\n    let fRoot;\r\n\r\n    if (fTrace > 0.0) {\r\n        // |w| > 1/2, may as well choose w > 1/2\r\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n        out[3] = 0.5 * fRoot;\r\n        fRoot = 0.5 / fRoot; // 1/(4w)\r\n        out[0] = (m[5] - m[7]) * fRoot;\r\n        out[1] = (m[6] - m[2]) * fRoot;\r\n        out[2] = (m[1] - m[3]) * fRoot;\r\n    } else {\r\n        // |w| <= 1/2\r\n        let i = 0;\r\n        if (m[4] > m[0]) i = 1;\r\n        if (m[8] > m[i * 3 + i]) i = 2;\r\n        let j = (i + 1) % 3;\r\n        let k = (i + 2) % 3;\r\n\r\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n        out[i] = 0.5 * fRoot;\r\n        fRoot = 0.5 / fRoot;\r\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} euler Angles to rotate around each axis in degrees.\r\n * @param {String} order detailing order of operations. Default 'XYZ'.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, euler, order = 'YXZ') {\r\n    let sx = Math.sin(euler[0] * 0.5);\r\n    let cx = Math.cos(euler[0] * 0.5);\r\n    let sy = Math.sin(euler[1] * 0.5);\r\n    let cy = Math.cos(euler[1] * 0.5);\r\n    let sz = Math.sin(euler[2] * 0.5);\r\n    let cz = Math.cos(euler[2] * 0.5);\r\n\r\n    if (order === 'XYZ') {\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n    } else if (order === 'YXZ') {\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n    } else if (order === 'ZXY') {\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n    } else if (order === 'ZYX') {\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n    } else if (order === 'YZX') {\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n    } else if (order === 'XZY') {\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const add = vec4.add;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport const dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport const length = vec4.length;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const normalize = vec4.normalize;\r\n","import * as QuatFunc from './functions/QuatFunc.js';\r\n\r\nexport class Quat extends Array {\r\n    constructor(x = 0, y = 0, z = 0, w = 1) {\r\n        super(x, y, z, w);\r\n        this.onChange = () => {};\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n\r\n    get w() {\r\n        return this[3];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set z(v) {\r\n        this[2] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set w(v) {\r\n        this[3] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    identity() {\r\n        QuatFunc.identity(this);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    set(x, y, z, w) {\r\n        if (x.length) return this.copy(x);\r\n        QuatFunc.set(this, x, y, z, w);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    rotateX(a) {\r\n        QuatFunc.rotateX(this, this, a);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    rotateY(a) {\r\n        QuatFunc.rotateY(this, this, a);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    rotateZ(a) {\r\n        QuatFunc.rotateZ(this, this, a);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    inverse(q = this) {\r\n        QuatFunc.invert(this, q);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    conjugate(q = this) {\r\n        QuatFunc.conjugate(this, q);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    copy(q) {\r\n        QuatFunc.copy(this, q);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    normalize(q = this) {\r\n        QuatFunc.normalize(this, q);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    multiply(qA, qB) {\r\n        if (qB) {\r\n            QuatFunc.multiply(this, qA, qB);\r\n        } else {\r\n            QuatFunc.multiply(this, this, qA);\r\n        }\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    dot(v) {\r\n        return QuatFunc.dot(this, v);\r\n    }\r\n\r\n    fromMatrix3(matrix3) {\r\n        QuatFunc.fromMat3(this, matrix3);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    fromEuler(euler) {\r\n        QuatFunc.fromEuler(this, euler, euler.order);\r\n        return this;\r\n    }\r\n\r\n    fromAxisAngle(axis, a) {\r\n        QuatFunc.setAxisAngle(this, axis, a);\r\n        return this;\r\n    }\r\n\r\n    slerp(q, t) {\r\n        QuatFunc.slerp(this, this, q, t);\r\n        return this;\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        this[2] = a[o + 2];\r\n        this[3] = a[o + 3];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        a[o + 2] = this[2];\r\n        a[o + 3] = this[3];\r\n        return a;\r\n    }\r\n}\r\n","const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n    out[0] = m00;\r\n    out[1] = m01;\r\n    out[2] = m02;\r\n    out[3] = m03;\r\n    out[4] = m10;\r\n    out[5] = m11;\r\n    out[6] = m12;\r\n    out[7] = m13;\r\n    out[8] = m20;\r\n    out[9] = m21;\r\n    out[10] = m22;\r\n    out[11] = m23;\r\n    out[12] = m30;\r\n    out[13] = m31;\r\n    out[14] = m32;\r\n    out[15] = m33;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = 1;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 1;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n    if (out === a) {\r\n        let a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a12 = a[6],\r\n            a13 = a[7];\r\n        let a23 = a[11];\r\n\r\n        out[1] = a[4];\r\n        out[2] = a[8];\r\n        out[3] = a[12];\r\n        out[4] = a01;\r\n        out[6] = a[9];\r\n        out[7] = a[13];\r\n        out[8] = a02;\r\n        out[9] = a12;\r\n        out[11] = a[14];\r\n        out[12] = a03;\r\n        out[13] = a13;\r\n        out[14] = a23;\r\n    } else {\r\n        out[0] = a[0];\r\n        out[1] = a[4];\r\n        out[2] = a[8];\r\n        out[3] = a[12];\r\n        out[4] = a[1];\r\n        out[5] = a[5];\r\n        out[6] = a[9];\r\n        out[7] = a[13];\r\n        out[8] = a[2];\r\n        out[9] = a[6];\r\n        out[10] = a[10];\r\n        out[11] = a[14];\r\n        out[12] = a[3];\r\n        out[13] = a[7];\r\n        out[14] = a[11];\r\n        out[15] = a[15];\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    let a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7];\r\n    let a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11];\r\n    let a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n\r\n    let b00 = a00 * a11 - a01 * a10;\r\n    let b01 = a00 * a12 - a02 * a10;\r\n    let b02 = a00 * a13 - a03 * a10;\r\n    let b03 = a01 * a12 - a02 * a11;\r\n    let b04 = a01 * a13 - a03 * a11;\r\n    let b05 = a02 * a13 - a03 * a12;\r\n    let b06 = a20 * a31 - a21 * a30;\r\n    let b07 = a20 * a32 - a22 * a30;\r\n    let b08 = a20 * a33 - a23 * a30;\r\n    let b09 = a21 * a32 - a22 * a31;\r\n    let b10 = a21 * a33 - a23 * a31;\r\n    let b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    if (!det) {\r\n        return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    let a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7];\r\n    let a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11];\r\n    let a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n\r\n    let b00 = a00 * a11 - a01 * a10;\r\n    let b01 = a00 * a12 - a02 * a10;\r\n    let b02 = a00 * a13 - a03 * a10;\r\n    let b03 = a01 * a12 - a02 * a11;\r\n    let b04 = a01 * a13 - a03 * a11;\r\n    let b05 = a02 * a13 - a03 * a12;\r\n    let b06 = a20 * a31 - a21 * a30;\r\n    let b07 = a20 * a32 - a22 * a30;\r\n    let b08 = a20 * a33 - a23 * a30;\r\n    let b09 = a21 * a32 - a22 * a31;\r\n    let b10 = a21 * a33 - a23 * a31;\r\n    let b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    let a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7];\r\n    let a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11];\r\n    let a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n\r\n    // Cache only the current line of the second matrix\r\n    let b0 = b[0],\r\n        b1 = b[1],\r\n        b2 = b[2],\r\n        b3 = b[3];\r\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[4];\r\n    b1 = b[5];\r\n    b2 = b[6];\r\n    b3 = b[7];\r\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[8];\r\n    b1 = b[9];\r\n    b2 = b[10];\r\n    b3 = b[11];\r\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[12];\r\n    b1 = b[13];\r\n    b2 = b[14];\r\n    b3 = b[15];\r\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n    let x = v[0],\r\n        y = v[1],\r\n        z = v[2];\r\n    let a00, a01, a02, a03;\r\n    let a10, a11, a12, a13;\r\n    let a20, a21, a22, a23;\r\n\r\n    if (a === out) {\r\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n    } else {\r\n        a00 = a[0];\r\n        a01 = a[1];\r\n        a02 = a[2];\r\n        a03 = a[3];\r\n        a10 = a[4];\r\n        a11 = a[5];\r\n        a12 = a[6];\r\n        a13 = a[7];\r\n        a20 = a[8];\r\n        a21 = a[9];\r\n        a22 = a[10];\r\n        a23 = a[11];\r\n\r\n        out[0] = a00;\r\n        out[1] = a01;\r\n        out[2] = a02;\r\n        out[3] = a03;\r\n        out[4] = a10;\r\n        out[5] = a11;\r\n        out[6] = a12;\r\n        out[7] = a13;\r\n        out[8] = a20;\r\n        out[9] = a21;\r\n        out[10] = a22;\r\n        out[11] = a23;\r\n\r\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n    let x = v[0],\r\n        y = v[1],\r\n        z = v[2];\r\n\r\n    out[0] = a[0] * x;\r\n    out[1] = a[1] * x;\r\n    out[2] = a[2] * x;\r\n    out[3] = a[3] * x;\r\n    out[4] = a[4] * y;\r\n    out[5] = a[5] * y;\r\n    out[6] = a[6] * y;\r\n    out[7] = a[7] * y;\r\n    out[8] = a[8] * z;\r\n    out[9] = a[9] * z;\r\n    out[10] = a[10] * z;\r\n    out[11] = a[11] * z;\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n    let x = axis[0],\r\n        y = axis[1],\r\n        z = axis[2];\r\n    let len = Math.hypot(x, y, z);\r\n    let s, c, t;\r\n    let a00, a01, a02, a03;\r\n    let a10, a11, a12, a13;\r\n    let a20, a21, a22, a23;\r\n    let b00, b01, b02;\r\n    let b10, b11, b12;\r\n    let b20, b21, b22;\r\n\r\n    if (Math.abs(len) < EPSILON) {\r\n        return null;\r\n    }\r\n\r\n    len = 1 / len;\r\n    x *= len;\r\n    y *= len;\r\n    z *= len;\r\n\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    t = 1 - c;\r\n\r\n    a00 = a[0];\r\n    a01 = a[1];\r\n    a02 = a[2];\r\n    a03 = a[3];\r\n    a10 = a[4];\r\n    a11 = a[5];\r\n    a12 = a[6];\r\n    a13 = a[7];\r\n    a20 = a[8];\r\n    a21 = a[9];\r\n    a22 = a[10];\r\n    a23 = a[11];\r\n\r\n    // Construct the elements of the rotation matrix\r\n    b00 = x * x * t + c;\r\n    b01 = y * x * t + z * s;\r\n    b02 = z * x * t - y * s;\r\n    b10 = x * y * t - z * s;\r\n    b11 = y * y * t + c;\r\n    b12 = z * y * t + x * s;\r\n    b20 = x * z * t + y * s;\r\n    b21 = y * z * t - x * s;\r\n    b22 = z * z * t + c;\r\n\r\n    // Perform rotation-specific matrix multiplication\r\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n    if (a !== out) {\r\n        // If the source and destination differ, copy the unchanged last row\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n    out[0] = mat[12];\r\n    out[1] = mat[13];\r\n    out[2] = mat[14];\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n    let m11 = mat[0];\r\n    let m12 = mat[1];\r\n    let m13 = mat[2];\r\n    let m21 = mat[4];\r\n    let m22 = mat[5];\r\n    let m23 = mat[6];\r\n    let m31 = mat[8];\r\n    let m32 = mat[9];\r\n    let m33 = mat[10];\r\n\r\n    out[0] = Math.hypot(m11, m12, m13);\r\n    out[1] = Math.hypot(m21, m22, m23);\r\n    out[2] = Math.hypot(m31, m32, m33);\r\n\r\n    return out;\r\n}\r\n\r\nexport function getMaxScaleOnAxis(mat) {\r\n    let m11 = mat[0];\r\n    let m12 = mat[1];\r\n    let m13 = mat[2];\r\n    let m21 = mat[4];\r\n    let m22 = mat[5];\r\n    let m23 = mat[6];\r\n    let m31 = mat[8];\r\n    let m32 = mat[9];\r\n    let m33 = mat[10];\r\n\r\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\r\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\r\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\r\n\r\n    return Math.sqrt(Math.max(x, y, z));\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport const getRotation = (function () {\r\n    const temp = [0, 0, 0];\r\n\r\n    return function (out, mat) {\r\n        let scaling = temp;\r\n        getScaling(scaling, mat);\r\n\r\n        let is1 = 1 / scaling[0];\r\n        let is2 = 1 / scaling[1];\r\n        let is3 = 1 / scaling[2];\r\n\r\n        let sm11 = mat[0] * is1;\r\n        let sm12 = mat[1] * is2;\r\n        let sm13 = mat[2] * is3;\r\n        let sm21 = mat[4] * is1;\r\n        let sm22 = mat[5] * is2;\r\n        let sm23 = mat[6] * is3;\r\n        let sm31 = mat[8] * is1;\r\n        let sm32 = mat[9] * is2;\r\n        let sm33 = mat[10] * is3;\r\n\r\n        let trace = sm11 + sm22 + sm33;\r\n        let S = 0;\r\n\r\n        if (trace > 0) {\r\n            S = Math.sqrt(trace + 1.0) * 2;\r\n            out[3] = 0.25 * S;\r\n            out[0] = (sm23 - sm32) / S;\r\n            out[1] = (sm31 - sm13) / S;\r\n            out[2] = (sm12 - sm21) / S;\r\n        } else if (sm11 > sm22 && sm11 > sm33) {\r\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\r\n            out[3] = (sm23 - sm32) / S;\r\n            out[0] = 0.25 * S;\r\n            out[1] = (sm12 + sm21) / S;\r\n            out[2] = (sm31 + sm13) / S;\r\n        } else if (sm22 > sm33) {\r\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\r\n            out[3] = (sm31 - sm13) / S;\r\n            out[0] = (sm12 + sm21) / S;\r\n            out[1] = 0.25 * S;\r\n            out[2] = (sm23 + sm32) / S;\r\n        } else {\r\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\r\n            out[3] = (sm12 - sm21) / S;\r\n            out[0] = (sm31 + sm13) / S;\r\n            out[1] = (sm23 + sm32) / S;\r\n            out[2] = 0.25 * S;\r\n        }\r\n\r\n        return out;\r\n    };\r\n})();\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n    // Quaternion math\r\n    let x = q[0],\r\n        y = q[1],\r\n        z = q[2],\r\n        w = q[3];\r\n    let x2 = x + x;\r\n    let y2 = y + y;\r\n    let z2 = z + z;\r\n\r\n    let xx = x * x2;\r\n    let xy = x * y2;\r\n    let xz = x * z2;\r\n    let yy = y * y2;\r\n    let yz = y * z2;\r\n    let zz = z * z2;\r\n    let wx = w * x2;\r\n    let wy = w * y2;\r\n    let wz = w * z2;\r\n    let sx = s[0];\r\n    let sy = s[1];\r\n    let sz = s[2];\r\n\r\n    out[0] = (1 - (yy + zz)) * sx;\r\n    out[1] = (xy + wz) * sx;\r\n    out[2] = (xz - wy) * sx;\r\n    out[3] = 0;\r\n    out[4] = (xy - wz) * sy;\r\n    out[5] = (1 - (xx + zz)) * sy;\r\n    out[6] = (yz + wx) * sy;\r\n    out[7] = 0;\r\n    out[8] = (xz + wy) * sz;\r\n    out[9] = (yz - wx) * sz;\r\n    out[10] = (1 - (xx + yy)) * sz;\r\n    out[11] = 0;\r\n    out[12] = v[0];\r\n    out[13] = v[1];\r\n    out[14] = v[2];\r\n    out[15] = 1;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n    let x = q[0],\r\n        y = q[1],\r\n        z = q[2],\r\n        w = q[3];\r\n    let x2 = x + x;\r\n    let y2 = y + y;\r\n    let z2 = z + z;\r\n\r\n    let xx = x * x2;\r\n    let yx = y * x2;\r\n    let yy = y * y2;\r\n    let zx = z * x2;\r\n    let zy = z * y2;\r\n    let zz = z * z2;\r\n    let wx = w * x2;\r\n    let wy = w * y2;\r\n    let wz = w * z2;\r\n\r\n    out[0] = 1 - yy - zz;\r\n    out[1] = yx + wz;\r\n    out[2] = zx - wy;\r\n    out[3] = 0;\r\n\r\n    out[4] = yx - wz;\r\n    out[5] = 1 - xx - zz;\r\n    out[6] = zy + wx;\r\n    out[7] = 0;\r\n\r\n    out[8] = zx + wy;\r\n    out[9] = zy - wx;\r\n    out[10] = 1 - xx - yy;\r\n    out[11] = 0;\r\n\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n    let f = 1.0 / Math.tan(fovy / 2);\r\n    let nf = 1 / (near - far);\r\n    out[0] = f / aspect;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = f;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = (far + near) * nf;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 2 * far * near * nf;\r\n    out[15] = 0;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n    let lr = 1 / (left - right);\r\n    let bt = 1 / (bottom - top);\r\n    let nf = 1 / (near - far);\r\n    out[0] = -2 * lr;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = -2 * bt;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 2 * nf;\r\n    out[11] = 0;\r\n    out[12] = (left + right) * lr;\r\n    out[13] = (top + bottom) * bt;\r\n    out[14] = (far + near) * nf;\r\n    out[15] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} target Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n    let eyex = eye[0],\r\n        eyey = eye[1],\r\n        eyez = eye[2],\r\n        upx = up[0],\r\n        upy = up[1],\r\n        upz = up[2];\r\n\r\n    let z0 = eyex - target[0],\r\n        z1 = eyey - target[1],\r\n        z2 = eyez - target[2];\r\n\r\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\r\n    if (len === 0) {\r\n        // eye and target are in the same position\r\n        z2 = 1;\r\n    } else {\r\n        len = 1 / Math.sqrt(len);\r\n        z0 *= len;\r\n        z1 *= len;\r\n        z2 *= len;\r\n    }\r\n\r\n    let x0 = upy * z2 - upz * z1,\r\n        x1 = upz * z0 - upx * z2,\r\n        x2 = upx * z1 - upy * z0;\r\n\r\n    len = x0 * x0 + x1 * x1 + x2 * x2;\r\n    if (len === 0) {\r\n        // up and z are parallel\r\n        if (upz) {\r\n            upx += 1e-6;\r\n        } else if (upy) {\r\n            upz += 1e-6;\r\n        } else {\r\n            upy += 1e-6;\r\n        }\r\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\r\n\r\n        len = x0 * x0 + x1 * x1 + x2 * x2;\r\n    }\r\n\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n\r\n    out[0] = x0;\r\n    out[1] = x1;\r\n    out[2] = x2;\r\n    out[3] = 0;\r\n    out[4] = z1 * x2 - z2 * x1;\r\n    out[5] = z2 * x0 - z0 * x2;\r\n    out[6] = z0 * x1 - z1 * x0;\r\n    out[7] = 0;\r\n    out[8] = z0;\r\n    out[9] = z1;\r\n    out[10] = z2;\r\n    out[11] = 0;\r\n    out[12] = eyex;\r\n    out[13] = eyey;\r\n    out[14] = eyez;\r\n    out[15] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    out[4] = a[4] + b[4];\r\n    out[5] = a[5] + b[5];\r\n    out[6] = a[6] + b[6];\r\n    out[7] = a[7] + b[7];\r\n    out[8] = a[8] + b[8];\r\n    out[9] = a[9] + b[9];\r\n    out[10] = a[10] + b[10];\r\n    out[11] = a[11] + b[11];\r\n    out[12] = a[12] + b[12];\r\n    out[13] = a[13] + b[13];\r\n    out[14] = a[14] + b[14];\r\n    out[15] = a[15] + b[15];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    out[4] = a[4] - b[4];\r\n    out[5] = a[5] - b[5];\r\n    out[6] = a[6] - b[6];\r\n    out[7] = a[7] - b[7];\r\n    out[8] = a[8] - b[8];\r\n    out[9] = a[9] - b[9];\r\n    out[10] = a[10] - b[10];\r\n    out[11] = a[11] - b[11];\r\n    out[12] = a[12] - b[12];\r\n    out[13] = a[13] - b[13];\r\n    out[14] = a[14] - b[14];\r\n    out[15] = a[15] - b[15];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    out[4] = a[4] * b;\r\n    out[5] = a[5] * b;\r\n    out[6] = a[6] * b;\r\n    out[7] = a[7] * b;\r\n    out[8] = a[8] * b;\r\n    out[9] = a[9] * b;\r\n    out[10] = a[10] * b;\r\n    out[11] = a[11] * b;\r\n    out[12] = a[12] * b;\r\n    out[13] = a[13] * b;\r\n    out[14] = a[14] * b;\r\n    out[15] = a[15] * b;\r\n    return out;\r\n}\r\n","import * as Mat4Func from './functions/Mat4Func.js';\r\n\r\nexport class Mat4 extends Array {\r\n    constructor(\r\n        m00 = 1,\r\n        m01 = 0,\r\n        m02 = 0,\r\n        m03 = 0,\r\n        m10 = 0,\r\n        m11 = 1,\r\n        m12 = 0,\r\n        m13 = 0,\r\n        m20 = 0,\r\n        m21 = 0,\r\n        m22 = 1,\r\n        m23 = 0,\r\n        m30 = 0,\r\n        m31 = 0,\r\n        m32 = 0,\r\n        m33 = 1\r\n    ) {\r\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[12];\r\n    }\r\n\r\n    get y() {\r\n        return this[13];\r\n    }\r\n\r\n    get z() {\r\n        return this[14];\r\n    }\r\n\r\n    get w() {\r\n        return this[15];\r\n    }\r\n\r\n    set x(v) {\r\n        this[12] = v;\r\n    }\r\n\r\n    set y(v) {\r\n        this[13] = v;\r\n    }\r\n\r\n    set z(v) {\r\n        this[14] = v;\r\n    }\r\n\r\n    set w(v) {\r\n        this[15] = v;\r\n    }\r\n\r\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n        if (m00.length) return this.copy(m00);\r\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\r\n        return this;\r\n    }\r\n\r\n    translate(v, m = this) {\r\n        Mat4Func.translate(this, m, v);\r\n        return this;\r\n    }\r\n\r\n    rotate(v, axis, m = this) {\r\n        Mat4Func.rotate(this, m, v, axis);\r\n        return this;\r\n    }\r\n\r\n    scale(v, m = this) {\r\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\r\n        return this;\r\n    }\r\n\r\n    multiply(ma, mb) {\r\n        if (mb) {\r\n            Mat4Func.multiply(this, ma, mb);\r\n        } else {\r\n            Mat4Func.multiply(this, this, ma);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    identity() {\r\n        Mat4Func.identity(this);\r\n        return this;\r\n    }\r\n\r\n    copy(m) {\r\n        Mat4Func.copy(this, m);\r\n        return this;\r\n    }\r\n\r\n    fromPerspective({ fov, aspect, near, far } = {}) {\r\n        Mat4Func.perspective(this, fov, aspect, near, far);\r\n        return this;\r\n    }\r\n\r\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\r\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\r\n        return this;\r\n    }\r\n\r\n    fromQuaternion(q) {\r\n        Mat4Func.fromQuat(this, q);\r\n        return this;\r\n    }\r\n\r\n    setPosition(v) {\r\n        this.x = v[0];\r\n        this.y = v[1];\r\n        this.z = v[2];\r\n        return this;\r\n    }\r\n\r\n    inverse(m = this) {\r\n        Mat4Func.invert(this, m);\r\n        return this;\r\n    }\r\n\r\n    compose(q, pos, scale) {\r\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\r\n        return this;\r\n    }\r\n\r\n    getRotation(q) {\r\n        Mat4Func.getRotation(q, this);\r\n        return this;\r\n    }\r\n\r\n    getTranslation(pos) {\r\n        Mat4Func.getTranslation(pos, this);\r\n        return this;\r\n    }\r\n\r\n    getScaling(scale) {\r\n        Mat4Func.getScaling(scale, this);\r\n        return this;\r\n    }\r\n\r\n    getMaxScaleOnAxis() {\r\n        return Mat4Func.getMaxScaleOnAxis(this);\r\n    }\r\n\r\n    lookAt(eye, target, up) {\r\n        Mat4Func.targetTo(this, eye, target, up);\r\n        return this;\r\n    }\r\n\r\n    determinant() {\r\n        return Mat4Func.determinant(this);\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        this[2] = a[o + 2];\r\n        this[3] = a[o + 3];\r\n        this[4] = a[o + 4];\r\n        this[5] = a[o + 5];\r\n        this[6] = a[o + 6];\r\n        this[7] = a[o + 7];\r\n        this[8] = a[o + 8];\r\n        this[9] = a[o + 9];\r\n        this[10] = a[o + 10];\r\n        this[11] = a[o + 11];\r\n        this[12] = a[o + 12];\r\n        this[13] = a[o + 13];\r\n        this[14] = a[o + 14];\r\n        this[15] = a[o + 15];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        a[o + 2] = this[2];\r\n        a[o + 3] = this[3];\r\n        a[o + 4] = this[4];\r\n        a[o + 5] = this[5];\r\n        a[o + 6] = this[6];\r\n        a[o + 7] = this[7];\r\n        a[o + 8] = this[8];\r\n        a[o + 9] = this[9];\r\n        a[o + 10] = this[10];\r\n        a[o + 11] = this[11];\r\n        a[o + 12] = this[12];\r\n        a[o + 13] = this[13];\r\n        a[o + 14] = this[14];\r\n        a[o + 15] = this[15];\r\n        return a;\r\n    }\r\n}\r\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\r\n    if (order === 'XYZ') {\r\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\r\n        if (Math.abs(m[8]) < 0.99999) {\r\n            out[0] = Math.atan2(-m[9], m[10]);\r\n            out[2] = Math.atan2(-m[4], m[0]);\r\n        } else {\r\n            out[0] = Math.atan2(m[6], m[5]);\r\n            out[2] = 0;\r\n        }\r\n    } else if (order === 'YXZ') {\r\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\r\n        if (Math.abs(m[9]) < 0.99999) {\r\n            out[1] = Math.atan2(m[8], m[10]);\r\n            out[2] = Math.atan2(m[1], m[5]);\r\n        } else {\r\n            out[1] = Math.atan2(-m[2], m[0]);\r\n            out[2] = 0;\r\n        }\r\n    } else if (order === 'ZXY') {\r\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\r\n        if (Math.abs(m[6]) < 0.99999) {\r\n            out[1] = Math.atan2(-m[2], m[10]);\r\n            out[2] = Math.atan2(-m[4], m[5]);\r\n        } else {\r\n            out[1] = 0;\r\n            out[2] = Math.atan2(m[1], m[0]);\r\n        }\r\n    } else if (order === 'ZYX') {\r\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\r\n        if (Math.abs(m[2]) < 0.99999) {\r\n            out[0] = Math.atan2(m[6], m[10]);\r\n            out[2] = Math.atan2(m[1], m[0]);\r\n        } else {\r\n            out[0] = 0;\r\n            out[2] = Math.atan2(-m[4], m[5]);\r\n        }\r\n    } else if (order === 'YZX') {\r\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\r\n        if (Math.abs(m[1]) < 0.99999) {\r\n            out[0] = Math.atan2(-m[9], m[5]);\r\n            out[1] = Math.atan2(-m[2], m[0]);\r\n        } else {\r\n            out[0] = 0;\r\n            out[1] = Math.atan2(m[8], m[10]);\r\n        }\r\n    } else if (order === 'XZY') {\r\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\r\n        if (Math.abs(m[4]) < 0.99999) {\r\n            out[0] = Math.atan2(m[6], m[5]);\r\n            out[1] = Math.atan2(m[8], m[0]);\r\n        } else {\r\n            out[0] = Math.atan2(-m[9], m[10]);\r\n            out[1] = 0;\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\n","import * as EulerFunc from './functions/EulerFunc.js';\r\nimport { Mat4 } from './Mat4.js';\r\n\r\nconst tmpMat4 = new Mat4();\r\n\r\nexport class Euler extends Array {\r\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\r\n        super(x, y, z);\r\n        this.order = order;\r\n        this.onChange = () => {};\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set z(v) {\r\n        this[2] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set(x, y = x, z = x) {\r\n        if (x.length) return this.copy(x);\r\n        this[0] = x;\r\n        this[1] = y;\r\n        this[2] = z;\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    copy(v) {\r\n        this[0] = v[0];\r\n        this[1] = v[1];\r\n        this[2] = v[2];\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    reorder(order) {\r\n        this.order = order;\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    fromRotationMatrix(m, order = this.order) {\r\n        EulerFunc.fromRotationMatrix(this, m, order);\r\n        return this;\r\n    }\r\n\r\n    fromQuaternion(q, order = this.order) {\r\n        tmpMat4.fromQuaternion(q);\r\n        return this.fromRotationMatrix(tmpMat4, order);\r\n    }\r\n}\r\n","import { Vec3 } from '../math/Vec3.js';\r\nimport { Quat } from '../math/Quat.js';\r\nimport { Mat4 } from '../math/Mat4.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nexport class Transform {\r\n    constructor() {\r\n        this.parent = null;\r\n        this.children = [];\r\n        this.visible = true;\r\n\r\n        this.matrix = new Mat4();\r\n        this.worldMatrix = new Mat4();\r\n        this.matrixAutoUpdate = true;\r\n\r\n        this.position = new Vec3();\r\n        this.quaternion = new Quat();\r\n        this.scale = new Vec3(1);\r\n        this.rotation = new Euler();\r\n        this.up = new Vec3(0, 1, 0);\r\n\r\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\r\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\r\n    }\r\n\r\n    setParent(parent, notifyParent = true) {\r\n        if (notifyParent && this.parent && parent !== this.parent) this.parent.removeChild(this, false);\r\n        this.parent = parent;\r\n        if (notifyParent && parent) parent.addChild(this, false);\r\n    }\r\n\r\n    addChild(child, notifyChild = true) {\r\n        if (!~this.children.indexOf(child)) this.children.push(child);\r\n        if (notifyChild) child.setParent(this, false);\r\n    }\r\n\r\n    removeChild(child, notifyChild = true) {\r\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\r\n        if (notifyChild) child.setParent(null, false);\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n        if (this.matrixAutoUpdate) this.updateMatrix();\r\n        if (this.worldMatrixNeedsUpdate || force) {\r\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\r\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\r\n            this.worldMatrixNeedsUpdate = false;\r\n            force = true;\r\n        }\r\n\r\n        for (let i = 0, l = this.children.length; i < l; i++) {\r\n            this.children[i].updateMatrixWorld(force);\r\n        }\r\n    }\r\n\r\n    updateMatrix() {\r\n        this.matrix.compose(this.quaternion, this.position, this.scale);\r\n        this.worldMatrixNeedsUpdate = true;\r\n    }\r\n\r\n    traverse(callback) {\r\n        // Return true in callback to stop traversing children\r\n        if (callback(this)) return;\r\n        for (let i = 0, l = this.children.length; i < l; i++) {\r\n            this.children[i].traverse(callback);\r\n        }\r\n    }\r\n\r\n    decompose() {\r\n        this.matrix.getTranslation(this.position);\r\n        this.matrix.getRotation(this.quaternion);\r\n        this.matrix.getScaling(this.scale);\r\n        this.rotation.fromQuaternion(this.quaternion);\r\n    }\r\n\r\n    lookAt(target, invert = false) {\r\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\r\n        else this.matrix.lookAt(target, this.position, this.up);\r\n        this.matrix.getRotation(this.quaternion);\r\n        this.rotation.fromQuaternion(this.quaternion);\r\n    }\r\n}\r\n","import { Transform } from './Transform.js';\r\nimport { Mat4 } from '../math/Mat4.js';\r\nimport { Vec3 } from '../math/Vec3.js';\r\n\r\nconst tempMat4 = new Mat4();\r\nconst tempVec3a = new Vec3();\r\nconst tempVec3b = new Vec3();\r\n\r\nexport class Camera extends Transform {\r\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\r\n        super();\r\n\r\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\r\n\r\n        this.projectionMatrix = new Mat4();\r\n        this.viewMatrix = new Mat4();\r\n        this.projectionViewMatrix = new Mat4();\r\n        this.worldPosition = new Vec3();\r\n\r\n        // Use orthographic if left/right set, else default to perspective camera\r\n        this.type = left || right ? 'orthographic' : 'perspective';\r\n\r\n        if (this.type === 'orthographic') this.orthographic();\r\n        else this.perspective();\r\n    }\r\n\r\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\r\n        Object.assign(this, { near, far, fov, aspect });\r\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\r\n        this.type = 'perspective';\r\n        return this;\r\n    }\r\n\r\n    orthographic({\r\n        near = this.near,\r\n        far = this.far,\r\n        left = this.left,\r\n        right = this.right,\r\n        bottom = this.bottom,\r\n        top = this.top,\r\n        zoom = this.zoom,\r\n    } = {}) {\r\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\r\n        left /= zoom;\r\n        right /= zoom;\r\n        bottom /= zoom;\r\n        top /= zoom;\r\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\r\n        this.type = 'orthographic';\r\n        return this;\r\n    }\r\n\r\n    updateMatrixWorld() {\r\n        super.updateMatrixWorld();\r\n        this.viewMatrix.inverse(this.worldMatrix);\r\n        this.worldMatrix.getTranslation(this.worldPosition);\r\n\r\n        // used for sorting\r\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\r\n        return this;\r\n    }\r\n\r\n    lookAt(target) {\r\n        super.lookAt(target, true);\r\n        return this;\r\n    }\r\n\r\n    // Project 3D coordinate to 2D point\r\n    project(v) {\r\n        v.applyMatrix4(this.viewMatrix);\r\n        v.applyMatrix4(this.projectionMatrix);\r\n        return this;\r\n    }\r\n\r\n    // Unproject 2D point to 3D coordinate\r\n    unproject(v) {\r\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\r\n        v.applyMatrix4(this.worldMatrix);\r\n        return this;\r\n    }\r\n\r\n    updateFrustum() {\r\n        if (!this.frustum) {\r\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\r\n        }\r\n\r\n        const m = this.projectionViewMatrix;\r\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\r\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\r\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\r\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\r\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\r\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            const invLen = 1.0 / this.frustum[i].distance();\r\n            this.frustum[i].multiply(invLen);\r\n            this.frustum[i].constant *= invLen;\r\n        }\r\n    }\r\n\r\n    frustumIntersectsMesh(node) {\r\n        // If no position attribute, treat as frustumCulled false\r\n        if (!node.geometry.attributes.position) return true;\r\n\r\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\r\n\r\n        if (!node.geometry.bounds) return true;\r\n\r\n        const center = tempVec3a;\r\n        center.copy(node.geometry.bounds.center);\r\n        center.applyMatrix4(node.worldMatrix);\r\n\r\n        const radius = node.geometry.bounds.radius * node.worldMatrix.getMaxScaleOnAxis();\r\n\r\n        return this.frustumIntersectsSphere(center, radius);\r\n    }\r\n\r\n    frustumIntersectsSphere(center, radius) {\r\n        const normal = tempVec3b;\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            const plane = this.frustum[i];\r\n            const distance = normal.copy(plane).dot(center) + plane.constant;\r\n            if (distance < -radius) return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nexport function set(out, x, y) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function divide(out, a, b) {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n    var x = b[0] - a[0],\r\n        y = b[1] - a[1];\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n    var x = b[0] - a[0],\r\n        y = b[1] - a[1];\r\n    return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nexport function negate(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nexport function inverse(out, a) {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nexport function normalize(out, a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    var len = x * x + y * y;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product returns a scalar\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} cross product of a and b\r\n */\r\nexport function cross(a, b) {\r\n    return a[0] * b[1] - a[1] * b[0];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    var ax = a[0],\r\n        ay = a[1];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[2] * y;\r\n    out[1] = m[1] * x + m[3] * y;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2d(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[2] * y + m[4];\r\n    out[1] = m[1] * x + m[3] * y + m[5];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[3] * y + m[6];\r\n    out[1] = m[1] * x + m[4] * y + m[7];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    out[0] = m[0] * x + m[4] * y + m[12];\r\n    out[1] = m[1] * x + m[5] * y + m[13];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n    return a[0] === b[0] && a[1] === b[1];\r\n}\r\n","import * as Vec2Func from './functions/Vec2Func.js';\r\n\r\nexport class Vec2 extends Array {\r\n    constructor(x = 0, y = x) {\r\n        super(x, y);\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n    }\r\n\r\n    set(x, y = x) {\r\n        if (x.length) return this.copy(x);\r\n        Vec2Func.set(this, x, y);\r\n        return this;\r\n    }\r\n\r\n    copy(v) {\r\n        Vec2Func.copy(this, v);\r\n        return this;\r\n    }\r\n\r\n    add(va, vb) {\r\n        if (vb) Vec2Func.add(this, va, vb);\r\n        else Vec2Func.add(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    sub(va, vb) {\r\n        if (vb) Vec2Func.subtract(this, va, vb);\r\n        else Vec2Func.subtract(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    multiply(v) {\r\n        if (v.length) Vec2Func.multiply(this, this, v);\r\n        else Vec2Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    divide(v) {\r\n        if (v.length) Vec2Func.divide(this, this, v);\r\n        else Vec2Func.scale(this, this, 1 / v);\r\n        return this;\r\n    }\r\n\r\n    inverse(v = this) {\r\n        Vec2Func.inverse(this, v);\r\n        return this;\r\n    }\r\n\r\n    // Can't use 'length' as Array.prototype uses it\r\n    len() {\r\n        return Vec2Func.length(this);\r\n    }\r\n\r\n    distance(v) {\r\n        if (v) return Vec2Func.distance(this, v);\r\n        else return Vec2Func.length(this);\r\n    }\r\n\r\n    squaredLen() {\r\n        return this.squaredDistance();\r\n    }\r\n\r\n    squaredDistance(v) {\r\n        if (v) return Vec2Func.squaredDistance(this, v);\r\n        else return Vec2Func.squaredLength(this);\r\n    }\r\n\r\n    negate(v = this) {\r\n        Vec2Func.negate(this, v);\r\n        return this;\r\n    }\r\n\r\n    cross(va, vb) {\r\n        if (vb) return Vec2Func.cross(va, vb);\r\n        return Vec2Func.cross(this, va);\r\n    }\r\n\r\n    scale(v) {\r\n        Vec2Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    normalize() {\r\n        Vec2Func.normalize(this, this);\r\n        return this;\r\n    }\r\n\r\n    dot(v) {\r\n        return Vec2Func.dot(this, v);\r\n    }\r\n\r\n    equals(v) {\r\n        return Vec2Func.exactEquals(this, v);\r\n    }\r\n\r\n    applyMatrix3(mat3) {\r\n        Vec2Func.transformMat3(this, this, mat3);\r\n        return this;\r\n    }\r\n\r\n    applyMatrix4(mat4) {\r\n        Vec2Func.transformMat4(this, this, mat4);\r\n        return this;\r\n    }\r\n\r\n    lerp(v, a) {\r\n        Vec2Func.lerp(this, this, v, a);\r\n    }\r\n\r\n    clone() {\r\n        return new Vec2(this[0], this[1]);\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        return a;\r\n    }\r\n}\r\n","// Based from ThreeJS' OrbitControls class, rewritten using es6 with some additions and subtractions.\r\n// TODO: abstract event handlers so can be fed from other sources\r\n// TODO: make scroll zoom more accurate than just >/< zero\r\n// TODO: be able to pass in new camera position\r\n\r\nimport { Vec3 } from '../math/Vec3.js';\r\nimport { Vec2 } from '../math/Vec2.js';\r\n\r\nconst STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, DOLLY_PAN: 3 };\r\nconst tempVec3 = new Vec3();\r\nconst tempVec2a = new Vec2();\r\nconst tempVec2b = new Vec2();\r\n\r\nexport function Orbit(\r\n    object,\r\n    {\r\n        element = document,\r\n        enabled = true,\r\n        target = new Vec3(),\r\n        ease = 0.25,\r\n        inertia = 0.85,\r\n        enableRotate = true,\r\n        rotateSpeed = 0.1,\r\n        autoRotate = false,\r\n        autoRotateSpeed = 1.0,\r\n        enableZoom = true,\r\n        zoomSpeed = 1,\r\n        enablePan = true,\r\n        panSpeed = 0.1,\r\n        minPolarAngle = 0,\r\n        maxPolarAngle = Math.PI,\r\n        minAzimuthAngle = -Infinity,\r\n        maxAzimuthAngle = Infinity,\r\n        minDistance = 0,\r\n        maxDistance = Infinity,\r\n    } = {}\r\n) {\r\n    this.enabled = enabled;\r\n    this.target = target;\r\n\r\n    // Catch attempts to disable - set to 1 so has no effect\r\n    ease = ease || 1;\r\n    inertia = inertia || 0;\r\n\r\n    this.minDistance = minDistance;\r\n    this.maxDistance = maxDistance;\r\n\r\n    // current position in sphericalTarget coordinates\r\n    const sphericalDelta = { radius: 1, phi: 0, theta: 0 };\r\n    const sphericalTarget = { radius: 1, phi: 0, theta: 0 };\r\n    const spherical = { radius: 1, phi: 0, theta: 0 };\r\n    const panDelta = new Vec3();\r\n\r\n    // Grab initial position values\r\n    const offset = new Vec3();\r\n    offset.copy(object.position).sub(this.target);\r\n    spherical.radius = sphericalTarget.radius = offset.distance();\r\n    spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\r\n    spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\r\n\r\n    this.offset = offset;\r\n\r\n    this.update = () => {\r\n        if (autoRotate) {\r\n            handleAutoRotate();\r\n        }\r\n\r\n        // apply delta\r\n        sphericalTarget.radius *= sphericalDelta.radius;\r\n        sphericalTarget.theta += sphericalDelta.theta;\r\n        sphericalTarget.phi += sphericalDelta.phi;\r\n\r\n        // apply boundaries\r\n        sphericalTarget.theta = Math.max(minAzimuthAngle, Math.min(maxAzimuthAngle, sphericalTarget.theta));\r\n        sphericalTarget.phi = Math.max(minPolarAngle, Math.min(maxPolarAngle, sphericalTarget.phi));\r\n        sphericalTarget.radius = Math.max(this.minDistance, Math.min(this.maxDistance, sphericalTarget.radius));\r\n\r\n        // ease values\r\n        spherical.phi += (sphericalTarget.phi - spherical.phi) * ease;\r\n        spherical.theta += (sphericalTarget.theta - spherical.theta) * ease;\r\n        spherical.radius += (sphericalTarget.radius - spherical.radius) * ease;\r\n\r\n        // apply pan to target. As offset is relative to target, it also shifts\r\n        this.target.add(panDelta);\r\n\r\n        // apply rotation to offset\r\n        let sinPhiRadius = spherical.radius * Math.sin(Math.max(0.000001, spherical.phi));\r\n        offset.x = sinPhiRadius * Math.sin(spherical.theta);\r\n        offset.y = spherical.radius * Math.cos(spherical.phi);\r\n        offset.z = sinPhiRadius * Math.cos(spherical.theta);\r\n\r\n        // Apply updated values to object\r\n        object.position.copy(this.target).add(offset);\r\n        object.lookAt(this.target);\r\n\r\n        // Apply inertia to values\r\n        sphericalDelta.theta *= inertia;\r\n        sphericalDelta.phi *= inertia;\r\n        panDelta.multiply(inertia);\r\n\r\n        // Reset scale every frame to avoid applying scale multiple times\r\n        sphericalDelta.radius = 1;\r\n    };\r\n\r\n    // Updates internals with new position\r\n    this.forcePosition = () => {\r\n        offset.copy(object.position).sub(this.target);\r\n        spherical.radius = sphericalTarget.radius = offset.distance();\r\n        spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\r\n        spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\r\n        object.lookAt(this.target);\r\n    };\r\n\r\n    // Everything below here just updates panDelta and sphericalDelta\r\n    // Using those two objects' values, the orbit is calculated\r\n\r\n    const rotateStart = new Vec2();\r\n    const panStart = new Vec2();\r\n    const dollyStart = new Vec2();\r\n\r\n    let state = STATE.NONE;\r\n    this.mouseButtons = { ORBIT: 0, ZOOM: 1, PAN: 2 };\r\n\r\n    function getZoomScale() {\r\n        return Math.pow(0.95, zoomSpeed);\r\n    }\r\n\r\n    function panLeft(distance, m) {\r\n        tempVec3.set(m[0], m[1], m[2]);\r\n        tempVec3.multiply(-distance);\r\n        panDelta.add(tempVec3);\r\n    }\r\n\r\n    function panUp(distance, m) {\r\n        tempVec3.set(m[4], m[5], m[6]);\r\n        tempVec3.multiply(distance);\r\n        panDelta.add(tempVec3);\r\n    }\r\n\r\n    const pan = (deltaX, deltaY) => {\r\n        let el = element === document ? document.body : element;\r\n        tempVec3.copy(object.position).sub(this.target);\r\n        let targetDistance = tempVec3.distance();\r\n        targetDistance *= Math.tan((((object.fov || 45) / 2) * Math.PI) / 180.0);\r\n        panLeft((2 * deltaX * targetDistance) / el.clientHeight, object.matrix);\r\n        panUp((2 * deltaY * targetDistance) / el.clientHeight, object.matrix);\r\n    };\r\n\r\n    function dolly(dollyScale) {\r\n        sphericalDelta.radius /= dollyScale;\r\n    }\r\n\r\n    function handleAutoRotate() {\r\n        const angle = ((2 * Math.PI) / 60 / 60) * autoRotateSpeed;\r\n        sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function handleMoveRotate(x, y) {\r\n        tempVec2a.set(x, y);\r\n        tempVec2b.sub(tempVec2a, rotateStart).multiply(rotateSpeed);\r\n        let el = element === document ? document.body : element;\r\n        sphericalDelta.theta -= (2 * Math.PI * tempVec2b.x) / el.clientHeight;\r\n        sphericalDelta.phi -= (2 * Math.PI * tempVec2b.y) / el.clientHeight;\r\n        rotateStart.copy(tempVec2a);\r\n    }\r\n\r\n    function handleMouseMoveDolly(e) {\r\n        tempVec2a.set(e.clientX, e.clientY);\r\n        tempVec2b.sub(tempVec2a, dollyStart);\r\n        if (tempVec2b.y > 0) {\r\n            dolly(getZoomScale());\r\n        } else if (tempVec2b.y < 0) {\r\n            dolly(1 / getZoomScale());\r\n        }\r\n        dollyStart.copy(tempVec2a);\r\n    }\r\n\r\n    function handleMovePan(x, y) {\r\n        tempVec2a.set(x, y);\r\n        tempVec2b.sub(tempVec2a, panStart).multiply(panSpeed);\r\n        pan(tempVec2b.x, tempVec2b.y);\r\n        panStart.copy(tempVec2a);\r\n    }\r\n\r\n    function handleTouchStartDollyPan(e) {\r\n        if (enableZoom) {\r\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\r\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\r\n            let distance = Math.sqrt(dx * dx + dy * dy);\r\n            dollyStart.set(0, distance);\r\n        }\r\n\r\n        if (enablePan) {\r\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\r\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\r\n            panStart.set(x, y);\r\n        }\r\n    }\r\n\r\n    function handleTouchMoveDollyPan(e) {\r\n        if (enableZoom) {\r\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\r\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\r\n            let distance = Math.sqrt(dx * dx + dy * dy);\r\n            tempVec2a.set(0, distance);\r\n            tempVec2b.set(0, Math.pow(tempVec2a.y / dollyStart.y, zoomSpeed));\r\n            dolly(tempVec2b.y);\r\n            dollyStart.copy(tempVec2a);\r\n        }\r\n\r\n        if (enablePan) {\r\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\r\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\r\n            handleMovePan(x, y);\r\n        }\r\n    }\r\n\r\n    const onMouseDown = (e) => {\r\n        if (!this.enabled) return;\r\n\r\n        switch (e.button) {\r\n            case this.mouseButtons.ORBIT:\r\n                if (enableRotate === false) return;\r\n                rotateStart.set(e.clientX, e.clientY);\r\n                state = STATE.ROTATE;\r\n                break;\r\n            case this.mouseButtons.ZOOM:\r\n                if (enableZoom === false) return;\r\n                dollyStart.set(e.clientX, e.clientY);\r\n                state = STATE.DOLLY;\r\n                break;\r\n            case this.mouseButtons.PAN:\r\n                if (enablePan === false) return;\r\n                panStart.set(e.clientX, e.clientY);\r\n                state = STATE.PAN;\r\n                break;\r\n        }\r\n\r\n        if (state !== STATE.NONE) {\r\n            window.addEventListener('mousemove', onMouseMove, false);\r\n            window.addEventListener('mouseup', onMouseUp, false);\r\n        }\r\n    };\r\n\r\n    const onMouseMove = (e) => {\r\n        if (!this.enabled) return;\r\n\r\n        switch (state) {\r\n            case STATE.ROTATE:\r\n                if (enableRotate === false) return;\r\n                handleMoveRotate(e.clientX, e.clientY);\r\n                break;\r\n            case STATE.DOLLY:\r\n                if (enableZoom === false) return;\r\n                handleMouseMoveDolly(e);\r\n                break;\r\n            case STATE.PAN:\r\n                if (enablePan === false) return;\r\n                handleMovePan(e.clientX, e.clientY);\r\n                break;\r\n        }\r\n    };\r\n\r\n    const onMouseUp = () => {\r\n        window.removeEventListener('mousemove', onMouseMove, false);\r\n        window.removeEventListener('mouseup', onMouseUp, false);\r\n        state = STATE.NONE;\r\n    };\r\n\r\n    const onMouseWheel = (e) => {\r\n        if (!this.enabled || !enableZoom || (state !== STATE.NONE && state !== STATE.ROTATE)) return;\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (e.deltaY < 0) {\r\n            dolly(1 / getZoomScale());\r\n        } else if (e.deltaY > 0) {\r\n            dolly(getZoomScale());\r\n        }\r\n    };\r\n\r\n    const onTouchStart = (e) => {\r\n        if (!this.enabled) return;\r\n        e.preventDefault();\r\n\r\n        switch (e.touches.length) {\r\n            case 1:\r\n                if (enableRotate === false) return;\r\n                rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);\r\n                state = STATE.ROTATE;\r\n                break;\r\n            case 2:\r\n                if (enableZoom === false && enablePan === false) return;\r\n                handleTouchStartDollyPan(e);\r\n                state = STATE.DOLLY_PAN;\r\n                break;\r\n            default:\r\n                state = STATE.NONE;\r\n        }\r\n    };\r\n\r\n    const onTouchMove = (e) => {\r\n        if (!this.enabled) return;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        switch (e.touches.length) {\r\n            case 1:\r\n                if (enableRotate === false) return;\r\n                handleMoveRotate(e.touches[0].pageX, e.touches[0].pageY);\r\n                break;\r\n            case 2:\r\n                if (enableZoom === false && enablePan === false) return;\r\n                handleTouchMoveDollyPan(e);\r\n                break;\r\n            default:\r\n                state = STATE.NONE;\r\n        }\r\n    };\r\n\r\n    const onTouchEnd = () => {\r\n        if (!this.enabled) return;\r\n        state = STATE.NONE;\r\n    };\r\n\r\n    const onContextMenu = (e) => {\r\n        if (!this.enabled) return;\r\n        e.preventDefault();\r\n    };\r\n\r\n    function addHandlers() {\r\n        element.addEventListener('contextmenu', onContextMenu, false);\r\n        element.addEventListener('mousedown', onMouseDown, false);\r\n        element.addEventListener('wheel', onMouseWheel, { passive: false });\r\n        element.addEventListener('touchstart', onTouchStart, { passive: false });\r\n        element.addEventListener('touchend', onTouchEnd, false);\r\n        element.addEventListener('touchmove', onTouchMove, { passive: false });\r\n    }\r\n\r\n    this.remove = function () {\r\n        element.removeEventListener('contextmenu', onContextMenu);\r\n        element.removeEventListener('mousedown', onMouseDown);\r\n        element.removeEventListener('wheel', onMouseWheel);\r\n        element.removeEventListener('touchstart', onTouchStart);\r\n        element.removeEventListener('touchend', onTouchEnd);\r\n        element.removeEventListener('touchmove', onTouchMove);\r\n        window.removeEventListener('mousemove', onMouseMove);\r\n        window.removeEventListener('mouseup', onMouseUp);\r\n    };\r\n\r\n    addHandlers();\r\n}\r\n","// TODO: barycentric code shouldn't be here, but where?\r\n// TODO: SphereCast?\r\n\r\nimport { Vec2 } from '../math/Vec2.js';\r\nimport { Vec3 } from '../math/Vec3.js';\r\nimport { Mat4 } from '../math/Mat4.js';\r\n\r\nconst tempVec2a = new Vec2();\r\nconst tempVec2b = new Vec2();\r\nconst tempVec2c = new Vec2();\r\n\r\nconst tempVec3a = new Vec3();\r\nconst tempVec3b = new Vec3();\r\nconst tempVec3c = new Vec3();\r\nconst tempVec3d = new Vec3();\r\nconst tempVec3e = new Vec3();\r\nconst tempVec3f = new Vec3();\r\nconst tempVec3g = new Vec3();\r\nconst tempVec3h = new Vec3();\r\nconst tempVec3i = new Vec3();\r\nconst tempVec3j = new Vec3();\r\nconst tempVec3k = new Vec3();\r\n\r\nconst tempMat4 = new Mat4();\r\n\r\nexport class Raycast {\r\n    constructor() {\r\n        this.origin = new Vec3();\r\n        this.direction = new Vec3();\r\n    }\r\n\r\n    // Set ray from mouse unprojection\r\n    castMouse(camera, mouse = [0, 0]) {\r\n        if (camera.type === 'orthographic') {\r\n            // Set origin\r\n            // Since camera is orthographic, origin is not the camera position\r\n            const { left, right, bottom, top, zoom } = camera;\r\n            const x = left / zoom + ((right - left) / zoom) * (mouse[0] * 0.5 + 0.5);\r\n            const y = bottom / zoom + ((top - bottom) / zoom) * (mouse[1] * 0.5 + 0.5);\r\n            this.origin.set(x, y, 0);\r\n            this.origin.applyMatrix4(camera.worldMatrix);\r\n\r\n            // Set direction\r\n            // https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2\r\n            this.direction.x = -camera.worldMatrix[8];\r\n            this.direction.y = -camera.worldMatrix[9];\r\n            this.direction.z = -camera.worldMatrix[10];\r\n        } else {\r\n            // Set origin\r\n            camera.worldMatrix.getTranslation(this.origin);\r\n\r\n            // Set direction\r\n            this.direction.set(mouse[0], mouse[1], 0.5);\r\n            camera.unproject(this.direction);\r\n            this.direction.sub(this.origin).normalize();\r\n        }\r\n    }\r\n\r\n    intersectBounds(meshes, { maxDistance, output = [] } = {}) {\r\n        if (!Array.isArray(meshes)) meshes = [meshes];\r\n\r\n        const invWorldMat4 = tempMat4;\r\n        const origin = tempVec3a;\r\n        const direction = tempVec3b;\r\n\r\n        const hits = output;\r\n        hits.length = 0;\r\n\r\n        meshes.forEach((mesh) => {\r\n            // Create bounds\r\n            if (!mesh.geometry.bounds || mesh.geometry.bounds.radius === Infinity) mesh.geometry.computeBoundingSphere();\r\n            const bounds = mesh.geometry.bounds;\r\n            invWorldMat4.inverse(mesh.worldMatrix);\r\n\r\n            // Get max distance locally\r\n            let localMaxDistance;\r\n            if (maxDistance) {\r\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\r\n                localMaxDistance = maxDistance * direction.len();\r\n            }\r\n\r\n            // Take world space ray and make it object space to align with bounding box\r\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\r\n            direction.copy(this.direction).transformDirection(invWorldMat4);\r\n\r\n            // Break out early if bounds too far away from origin\r\n            if (maxDistance) {\r\n                if (origin.distance(bounds.center) - bounds.radius > localMaxDistance) return;\r\n            }\r\n\r\n            let localDistance = 0;\r\n\r\n            // Check origin isn't inside bounds before testing intersection\r\n            if (mesh.geometry.raycast === 'sphere') {\r\n                if (origin.distance(bounds.center) > bounds.radius) {\r\n                    localDistance = this.intersectSphere(bounds, origin, direction);\r\n                    if (!localDistance) return;\r\n                }\r\n            } else {\r\n                if (\r\n                    origin.x < bounds.min.x ||\r\n                    origin.x > bounds.max.x ||\r\n                    origin.y < bounds.min.y ||\r\n                    origin.y > bounds.max.y ||\r\n                    origin.z < bounds.min.z ||\r\n                    origin.z > bounds.max.z\r\n                ) {\r\n                    localDistance = this.intersectBox(bounds, origin, direction);\r\n                    if (!localDistance) return;\r\n                }\r\n            }\r\n\r\n            if (maxDistance && localDistance > localMaxDistance) return;\r\n\r\n            // Create object on mesh to avoid generating lots of objects\r\n            if (!mesh.hit) mesh.hit = { localPoint: new Vec3(), point: new Vec3() };\r\n\r\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\r\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\r\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\r\n\r\n            hits.push(mesh);\r\n        });\r\n\r\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\r\n        return hits;\r\n    }\r\n\r\n    intersectMeshes(meshes, { cullFace = true, maxDistance, includeUV = true, includeNormal = true, output = [] } = {}) {\r\n        // Test bounds first before testing geometry\r\n        const hits = this.intersectBounds(meshes, { maxDistance, output });\r\n        if (!hits.length) return hits;\r\n\r\n        const invWorldMat4 = tempMat4;\r\n        const origin = tempVec3a;\r\n        const direction = tempVec3b;\r\n        const a = tempVec3c;\r\n        const b = tempVec3d;\r\n        const c = tempVec3e;\r\n        const closestFaceNormal = tempVec3f;\r\n        const faceNormal = tempVec3g;\r\n        const barycoord = tempVec3h;\r\n        const uvA = tempVec2a;\r\n        const uvB = tempVec2b;\r\n        const uvC = tempVec2c;\r\n\r\n        for (let i = hits.length - 1; i >= 0; i--) {\r\n            const mesh = hits[i];\r\n            invWorldMat4.inverse(mesh.worldMatrix);\r\n\r\n            // Get max distance locally\r\n            let localMaxDistance;\r\n            if (maxDistance) {\r\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\r\n                localMaxDistance = maxDistance * direction.len();\r\n            }\r\n\r\n            // Take world space ray and make it object space to align with bounding box\r\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\r\n            direction.copy(this.direction).transformDirection(invWorldMat4);\r\n\r\n            let localDistance = 0;\r\n            let closestA, closestB, closestC;\r\n\r\n            const geometry = mesh.geometry;\r\n            const attributes = geometry.attributes;\r\n            const index = attributes.index;\r\n\r\n            const start = Math.max(0, geometry.drawRange.start);\r\n            const end = Math.min(index ? index.count : attributes.position.count, geometry.drawRange.start + geometry.drawRange.count);\r\n\r\n            for (let j = start; j < end; j += 3) {\r\n                // Position attribute indices for each triangle\r\n                const ai = index ? index.data[j] : j;\r\n                const bi = index ? index.data[j + 1] : j + 1;\r\n                const ci = index ? index.data[j + 2] : j + 2;\r\n\r\n                a.fromArray(attributes.position.data, ai * 3);\r\n                b.fromArray(attributes.position.data, bi * 3);\r\n                c.fromArray(attributes.position.data, ci * 3);\r\n\r\n                const distance = this.intersectTriangle(a, b, c, cullFace, origin, direction, faceNormal);\r\n                if (!distance) continue;\r\n\r\n                // Too far away\r\n                if (maxDistance && distance > localMaxDistance) continue;\r\n\r\n                if (!localDistance || distance < localDistance) {\r\n                    localDistance = distance;\r\n                    closestA = ai;\r\n                    closestB = bi;\r\n                    closestC = ci;\r\n                    closestFaceNormal.copy(faceNormal);\r\n                }\r\n            }\r\n\r\n            if (!localDistance) hits.splice(i, 1);\r\n\r\n            // Update hit values from bounds-test\r\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\r\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\r\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\r\n\r\n            // Add unique hit objects on mesh to avoid generating lots of objects\r\n            if (!mesh.hit.faceNormal) {\r\n                mesh.hit.localFaceNormal = new Vec3();\r\n                mesh.hit.faceNormal = new Vec3();\r\n                mesh.hit.uv = new Vec2();\r\n                mesh.hit.localNormal = new Vec3();\r\n                mesh.hit.normal = new Vec3();\r\n            }\r\n\r\n            // Add face normal data which is already computed\r\n            mesh.hit.localFaceNormal.copy(closestFaceNormal);\r\n            mesh.hit.faceNormal.copy(mesh.hit.localFaceNormal).transformDirection(mesh.worldMatrix);\r\n\r\n            // Optional data, opt out to optimise a bit if necessary\r\n            if (includeUV || includeNormal) {\r\n                // Calculate barycoords to find uv values at hit point\r\n                a.fromArray(attributes.position.data, closestA * 3);\r\n                b.fromArray(attributes.position.data, closestB * 3);\r\n                c.fromArray(attributes.position.data, closestC * 3);\r\n                this.getBarycoord(mesh.hit.localPoint, a, b, c, barycoord);\r\n            }\r\n\r\n            if (includeUV && attributes.uv) {\r\n                uvA.fromArray(attributes.uv.data, closestA * 2);\r\n                uvB.fromArray(attributes.uv.data, closestB * 2);\r\n                uvC.fromArray(attributes.uv.data, closestC * 2);\r\n                mesh.hit.uv.set(\r\n                    uvA.x * barycoord.x + uvB.x * barycoord.y + uvC.x * barycoord.z,\r\n                    uvA.y * barycoord.x + uvB.y * barycoord.y + uvC.y * barycoord.z\r\n                );\r\n            }\r\n\r\n            if (includeNormal && attributes.normal) {\r\n                a.fromArray(attributes.normal.data, closestA * 3);\r\n                b.fromArray(attributes.normal.data, closestB * 3);\r\n                c.fromArray(attributes.normal.data, closestC * 3);\r\n                mesh.hit.localNormal.set(\r\n                    a.x * barycoord.x + b.x * barycoord.y + c.x * barycoord.z,\r\n                    a.y * barycoord.x + b.y * barycoord.y + c.y * barycoord.z,\r\n                    a.z * barycoord.x + b.z * barycoord.y + c.z * barycoord.z\r\n                );\r\n\r\n                mesh.hit.normal.copy(mesh.hit.localNormal).transformDirection(mesh.worldMatrix);\r\n            }\r\n        }\r\n\r\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\r\n        return hits;\r\n    }\r\n\r\n    intersectSphere(sphere, origin = this.origin, direction = this.direction) {\r\n        const ray = tempVec3c;\r\n        ray.sub(sphere.center, origin);\r\n        const tca = ray.dot(direction);\r\n        const d2 = ray.dot(ray) - tca * tca;\r\n        const radius2 = sphere.radius * sphere.radius;\r\n        if (d2 > radius2) return 0;\r\n        const thc = Math.sqrt(radius2 - d2);\r\n        const t0 = tca - thc;\r\n        const t1 = tca + thc;\r\n        if (t0 < 0 && t1 < 0) return 0;\r\n        if (t0 < 0) return t1;\r\n        return t0;\r\n    }\r\n\r\n    // Ray AABB - Ray Axis aligned bounding box testing\r\n    intersectBox(box, origin = this.origin, direction = this.direction) {\r\n        let tmin, tmax, tYmin, tYmax, tZmin, tZmax;\r\n        const invdirx = 1 / direction.x;\r\n        const invdiry = 1 / direction.y;\r\n        const invdirz = 1 / direction.z;\r\n        const min = box.min;\r\n        const max = box.max;\r\n        tmin = ((invdirx >= 0 ? min.x : max.x) - origin.x) * invdirx;\r\n        tmax = ((invdirx >= 0 ? max.x : min.x) - origin.x) * invdirx;\r\n        tYmin = ((invdiry >= 0 ? min.y : max.y) - origin.y) * invdiry;\r\n        tYmax = ((invdiry >= 0 ? max.y : min.y) - origin.y) * invdiry;\r\n        if (tmin > tYmax || tYmin > tmax) return 0;\r\n        if (tYmin > tmin) tmin = tYmin;\r\n        if (tYmax < tmax) tmax = tYmax;\r\n        tZmin = ((invdirz >= 0 ? min.z : max.z) - origin.z) * invdirz;\r\n        tZmax = ((invdirz >= 0 ? max.z : min.z) - origin.z) * invdirz;\r\n        if (tmin > tZmax || tZmin > tmax) return 0;\r\n        if (tZmin > tmin) tmin = tZmin;\r\n        if (tZmax < tmax) tmax = tZmax;\r\n        if (tmax < 0) return 0;\r\n        return tmin >= 0 ? tmin : tmax;\r\n    }\r\n\r\n    intersectTriangle(a, b, c, backfaceCulling = true, origin = this.origin, direction = this.direction, normal = tempVec3g) {\r\n        // from https://github.com/mrdoob/three.js/blob/master/src/math/Ray.js\r\n        // which is from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n        const edge1 = tempVec3h;\r\n        const edge2 = tempVec3i;\r\n        const diff = tempVec3j;\r\n        edge1.sub(b, a);\r\n        edge2.sub(c, a);\r\n        normal.cross(edge1, edge2);\r\n        let DdN = direction.dot(normal);\r\n        if (!DdN) return 0;\r\n        let sign;\r\n        if (DdN > 0) {\r\n            if (backfaceCulling) return 0;\r\n            sign = 1;\r\n        } else {\r\n            sign = -1;\r\n            DdN = -DdN;\r\n        }\r\n        diff.sub(origin, a);\r\n        let DdQxE2 = sign * direction.dot(edge2.cross(diff, edge2));\r\n        if (DdQxE2 < 0) return 0;\r\n        let DdE1xQ = sign * direction.dot(edge1.cross(diff));\r\n        if (DdE1xQ < 0) return 0;\r\n        if (DdQxE2 + DdE1xQ > DdN) return 0;\r\n        let QdN = -sign * diff.dot(normal);\r\n        if (QdN < 0) return 0;\r\n        return QdN / DdN;\r\n    }\r\n\r\n    getBarycoord(point, a, b, c, target = tempVec3h) {\r\n        // From https://github.com/mrdoob/three.js/blob/master/src/math/Triangle.js\r\n        // static/instance method to calculate barycentric coordinates\r\n        // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n        const v0 = tempVec3i;\r\n        const v1 = tempVec3j;\r\n        const v2 = tempVec3k;\r\n        v0.sub(c, a);\r\n        v1.sub(b, a);\r\n        v2.sub(point, a);\r\n        const dot00 = v0.dot(v0);\r\n        const dot01 = v0.dot(v1);\r\n        const dot02 = v0.dot(v2);\r\n        const dot11 = v1.dot(v1);\r\n        const dot12 = v1.dot(v2);\r\n        const denom = dot00 * dot11 - dot01 * dot01;\r\n        if (denom === 0) return target.set(-2, -1, -1);\r\n        const invDenom = 1 / denom;\r\n        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\r\n        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\r\n        return target.set(1 - u - v, v, u);\r\n    }\r\n}\r\n","// TODO: delete texture\r\n// TODO: use texSubImage2D for updates (video or when loaded)\r\n// TODO: need? encoding = linearEncoding\r\n// TODO: support non-compressed mipmaps uploads\r\n\r\nconst emptyPixel = new Uint8Array(4);\r\n\r\nfunction isPowerOf2(value) {\r\n    return (value & (value - 1)) === 0;\r\n}\r\n\r\nlet ID = 1;\r\n\r\nexport class Texture {\r\n    constructor(\r\n        gl,\r\n        {\r\n            image,\r\n            target = gl.TEXTURE_2D,\r\n            type = gl.UNSIGNED_BYTE,\r\n            format = gl.RGBA,\r\n            internalFormat = format,\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            generateMipmaps = true,\r\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\r\n            magFilter = gl.LINEAR,\r\n            premultiplyAlpha = false,\r\n            unpackAlignment = 4,\r\n            flipY = target == gl.TEXTURE_2D ? true : false,\r\n            anisotropy = 0,\r\n            level = 0,\r\n            width, // used for RenderTargets or Data Textures\r\n            height = width,\r\n        } = {}\r\n    ) {\r\n        this.gl = gl;\r\n        this.id = ID++;\r\n\r\n        this.image = image;\r\n        this.target = target;\r\n        this.type = type;\r\n        this.format = format;\r\n        this.internalFormat = internalFormat;\r\n        this.minFilter = minFilter;\r\n        this.magFilter = magFilter;\r\n        this.wrapS = wrapS;\r\n        this.wrapT = wrapT;\r\n        this.generateMipmaps = generateMipmaps;\r\n        this.premultiplyAlpha = premultiplyAlpha;\r\n        this.unpackAlignment = unpackAlignment;\r\n        this.flipY = flipY;\r\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\r\n        this.level = level;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.texture = this.gl.createTexture();\r\n\r\n        this.store = {\r\n            image: null,\r\n        };\r\n\r\n        // Alias for state store to avoid redundant calls for global state\r\n        this.glState = this.gl.renderer.state;\r\n\r\n        // State store to avoid redundant calls for per-texture state\r\n        this.state = {};\r\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\r\n        this.state.magFilter = this.gl.LINEAR;\r\n        this.state.wrapS = this.gl.REPEAT;\r\n        this.state.wrapT = this.gl.REPEAT;\r\n        this.state.anisotropy = 0;\r\n    }\r\n\r\n    bind() {\r\n        // Already bound to active texture unit\r\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\r\n        this.gl.bindTexture(this.target, this.texture);\r\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\r\n    }\r\n\r\n    update(textureUnit = 0) {\r\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\r\n\r\n        // Make sure that texture is bound to its texture unit\r\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\r\n            // set active texture unit to perform texture functions\r\n            this.gl.renderer.activeTexture(textureUnit);\r\n            this.bind();\r\n        }\r\n\r\n        if (!needsUpdate) return;\r\n        this.needsUpdate = false;\r\n\r\n        if (this.flipY !== this.glState.flipY) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\r\n            this.glState.flipY = this.flipY;\r\n        }\r\n\r\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\r\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\r\n        }\r\n\r\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\r\n            this.glState.unpackAlignment = this.unpackAlignment;\r\n        }\r\n\r\n        if (this.minFilter !== this.state.minFilter) {\r\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\r\n            this.state.minFilter = this.minFilter;\r\n        }\r\n\r\n        if (this.magFilter !== this.state.magFilter) {\r\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\r\n            this.state.magFilter = this.magFilter;\r\n        }\r\n\r\n        if (this.wrapS !== this.state.wrapS) {\r\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\r\n            this.state.wrapS = this.wrapS;\r\n        }\r\n\r\n        if (this.wrapT !== this.state.wrapT) {\r\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\r\n            this.state.wrapT = this.wrapT;\r\n        }\r\n\r\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\r\n            this.gl.texParameterf(\r\n                this.target,\r\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\r\n                this.anisotropy\r\n            );\r\n            this.state.anisotropy = this.anisotropy;\r\n        }\r\n\r\n        if (this.image) {\r\n            if (this.image.width) {\r\n                this.width = this.image.width;\r\n                this.height = this.image.height;\r\n            }\r\n\r\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\r\n                // For cube maps\r\n                for (let i = 0; i < 6; i++) {\r\n                    this.gl.texImage2D(\r\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                        this.level,\r\n                        this.internalFormat,\r\n                        this.format,\r\n                        this.type,\r\n                        this.image[i]\r\n                    );\r\n                }\r\n            } else if (ArrayBuffer.isView(this.image)) {\r\n                // Data texture\r\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\r\n            } else if (this.image.isCompressedTexture) {\r\n                // Compressed texture\r\n                for (let level = 0; level < this.image.length; level++) {\r\n                    this.gl.compressedTexImage2D(\r\n                        this.target,\r\n                        level,\r\n                        this.internalFormat,\r\n                        this.image[level].width,\r\n                        this.image[level].height,\r\n                        0,\r\n                        this.image[level].data\r\n                    );\r\n                }\r\n            } else {\r\n                // Regular texture\r\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\r\n            }\r\n\r\n            if (this.generateMipmaps) {\r\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\r\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\r\n                    this.generateMipmaps = false;\r\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\r\n                    this.minFilter = this.gl.LINEAR;\r\n                } else {\r\n                    this.gl.generateMipmap(this.target);\r\n                }\r\n            }\r\n\r\n            // Callback for when data is pushed to GPU\r\n            this.onUpdate && this.onUpdate();\r\n        } else {\r\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\r\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\r\n                for (let i = 0; i < 6; i++) {\r\n                    this.gl.texImage2D(\r\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                        0,\r\n                        this.gl.RGBA,\r\n                        1,\r\n                        1,\r\n                        0,\r\n                        this.gl.RGBA,\r\n                        this.gl.UNSIGNED_BYTE,\r\n                        emptyPixel\r\n                    );\r\n                }\r\n            } else if (this.width) {\r\n                // image intentionally left null for RenderTarget\r\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\r\n            } else {\r\n                // Upload empty pixel if no image to avoid errors while image or video loading\r\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\r\n            }\r\n        }\r\n        this.store.image = this.image;\r\n    }\r\n}\r\n","const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[4];\r\n    out[4] = a[5];\r\n    out[5] = a[6];\r\n    out[6] = a[8];\r\n    out[7] = a[9];\r\n    out[8] = a[10];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\nexport function fromQuat(out, q) {\r\n    let x = q[0],\r\n        y = q[1],\r\n        z = q[2],\r\n        w = q[3];\r\n    let x2 = x + x;\r\n    let y2 = y + y;\r\n    let z2 = z + z;\r\n\r\n    let xx = x * x2;\r\n    let yx = y * x2;\r\n    let yy = y * y2;\r\n    let zx = z * x2;\r\n    let zy = z * y2;\r\n    let zz = z * z2;\r\n    let wx = w * x2;\r\n    let wy = w * y2;\r\n    let wz = w * z2;\r\n\r\n    out[0] = 1 - yy - zz;\r\n    out[3] = yx - wz;\r\n    out[6] = zx + wy;\r\n\r\n    out[1] = yx + wz;\r\n    out[4] = 1 - xx - zz;\r\n    out[7] = zy - wx;\r\n\r\n    out[2] = zx - wy;\r\n    out[5] = zy + wx;\r\n    out[8] = 1 - xx - yy;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n    out[0] = m00;\r\n    out[1] = m01;\r\n    out[2] = m02;\r\n    out[3] = m10;\r\n    out[4] = m11;\r\n    out[5] = m12;\r\n    out[6] = m20;\r\n    out[7] = m21;\r\n    out[8] = m22;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 1;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n    if (out === a) {\r\n        let a01 = a[1],\r\n            a02 = a[2],\r\n            a12 = a[5];\r\n        out[1] = a[3];\r\n        out[2] = a[6];\r\n        out[3] = a01;\r\n        out[5] = a[7];\r\n        out[6] = a02;\r\n        out[7] = a12;\r\n    } else {\r\n        out[0] = a[0];\r\n        out[1] = a[3];\r\n        out[2] = a[6];\r\n        out[3] = a[1];\r\n        out[4] = a[4];\r\n        out[5] = a[7];\r\n        out[6] = a[2];\r\n        out[7] = a[5];\r\n        out[8] = a[8];\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2];\r\n    let a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5];\r\n    let a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n\r\n    let b01 = a22 * a11 - a12 * a21;\r\n    let b11 = -a22 * a10 + a12 * a20;\r\n    let b21 = a21 * a10 - a11 * a20;\r\n\r\n    // Calculate the determinant\r\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n    if (!det) {\r\n        return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = b01 * det;\r\n    out[1] = (-a22 * a01 + a02 * a21) * det;\r\n    out[2] = (a12 * a01 - a02 * a11) * det;\r\n    out[3] = b11 * det;\r\n    out[4] = (a22 * a00 - a02 * a20) * det;\r\n    out[5] = (-a12 * a00 + a02 * a10) * det;\r\n    out[6] = b21 * det;\r\n    out[7] = (-a21 * a00 + a01 * a20) * det;\r\n    out[8] = (a11 * a00 - a01 * a10) * det;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2];\r\n    let a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5];\r\n    let a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n\r\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2];\r\n    let a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5];\r\n    let a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n\r\n    let b00 = b[0],\r\n        b01 = b[1],\r\n        b02 = b[2];\r\n    let b10 = b[3],\r\n        b11 = b[4],\r\n        b12 = b[5];\r\n    let b20 = b[6],\r\n        b21 = b[7],\r\n        b22 = b[8];\r\n\r\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5],\r\n        a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8],\r\n        x = v[0],\r\n        y = v[1];\r\n\r\n    out[0] = a00;\r\n    out[1] = a01;\r\n    out[2] = a02;\r\n\r\n    out[3] = a10;\r\n    out[4] = a11;\r\n    out[5] = a12;\r\n\r\n    out[6] = x * a00 + y * a10 + a20;\r\n    out[7] = x * a01 + y * a11 + a21;\r\n    out[8] = x * a02 + y * a12 + a22;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5],\r\n        a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8],\r\n        s = Math.sin(rad),\r\n        c = Math.cos(rad);\r\n\r\n    out[0] = c * a00 + s * a10;\r\n    out[1] = c * a01 + s * a11;\r\n    out[2] = c * a02 + s * a12;\r\n\r\n    out[3] = c * a10 - s * a00;\r\n    out[4] = c * a11 - s * a01;\r\n    out[5] = c * a12 - s * a02;\r\n\r\n    out[6] = a20;\r\n    out[7] = a21;\r\n    out[8] = a22;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n    let x = v[0],\r\n        y = v[1];\r\n\r\n    out[0] = x * a[0];\r\n    out[1] = x * a[1];\r\n    out[2] = x * a[2];\r\n\r\n    out[3] = y * a[3];\r\n    out[4] = y * a[4];\r\n    out[5] = y * a[5];\r\n\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {mat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\nexport function normalFromMat4(out, a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    let a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7];\r\n    let a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11];\r\n    let a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n\r\n    let b00 = a00 * a11 - a01 * a10;\r\n    let b01 = a00 * a12 - a02 * a10;\r\n    let b02 = a00 * a13 - a03 * a10;\r\n    let b03 = a01 * a12 - a02 * a11;\r\n    let b04 = a01 * a13 - a03 * a11;\r\n    let b05 = a02 * a13 - a03 * a12;\r\n    let b06 = a20 * a31 - a21 * a30;\r\n    let b07 = a20 * a32 - a22 * a30;\r\n    let b08 = a20 * a33 - a23 * a30;\r\n    let b09 = a21 * a32 - a22 * a31;\r\n    let b10 = a21 * a33 - a23 * a31;\r\n    let b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    if (!det) {\r\n        return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n    out[0] = 2 / width;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = -2 / height;\r\n    out[5] = 0;\r\n    out[6] = -1;\r\n    out[7] = 1;\r\n    out[8] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    out[4] = a[4] + b[4];\r\n    out[5] = a[5] + b[5];\r\n    out[6] = a[6] + b[6];\r\n    out[7] = a[7] + b[7];\r\n    out[8] = a[8] + b[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    out[4] = a[4] - b[4];\r\n    out[5] = a[5] - b[5];\r\n    out[6] = a[6] - b[6];\r\n    out[7] = a[7] - b[7];\r\n    out[8] = a[8] - b[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    out[4] = a[4] * b;\r\n    out[5] = a[5] * b;\r\n    out[6] = a[6] * b;\r\n    out[7] = a[7] * b;\r\n    out[8] = a[8] * b;\r\n    return out;\r\n}\r\n","import * as Mat3Func from './functions/Mat3Func.js';\r\n\r\nexport class Mat3 extends Array {\r\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\r\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\r\n        return this;\r\n    }\r\n\r\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n        if (m00.length) return this.copy(m00);\r\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\r\n        return this;\r\n    }\r\n\r\n    translate(v, m = this) {\r\n        Mat3Func.translate(this, m, v);\r\n        return this;\r\n    }\r\n\r\n    rotate(v, m = this) {\r\n        Mat3Func.rotate(this, m, v);\r\n        return this;\r\n    }\r\n\r\n    scale(v, m = this) {\r\n        Mat3Func.scale(this, m, v);\r\n        return this;\r\n    }\r\n\r\n    multiply(ma, mb) {\r\n        if (mb) {\r\n            Mat3Func.multiply(this, ma, mb);\r\n        } else {\r\n            Mat3Func.multiply(this, this, ma);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    identity() {\r\n        Mat3Func.identity(this);\r\n        return this;\r\n    }\r\n\r\n    copy(m) {\r\n        Mat3Func.copy(this, m);\r\n        return this;\r\n    }\r\n\r\n    fromMatrix4(m) {\r\n        Mat3Func.fromMat4(this, m);\r\n        return this;\r\n    }\r\n\r\n    fromQuaternion(q) {\r\n        Mat3Func.fromQuat(this, q);\r\n        return this;\r\n    }\r\n\r\n    fromBasis(vec3a, vec3b, vec3c) {\r\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\r\n        return this;\r\n    }\r\n\r\n    inverse(m = this) {\r\n        Mat3Func.invert(this, m);\r\n        return this;\r\n    }\r\n\r\n    getNormalMatrix(m) {\r\n        Mat3Func.normalFromMat4(this, m);\r\n        return this;\r\n    }\r\n}\r\n","import { Transform } from './Transform.js';\r\nimport { Mat3 } from '../math/Mat3.js';\r\nimport { Mat4 } from '../math/Mat4.js';\r\n\r\nlet ID = 0;\r\n\r\nexport class Mesh extends Transform {\r\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\r\n        super();\r\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\r\n        this.gl = gl;\r\n        this.id = ID++;\r\n        this.geometry = geometry;\r\n        this.program = program;\r\n        this.mode = mode;\r\n\r\n        // Used to skip frustum culling\r\n        this.frustumCulled = frustumCulled;\r\n\r\n        // Override sorting to force an order\r\n        this.renderOrder = renderOrder;\r\n        this.modelViewMatrix = new Mat4();\r\n        this.normalMatrix = new Mat3();\r\n        this.beforeRenderCallbacks = [];\r\n        this.afterRenderCallbacks = [];\r\n    }\r\n\r\n    onBeforeRender(f) {\r\n        this.beforeRenderCallbacks.push(f);\r\n        return this;\r\n    }\r\n\r\n    onAfterRender(f) {\r\n        this.afterRenderCallbacks.push(f);\r\n        return this;\r\n    }\r\n\r\n    draw({ camera } = {}) {\r\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\r\n        if (camera) {\r\n            // Add empty matrix uniforms to program if unset\r\n            if (!this.program.uniforms.modelMatrix) {\r\n                Object.assign(this.program.uniforms, {\r\n                    modelMatrix: { value: null },\r\n                    viewMatrix: { value: null },\r\n                    modelViewMatrix: { value: null },\r\n                    normalMatrix: { value: null },\r\n                    projectionMatrix: { value: null },\r\n                    cameraPosition: { value: null },\r\n                });\r\n            }\r\n\r\n            // Set the matrix uniforms\r\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\r\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\r\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\r\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\r\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\r\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\r\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\r\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\r\n        }\r\n\r\n        // determine if faces need to be flipped - when mesh scaled negatively\r\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\r\n        this.program.use({ flipFaces });\r\n        this.geometry.draw({ mode: this.mode, program: this.program });\r\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\r\n    }\r\n}\r\n","// attribute params\r\n// {\r\n//     data - typed array eg UInt16Array for indices, Float32Array\r\n//     size - int default 1\r\n//     instanced - default null. Pass divisor amount\r\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\r\n//     normalized - boolean default false\r\n\r\n//     buffer - gl buffer, if buffer exists, don't need to provide data\r\n//     stride - default 0 - for when passing in buffer\r\n//     offset - default 0 - for when passing in buffer\r\n//     count - default null - for when passing in buffer\r\n//     min - array - for when passing in buffer\r\n//     max - array - for when passing in buffer\r\n// }\r\n\r\n// TODO: fit in transform feedback\r\n// TODO: when would I disableVertexAttribArray ?\r\n// TODO: use offset/stride if exists\r\n\r\nimport { Vec3 } from '../math/Vec3.js';\r\n\r\nconst tempVec3 = new Vec3();\r\n\r\nlet ID = 1;\r\nlet ATTR_ID = 1;\r\n\r\n// To stop inifinite warnings\r\nlet isBoundsWarned = false;\r\n\r\nexport class Geometry {\r\n    constructor(gl, attributes = {}) {\r\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\r\n        this.gl = gl;\r\n        this.attributes = attributes;\r\n        this.id = ID++;\r\n\r\n        // Store one VAO per program attribute locations order\r\n        this.VAOs = {};\r\n\r\n        this.drawRange = { start: 0, count: 0 };\r\n        this.instancedCount = 0;\r\n\r\n        // Unbind current VAO so that new buffers don't get added to active mesh\r\n        this.gl.renderer.bindVertexArray(null);\r\n        this.gl.renderer.currentGeometry = null;\r\n\r\n        // Alias for state store to avoid redundant calls for global state\r\n        this.glState = this.gl.renderer.state;\r\n\r\n        // create the buffers\r\n        for (let key in attributes) {\r\n            this.addAttribute(key, attributes[key]);\r\n        }\r\n    }\r\n\r\n    addAttribute(key, attr) {\r\n        this.attributes[key] = attr;\r\n\r\n        // Set options\r\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\r\n        attr.size = attr.size || 1;\r\n        attr.type =\r\n            attr.type ||\r\n            (attr.data.constructor === Float32Array\r\n                ? this.gl.FLOAT\r\n                : attr.data.constructor === Uint16Array\r\n                ? this.gl.UNSIGNED_SHORT\r\n                : this.gl.UNSIGNED_INT); // Uint32Array\r\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\r\n        attr.normalized = attr.normalized || false;\r\n        attr.stride = attr.stride || 0;\r\n        attr.offset = attr.offset || 0;\r\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\r\n        attr.divisor = attr.instanced || 0;\r\n        attr.needsUpdate = false;\r\n\r\n        if (!attr.buffer) {\r\n            attr.buffer = this.gl.createBuffer();\r\n\r\n            // Push data to buffer\r\n            this.updateAttribute(attr);\r\n        }\r\n\r\n        // Update geometry counts. If indexed, ignore regular attributes\r\n        if (attr.divisor) {\r\n            this.isInstanced = true;\r\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\r\n                console.warn('geometry has multiple instanced buffers of different length');\r\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\r\n            }\r\n            this.instancedCount = attr.count * attr.divisor;\r\n        } else if (key === 'index') {\r\n            this.drawRange.count = attr.count;\r\n        } else if (!this.attributes.index) {\r\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\r\n        }\r\n    }\r\n\r\n    updateAttribute(attr) {\r\n        if (this.glState.boundBuffer !== attr.buffer) {\r\n            this.gl.bindBuffer(attr.target, attr.buffer);\r\n            this.glState.boundBuffer = attr.buffer;\r\n        }\r\n        this.gl.bufferData(attr.target, attr.data, this.gl.STATIC_DRAW);\r\n        attr.needsUpdate = false;\r\n    }\r\n\r\n    setIndex(value) {\r\n        this.addAttribute('index', value);\r\n    }\r\n\r\n    setDrawRange(start, count) {\r\n        this.drawRange.start = start;\r\n        this.drawRange.count = count;\r\n    }\r\n\r\n    setInstancedCount(value) {\r\n        this.instancedCount = value;\r\n    }\r\n\r\n    createVAO(program) {\r\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\r\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\r\n        this.bindAttributes(program);\r\n    }\r\n\r\n    bindAttributes(program) {\r\n        // Link all attributes to program using gl.vertexAttribPointer\r\n        program.attributeLocations.forEach((location, { name, type }) => {\r\n            // If geometry missing a required shader attribute\r\n            if (!this.attributes[name]) {\r\n                console.warn(`active attribute ${name} not being supplied`);\r\n                return;\r\n            }\r\n\r\n            const attr = this.attributes[name];\r\n\r\n            this.gl.bindBuffer(attr.target, attr.buffer);\r\n            this.glState.boundBuffer = attr.buffer;\r\n\r\n            // For matrix attributes, buffer needs to be defined per column\r\n            let numLoc = 1;\r\n            if (type === 35674) numLoc = 2; // mat2\r\n            if (type === 35675) numLoc = 3; // mat3\r\n            if (type === 35676) numLoc = 4; // mat4\r\n\r\n            const size = attr.size / numLoc;\r\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\r\n            const offset = numLoc === 1 ? 0 : numLoc * numLoc;\r\n\r\n            for (let i = 0; i < numLoc; i++) {\r\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\r\n                this.gl.enableVertexAttribArray(location + i);\r\n\r\n                // For instanced attributes, divisor needs to be set.\r\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\r\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\r\n            }\r\n        });\r\n\r\n        // Bind indices if geometry indexed\r\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\r\n    }\r\n\r\n    draw({ program, mode = this.gl.TRIANGLES }) {\r\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\r\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\r\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\r\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\r\n        }\r\n\r\n        // Check if any attributes need updating\r\n        program.attributeLocations.forEach((location, { name }) => {\r\n            const attr = this.attributes[name];\r\n            if (attr.needsUpdate) this.updateAttribute(attr);\r\n        });\r\n\r\n        if (this.isInstanced) {\r\n            if (this.attributes.index) {\r\n                this.gl.renderer.drawElementsInstanced(\r\n                    mode,\r\n                    this.drawRange.count,\r\n                    this.attributes.index.type,\r\n                    this.attributes.index.offset + this.drawRange.start * 2,\r\n                    this.instancedCount\r\n                );\r\n            } else {\r\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\r\n            }\r\n        } else {\r\n            if (this.attributes.index) {\r\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\r\n            } else {\r\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\r\n            }\r\n        }\r\n    }\r\n\r\n    getPositionArray() {\r\n        // Use position buffer, or min/max if available\r\n        const attr = this.attributes.position;\r\n        // if (attr.min) return [...attr.min, ...attr.max];\r\n        if (attr.data) return attr.data;\r\n        if (isBoundsWarned) return;\r\n        console.warn('No position buffer data found to compute bounds');\r\n        return (isBoundsWarned = true);\r\n    }\r\n\r\n    computeBoundingBox(array) {\r\n        if (!array) array = this.getPositionArray();\r\n\r\n        if (!this.bounds) {\r\n            this.bounds = {\r\n                min: new Vec3(),\r\n                max: new Vec3(),\r\n                center: new Vec3(),\r\n                scale: new Vec3(),\r\n                radius: Infinity,\r\n            };\r\n        }\r\n\r\n        const min = this.bounds.min;\r\n        const max = this.bounds.max;\r\n        const center = this.bounds.center;\r\n        const scale = this.bounds.scale;\r\n\r\n        min.set(+Infinity);\r\n        max.set(-Infinity);\r\n\r\n        // TODO: use offset/stride if exists\r\n        // TODO: check size of position (eg triangle with Vec2)\r\n        for (let i = 0, l = array.length; i < l; i += 3) {\r\n            const x = array[i];\r\n            const y = array[i + 1];\r\n            const z = array[i + 2];\r\n\r\n            min.x = Math.min(x, min.x);\r\n            min.y = Math.min(y, min.y);\r\n            min.z = Math.min(z, min.z);\r\n\r\n            max.x = Math.max(x, max.x);\r\n            max.y = Math.max(y, max.y);\r\n            max.z = Math.max(z, max.z);\r\n        }\r\n\r\n        scale.sub(max, min);\r\n        center.add(min, max).divide(2);\r\n    }\r\n\r\n    computeBoundingSphere(array) {\r\n        if (!array) array = this.getPositionArray();\r\n        if (!this.bounds) this.computeBoundingBox(array);\r\n\r\n        let maxRadiusSq = 0;\r\n        for (let i = 0, l = array.length; i < l; i += 3) {\r\n            tempVec3.fromArray(array, i);\r\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\r\n        }\r\n\r\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\r\n    }\r\n\r\n    remove() {\r\n        if (this.vao) this.gl.renderer.deleteVertexArray(this.vao);\r\n        for (let key in this.attributes) {\r\n            this.gl.deleteBuffer(this.attributes[key].buffer);\r\n            delete this.attributes[key];\r\n        }\r\n    }\r\n}\r\n","import { Geometry } from '../core/Geometry.js';\r\n\r\nexport class Plane extends Geometry {\r\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\r\n        const wSegs = widthSegments;\r\n        const hSegs = heightSegments;\r\n\r\n        // Determine length of arrays\r\n        const num = (wSegs + 1) * (hSegs + 1);\r\n        const numIndices = wSegs * hSegs * 6;\r\n\r\n        // Generate empty arrays once\r\n        const position = new Float32Array(num * 3);\r\n        const normal = new Float32Array(num * 3);\r\n        const uv = new Float32Array(num * 2);\r\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\r\n\r\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\r\n\r\n        Object.assign(attributes, {\r\n            position: { size: 3, data: position },\r\n            normal: { size: 3, data: normal },\r\n            uv: { size: 2, data: uv },\r\n            index: { data: index },\r\n        });\r\n\r\n        super(gl, attributes);\r\n    }\r\n\r\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\r\n        const io = i;\r\n        const segW = width / wSegs;\r\n        const segH = height / hSegs;\r\n\r\n        for (let iy = 0; iy <= hSegs; iy++) {\r\n            let y = iy * segH - height / 2;\r\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\r\n                let x = ix * segW - width / 2;\r\n\r\n                position[i * 3 + u] = x * uDir;\r\n                position[i * 3 + v] = y * vDir;\r\n                position[i * 3 + w] = depth / 2;\r\n\r\n                normal[i * 3 + u] = 0;\r\n                normal[i * 3 + v] = 0;\r\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\r\n\r\n                uv[i * 2] = ix / wSegs;\r\n                uv[i * 2 + 1] = 1 - iy / hSegs;\r\n\r\n                if (iy === hSegs || ix === wSegs) continue;\r\n                let a = io + ix + iy * (wSegs + 1);\r\n                let b = io + ix + (iy + 1) * (wSegs + 1);\r\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\r\n                let d = io + ix + iy * (wSegs + 1) + 1;\r\n\r\n                index[ii * 6] = a;\r\n                index[ii * 6 + 1] = b;\r\n                index[ii * 6 + 2] = d;\r\n                index[ii * 6 + 3] = b;\r\n                index[ii * 6 + 4] = c;\r\n                index[ii * 6 + 5] = d;\r\n                ii++;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// TODO: upload empty texture if null ? maybe not\r\n// TODO: upload identity matrix if null ?\r\n// TODO: sampler Cube\r\n\r\nlet ID = 1;\r\n\r\n// cache of typed arrays used to flatten uniform arrays\r\nconst arrayCacheF32 = {};\r\n\r\nexport class Program {\r\n    constructor(\r\n        gl,\r\n        {\r\n            vertex,\r\n            fragment,\r\n            uniforms = {},\r\n\r\n            transparent = false,\r\n            cullFace = gl.BACK,\r\n            frontFace = gl.CCW,\r\n            depthTest = true,\r\n            depthWrite = true,\r\n            depthFunc = gl.LESS,\r\n        } = {}\r\n    ) {\r\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\r\n        this.gl = gl;\r\n        this.uniforms = uniforms;\r\n        this.id = ID++;\r\n\r\n        if (!vertex) console.warn('vertex shader not supplied');\r\n        if (!fragment) console.warn('fragment shader not supplied');\r\n\r\n        // Store program state\r\n        this.transparent = transparent;\r\n        this.cullFace = cullFace;\r\n        this.frontFace = frontFace;\r\n        this.depthTest = depthTest;\r\n        this.depthWrite = depthWrite;\r\n        this.depthFunc = depthFunc;\r\n        this.blendFunc = {};\r\n        this.blendEquation = {};\r\n\r\n        // set default blendFunc if transparent flagged\r\n        if (this.transparent && !this.blendFunc.src) {\r\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        }\r\n\r\n        // compile vertex shader and log errors\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n        gl.shaderSource(vertexShader, vertex);\r\n        gl.compileShader(vertexShader);\r\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\r\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\r\n        }\r\n\r\n        // compile fragment shader and log errors\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        gl.shaderSource(fragmentShader, fragment);\r\n        gl.compileShader(fragmentShader);\r\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\r\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\r\n        }\r\n\r\n        // compile program and log errors\r\n        this.program = gl.createProgram();\r\n        gl.attachShader(this.program, vertexShader);\r\n        gl.attachShader(this.program, fragmentShader);\r\n        gl.linkProgram(this.program);\r\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\r\n            return console.warn(gl.getProgramInfoLog(this.program));\r\n        }\r\n\r\n        // Remove shader once linked\r\n        gl.deleteShader(vertexShader);\r\n        gl.deleteShader(fragmentShader);\r\n\r\n        // Get active uniform locations\r\n        this.uniformLocations = new Map();\r\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\r\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\r\n            let uniform = gl.getActiveUniform(this.program, uIndex);\r\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\r\n\r\n            // split uniforms' names to separate array and struct declarations\r\n            const split = uniform.name.match(/(\\w+)/g);\r\n\r\n            uniform.uniformName = split[0];\r\n\r\n            if (split.length === 3) {\r\n                uniform.isStructArray = true;\r\n                uniform.structIndex = Number(split[1]);\r\n                uniform.structProperty = split[2];\r\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\r\n                uniform.isStruct = true;\r\n                uniform.structProperty = split[1];\r\n            }\r\n        }\r\n\r\n        // Get active attribute locations\r\n        this.attributeLocations = new Map();\r\n        const locations = [];\r\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\r\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\r\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\r\n            const location = gl.getAttribLocation(this.program, attribute.name);\r\n            locations[location] = attribute.name;\r\n            this.attributeLocations.set(attribute, location);\r\n        }\r\n        this.attributeOrder = locations.join('');\r\n    }\r\n\r\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\r\n        this.blendFunc.src = src;\r\n        this.blendFunc.dst = dst;\r\n        this.blendFunc.srcAlpha = srcAlpha;\r\n        this.blendFunc.dstAlpha = dstAlpha;\r\n        if (src) this.transparent = true;\r\n    }\r\n\r\n    setBlendEquation(modeRGB, modeAlpha) {\r\n        this.blendEquation.modeRGB = modeRGB;\r\n        this.blendEquation.modeAlpha = modeAlpha;\r\n    }\r\n\r\n    applyState() {\r\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\r\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\r\n\r\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\r\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\r\n\r\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\r\n        else this.gl.renderer.disable(this.gl.BLEND);\r\n\r\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\r\n        this.gl.renderer.setFrontFace(this.frontFace);\r\n        this.gl.renderer.setDepthMask(this.depthWrite);\r\n        this.gl.renderer.setDepthFunc(this.depthFunc);\r\n        if (this.blendFunc.src)\r\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\r\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\r\n    }\r\n\r\n    use({ flipFaces = false } = {}) {\r\n        let textureUnit = -1;\r\n        const programActive = this.gl.renderer.currentProgram === this.id;\r\n\r\n        // Avoid gl call if program already in use\r\n        if (!programActive) {\r\n            this.gl.useProgram(this.program);\r\n            this.gl.renderer.currentProgram = this.id;\r\n        }\r\n\r\n        // Set only the active uniforms found in the shader\r\n        this.uniformLocations.forEach((location, activeUniform) => {\r\n            let name = activeUniform.uniformName;\r\n\r\n            // get supplied uniform\r\n            let uniform = this.uniforms[name];\r\n\r\n            // For structs, get the specific property instead of the entire object\r\n            if (activeUniform.isStruct) {\r\n                uniform = uniform[activeUniform.structProperty];\r\n                name += `.${activeUniform.structProperty}`;\r\n            }\r\n            if (activeUniform.isStructArray) {\r\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\r\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\r\n            }\r\n\r\n            if (!uniform) {\r\n                return warn(`Active uniform ${name} has not been supplied`);\r\n            }\r\n\r\n            if (uniform && uniform.value === undefined) {\r\n                return warn(`${name} uniform is missing a value parameter`);\r\n            }\r\n\r\n            if (uniform.value.texture) {\r\n                textureUnit = textureUnit + 1;\r\n\r\n                // Check if texture needs to be updated\r\n                uniform.value.update(textureUnit);\r\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\r\n            }\r\n\r\n            // For texture arrays, set uniform as an array of texture units instead of just one\r\n            if (uniform.value.length && uniform.value[0].texture) {\r\n                const textureUnits = [];\r\n                uniform.value.forEach((value) => {\r\n                    textureUnit = textureUnit + 1;\r\n                    value.update(textureUnit);\r\n                    textureUnits.push(textureUnit);\r\n                });\r\n\r\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\r\n            }\r\n\r\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\r\n        });\r\n\r\n        this.applyState();\r\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\r\n    }\r\n\r\n    remove() {\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n}\r\n\r\nfunction setUniform(gl, type, location, value) {\r\n    value = value.length ? flatten(value) : value;\r\n    const setValue = gl.renderer.state.uniformLocations.get(location);\r\n\r\n    // Avoid redundant uniform commands\r\n    if (value.length) {\r\n        if (setValue === undefined || setValue.length !== value.length) {\r\n            // clone array to store as cache\r\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\r\n        } else {\r\n            if (arraysEqual(setValue, value)) return;\r\n\r\n            // Update cached array values\r\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\r\n            gl.renderer.state.uniformLocations.set(location, setValue);\r\n        }\r\n    } else {\r\n        if (setValue === value) return;\r\n        gl.renderer.state.uniformLocations.set(location, value);\r\n    }\r\n\r\n    switch (type) {\r\n        case 5126:\r\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\r\n        case 35664:\r\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\r\n        case 35665:\r\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\r\n        case 35666:\r\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\r\n        case 35670: // BOOL\r\n        case 5124: // INT\r\n        case 35678: // SAMPLER_2D\r\n        case 35680:\r\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\r\n        case 35671: // BOOL_VEC2\r\n        case 35667:\r\n            return gl.uniform2iv(location, value); // INT_VEC2\r\n        case 35672: // BOOL_VEC3\r\n        case 35668:\r\n            return gl.uniform3iv(location, value); // INT_VEC3\r\n        case 35673: // BOOL_VEC4\r\n        case 35669:\r\n            return gl.uniform4iv(location, value); // INT_VEC4\r\n        case 35674:\r\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\r\n        case 35675:\r\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\r\n        case 35676:\r\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\r\n    }\r\n}\r\n\r\nfunction addLineNumbers(string) {\r\n    let lines = string.split('\\n');\r\n    for (let i = 0; i < lines.length; i++) {\r\n        lines[i] = i + 1 + ': ' + lines[i];\r\n    }\r\n    return lines.join('\\n');\r\n}\r\n\r\nfunction flatten(a) {\r\n    const arrayLen = a.length;\r\n    const valueLen = a[0].length;\r\n    if (valueLen === undefined) return a;\r\n    const length = arrayLen * valueLen;\r\n    let value = arrayCacheF32[length];\r\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\r\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\r\n    return value;\r\n}\r\n\r\nfunction arraysEqual(a, b) {\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0, l = a.length; i < l; i++) {\r\n        if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction setArray(a, b) {\r\n    for (let i = 0, l = a.length; i < l; i++) {\r\n        a[i] = b[i];\r\n    }\r\n}\r\n\r\nlet warnCount = 0;\r\nfunction warn(message) {\r\n    if (warnCount > 100) return;\r\n    console.warn(message);\r\n    warnCount++;\r\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\r\n}\r\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform float _Aspect;\\nuniform float _Scale;\\nuniform vec2 _ViewportPos;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec3 localPos = position;\\n    localPos.x /= _Aspect;\\n    localPos *= _Scale;\\n    vec2 finalPos = _ViewportPos + localPos.xy;\\n\\n    vUv = uv;\\n\\n    gl_Position = vec4(finalPos.xy, 0.0, 1.0);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _Texture;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec4 col = texture2D(_Texture, vUv);\\n\\n    gl_FragColor = col;\\n\\n}\";","import { Texture } from \"../../../vendor/ogl/src/core/Texture\";\r\n\r\nconst { Mesh } = require(\"../../../vendor/ogl/src/core/Mesh\");\r\nconst { Plane } = require(\"../../../vendor/ogl/src/extras/Plane\");\r\nconst { Program } = require(\"../../../vendor/ogl/src/core/Program\");\r\n\r\nconst vertex = require('./shader/quad.vert');\r\nconst fragment = require('./shader/quad.frag');\r\nconst { Vec2 } = require(\"../../../vendor/ogl/src/math/Vec2\");\r\n\r\nexport class DisplayQuad extends Mesh {\r\n\r\n    constructor(gl, {\r\n        scale,\r\n        aspect,\r\n        position\r\n    }) {\r\n\r\n        super(gl);\r\n\r\n        this.gl = gl;\r\n\r\n        this.geometry = new Plane(this.gl, {\r\n            width: 1.0,\r\n            height: 1.0,\r\n        });\r\n\r\n        const uniforms = {\r\n\r\n            _Texture: {\r\n\r\n                value: new Texture(this.gl)\r\n\r\n            },\r\n            _Aspect: {\r\n                value: window.innerWidth/window.innerHeight\r\n            },\r\n            _Scale: {\r\n                value: scale\r\n            },\r\n            _ViewportPos: {\r\n                value: position\r\n            }\r\n\r\n        }\r\n\r\n        this.program = new Program(this.gl, {\r\n            vertex,\r\n            fragment,\r\n            uniforms,\r\n            depthTest: false,\r\n            depthWrite: false\r\n        });\r\n\r\n    }\r\n\r\n    get Texture() {\r\n        return this.program.uniforms._Texture.value;\r\n    }\r\n\r\n    set Texture(t) {\r\n        this.program.uniforms._Texture.value = t;\r\n    }\r\n\r\n}","export const params = {\r\n\r\n    PHYSICS: {\r\n\r\n        // STIFFNESS: 0.35,\r\n         STIFFNESS: 0.4,\r\n       // STIFFNESS: 0.2,\r\n        MAX_BOUNDS: 2.0,\r\n        TIMESTEP: 0.01,\r\n        CLAMP: 0.005,\r\n        // CLAMP: 0.0,\r\n        STEPS: 1\r\n    },\r\n\r\n    CLOTH: {\r\n\r\n        SIZE: 128\r\n\r\n    },\r\n\r\n    NOISE: {\r\n\r\n        SPATIAL_FREQ: 0.4,\r\n        TEMPORAL_FREQ: 0.1,\r\n        AMP: 10.0,\r\n\r\n    },\r\n\r\n    SHADOW: {\r\n        SIZE: 1024 * 2.0,\r\n        // BIAS: 0.005\r\n        BIAS: 0.01\r\n    }\r\n\r\n}","// TODO: multi target rendering\r\n// TODO: test stencil and depth\r\n// TODO: destroy\r\n// TODO: blit on resize?\r\nimport { Texture } from './Texture.js';\r\n\r\nexport class RenderTarget {\r\n    constructor(\r\n        gl,\r\n        {\r\n            width = gl.canvas.width,\r\n            height = gl.canvas.height,\r\n            target = gl.FRAMEBUFFER,\r\n            color = 1, // number of color attachments\r\n            depth = true,\r\n            stencil = false,\r\n            depthTexture = false, // note - stencil breaks\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            minFilter = gl.LINEAR,\r\n            magFilter = minFilter,\r\n            type = gl.UNSIGNED_BYTE,\r\n            format = gl.RGBA,\r\n            internalFormat = format,\r\n            unpackAlignment,\r\n            premultiplyAlpha,\r\n        } = {}\r\n    ) {\r\n        this.gl = gl;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n        this.buffer = this.gl.createFramebuffer();\r\n        this.target = target;\r\n        this.gl.bindFramebuffer(this.target, this.buffer);\r\n\r\n        this.textures = [];\r\n        const drawBuffers = [];\r\n\r\n        // create and attach required num of color textures\r\n        for (let i = 0; i < color; i++) {\r\n            this.textures.push(\r\n                new Texture(gl, {\r\n                    width,\r\n                    height,\r\n                    wrapS,\r\n                    wrapT,\r\n                    minFilter,\r\n                    magFilter,\r\n                    type,\r\n                    format,\r\n                    internalFormat,\r\n                    unpackAlignment,\r\n                    premultiplyAlpha,\r\n                    flipY: false,\r\n                    generateMipmaps: false,\r\n                })\r\n            );\r\n            this.textures[i].update();\r\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\r\n            drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\r\n        }\r\n\r\n        // For multi-render targets shader access\r\n        if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\r\n\r\n        // alias for majority of use cases\r\n        this.texture = this.textures[0];\r\n\r\n        // note depth textures break stencil - so can't use together\r\n        if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\r\n            this.depthTexture = new Texture(gl, {\r\n                width,\r\n                height,\r\n                minFilter: this.gl.NEAREST,\r\n                magFilter: this.gl.NEAREST,\r\n                format: this.gl.DEPTH_COMPONENT,\r\n                internalFormat: gl.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\r\n                type: this.gl.UNSIGNED_INT,\r\n            });\r\n            this.depthTexture.update();\r\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\r\n        } else {\r\n            // Render buffers\r\n            if (depth && !stencil) {\r\n                this.depthBuffer = this.gl.createRenderbuffer();\r\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\r\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\r\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\r\n            }\r\n\r\n            if (stencil && !depth) {\r\n                this.stencilBuffer = this.gl.createRenderbuffer();\r\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\r\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\r\n                this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\r\n            }\r\n\r\n            if (depth && stencil) {\r\n                this.depthStencilBuffer = this.gl.createRenderbuffer();\r\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\r\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\r\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\r\n            }\r\n        }\r\n\r\n        this.gl.bindFramebuffer(this.target, null);\r\n    }\r\n}\r\n","import { Geometry } from '../core/Geometry.js';\r\n\r\nexport class Triangle extends Geometry {\r\n    constructor(gl, { attributes = {} } = {}) {\r\n        Object.assign(attributes, {\r\n            position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\r\n            uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },\r\n        });\r\n\r\n        super(gl, attributes);\r\n    }\r\n}\r\n","import { Program } from '../core/Program.js';\r\nimport { Mesh } from '../core/Mesh.js';\r\nimport { Texture } from '../core/Texture.js';\r\nimport { RenderTarget } from '../core/RenderTarget.js';\r\nimport { Triangle } from './Triangle.js';\r\n\r\nexport class GPGPU {\r\n    constructor(\r\n        gl,\r\n        {\r\n            // Always pass in array of vec4s (RGBA values within texture)\r\n            data = new Float32Array(16),\r\n            geometry = new Triangle(gl),\r\n            type, // Pass in gl.FLOAT to force it, defaults to gl.HALF_FLOAT,\r\n            filtering = gl.NEAREST\r\n        }\r\n    ) {\r\n        this.gl = gl;\r\n        const initialData = data;\r\n        this.passes = [];\r\n        this.geometry = geometry;\r\n        this.dataLength = initialData.length / 4;\r\n\r\n        // Windows and iOS only like power of 2 textures\r\n        // Find smallest PO2 that fits data\r\n        this.size = Math.pow(2, Math.ceil(Math.log(Math.ceil(Math.sqrt(this.dataLength))) / Math.LN2));\r\n\r\n        // Create coords for output texture\r\n        this.coords = new Float32Array(this.dataLength * 2);\r\n        for (let i = 0; i < this.dataLength; i++) {\r\n            const x = (i % this.size) / this.size; // to add 0.5 to be center pixel ?\r\n            const y = Math.floor(i / this.size) / this.size;\r\n            this.coords.set([x, y], i * 2);\r\n        }\r\n\r\n        // Use original data if already correct length of PO2 texture, else copy to new array of correct length\r\n        const floatArray = (() => {\r\n            if (initialData.length === this.size * this.size * 4) {\r\n                return initialData;\r\n            } else {\r\n                const a = new Float32Array(this.size * this.size * 4);\r\n                a.set(initialData);\r\n                return a;\r\n            }\r\n        })();\r\n\r\n        // Create output texture uniform using input float texture with initial data\r\n        this.uniform = {\r\n            value: new Texture(gl, {\r\n                image: floatArray,\r\n                target: gl.TEXTURE_2D,\r\n                type: gl.FLOAT,\r\n                format: gl.RGBA,\r\n                internalFormat: gl.renderer.isWebgl2 ? gl.RGBA32F : gl.RGBA,\r\n                wrapS: gl.CLAMP_TO_EDGE,\r\n                wrapT: gl.CLAMP_TO_EDGE,\r\n                generateMipmaps: false,\r\n                minFilter: gl.NEAREST,\r\n                magFilter: gl.NEAREST,\r\n                width: this.size,\r\n                flipY: false,\r\n            }),\r\n        };\r\n\r\n        // Create FBOs\r\n        const options = {\r\n            width: this.size,\r\n            height: this.size,\r\n            type: type || gl.HALF_FLOAT || gl.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES,\r\n            format: gl.RGBA,\r\n            internalFormat: gl.renderer.isWebgl2 ? (type === gl.FLOAT ? gl.RGBA32F : gl.RGBA16F) : gl.RGBA,\r\n            minFilter: filtering,\r\n            depth: false,\r\n            unpackAlignment: 1,\r\n        };\r\n\r\n        this.fbo = {\r\n            read: new RenderTarget(gl, options),\r\n            write: new RenderTarget(gl, options),\r\n            swap: () => {\r\n                let temp = this.fbo.read;\r\n                this.fbo.read = this.fbo.write;\r\n                this.fbo.write = temp;\r\n                this.uniform.value = this.fbo.read.texture;\r\n            },\r\n        };\r\n    }\r\n\r\n    addPass({ vertex = defaultVertex, fragment = defaultFragment, uniforms = {}, textureUniform = 'tMap', enabled = true } = {}) {\r\n        uniforms[textureUniform] = this.uniform;\r\n        const program = new Program(this.gl, { vertex, fragment, uniforms });\r\n        const mesh = new Mesh(this.gl, { geometry: this.geometry, program });\r\n\r\n        const pass = {\r\n            mesh,\r\n            program,\r\n            uniforms,\r\n            enabled,\r\n            textureUniform,\r\n        };\r\n\r\n        this.passes.push(pass);\r\n        return pass;\r\n    }\r\n\r\n    render() {\r\n        const enabledPasses = this.passes.filter((pass) => pass.enabled);\r\n\r\n        enabledPasses.forEach((pass, i) => {\r\n            this.gl.renderer.render({\r\n                scene: pass.mesh,\r\n                target: this.fbo.write,\r\n                clear: false,\r\n            });\r\n            this.fbo.swap();\r\n        });\r\n    }\r\n}\r\n\r\nconst defaultVertex = /* glsl */ `\r\n    attribute vec2 uv;\r\n    attribute vec2 position;\r\n\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n        vUv = uv;\r\n        gl_Position = vec4(position, 0, 1);\r\n    }\r\n`;\r\n\r\nconst defaultFragment = /* glsl */ `\r\n    precision highp float;\r\n\r\n    uniform sampler2D tMap;\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n        gl_FragColor = texture2D(tMap, vUv);\r\n    }\r\n`;\r\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _Positions;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    gl_FragColor = texture2D(_Positions,vUv);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _Positions;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    gl_FragColor = texture2D(_Positions,vUv);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _CurrentPos;\\nuniform sampler2D _PrevPos;\\nuniform sampler2D _Normal;\\nuniform vec3 _Force;\\nuniform float _Time;\\n\\nuniform bool _IsInteracting;\\nuniform vec3 _InputWorldPos;\\nuniform float _Corner;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\n#define INERTIA 0.9998\\n// #define INERTIA 0.998\\n// #define INERTIA 0.9995\\n// #define INERTIA 0.997\\n// #define INERTIA 0.9998\\n#define timestepSq 0.015*0.015\\n#define EPS 0.00001\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n  { \\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i); \\n  vec4 p = permute( permute( permute( \\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\nvec3 snoiseVec3( vec3 x ){\\n\\n  float s  = snoise(vec3( x ));\\n  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\\n  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\\n  vec3 c = vec3( s , s1 , s2 );\\n  return c;\\n\\n}\\n\\nvec3 curlNoise( vec3 p ){\\n  \\n  const float e = .1;\\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\\n\\n  vec3 p_x0 = snoiseVec3( p - dx );\\n  vec3 p_x1 = snoiseVec3( p + dx );\\n  vec3 p_y0 = snoiseVec3( p - dy );\\n  vec3 p_y1 = snoiseVec3( p + dy );\\n  vec3 p_z0 = snoiseVec3( p - dz );\\n  vec3 p_z1 = snoiseVec3( p + dz );\\n\\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\\n\\n  const float divisor = 1.0 / ( 2.0 * e );\\n  return normalize( vec3( x , y , z ) * divisor );\\n\\n}\\n\\nvec2 getCenterTexel(vec2 coord, vec2 offset) {\\n\\n    return (floor((coord+offset) * (_Size-EPS)) + 0.5) / _Size;\\n\\n}\\n\\nvoid main() {\\n    \\n\\n    vec4 currentPos = texture2D(_CurrentPos, vUv);\\n    vec3 prevPos = texture2D(_PrevPos, vUv).xyz;\\n    vec3 delta = INERTIA * (currentPos.xyz-prevPos);\\n\\n    vec3 acc = vec3(0.0);\\n\\n    vec3 normal = texture2D(_Normal, vUv).xyz;\\n\\n    vec3 curlNoiseForce = curlNoise((currentPos.xyz *0.337) + _Time * 0.4) * 0.85;\\n    // vec3 curlNoiseForce = curlNoise((currentPos.xyz *0.137) + _Time * 0.2) * 0.65;\\n    curlNoiseForce = normal * dot(normal, curlNoiseForce);\\n\\n    if(_IsInteracting && currentPos.w == _Corner) {\\n\\n            vec3 delta = _InputWorldPos - currentPos.xyz;\\n            currentPos.xyz += delta * 0.5 * smoothstep(0.0, 2.0, dot(delta, delta));\\n\\n    } else {\\n        \\n        acc += curlNoiseForce;\\n        acc -= normalize(currentPos.xyz) * 0.08;\\n        // acc -= normalize(currentPos.xyz) * (dot(currentPos.xyz, currentPos.xyz) - 4.0) * -0.01;\\n\\n    }\\n\\n    acc *= timestepSq;\\n    delta += acc;\\n    currentPos.xyz += delta;\\n\\n    gl_FragColor = currentPos;\\n\\n}\";","module.exports=\"// precision highp float;\\n\\n// uniform sampler2D tMap;\\n// uniform sampler2D _Position;\\n// uniform float _Size;\\n\\n// varying vec2 vUv;\\n\\n// void main() {\\n\\n//     vec2 uv = vUv;\\n\\n//     vec2 texelSize = vec2(1.0/_Size);\\n\\n//     vec3 pos = texture2D(_Position, vUv).xyz;\\n//     vec3 rNeighbour = texture2D(_Position, vUv + vec2(texelSize.x, 0.0)).xyz;\\n//     vec3 lNeighbour = texture2D(_Position, vUv + vec2(-texelSize.x, 0.0)).xyz;\\n//     vec3 tNeighbour = texture2D(_Position, vUv + vec2(0.0, texelSize.y)).xyz;\\n//     vec3 bNeighbour = texture2D(_Position, vUv + vec2(0.0, -texelSize.y)).xyz;\\n\\n//     vec3 tangent = vec3(0.0);\\n//     vec3 biNormal = vec3(0.0);\\n//     vec3 normal = vec3(0.0);\\n\\n//     vec3 tangentDeltaA = vec3(0.0);\\n//     vec3 tangentDeltaB = vec3(0.0);\\n\\n//     vec3 biNormalDeltaA = vec3(0.0);\\n//     vec3 biNormalDeltaB = vec3(0.0);\\n\\n//     tangent = rNeighbour - pos;\\n//     if(vUv.x > 1.0 - texelSize.x) {\\n//          tangent = pos - lNeighbour;\\n//     }\\n\\n//     biNormal = tNeighbour - pos;\\n//     if(vUv.y > 1.0 - texelSize.y) {\\n//         biNormal = pos - bNeighbour;\\n//     }\\n\\n//     normal = normalize(cross(biNormal, tangent));\\n    \\n\\n//     gl_FragColor = vec4(normal, 1.0);\\n\\n// }\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform sampler2D _Position;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\n#define EPS 0.3\\n\\nvoid main() {\\n\\n    vec2 uv = vUv;\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n    vec2 halfTexel = texelSize * 0.5;\\n\\n    vec3 pos = texture2D(_Position, vUv).xyz;\\n    vec3 rNeighbour = texture2D(_Position, vUv + vec2(texelSize.x, 0.0)).xyz;\\n    vec3 lNeighbour = texture2D(_Position, vUv + vec2(-texelSize.x, 0.0)).xyz;\\n    vec3 tNeighbour = texture2D(_Position, vUv + vec2(0.0, texelSize.y)).xyz;\\n    vec3 bNeighbour = texture2D(_Position, vUv + vec2(0.0, -texelSize.y)).xyz;\\n\\n    vec3 tangent = vec3(0.0);\\n    vec3 biNormal = vec3(0.0);\\n    vec3 normal = vec3(0.0);\\n\\n    vec3 tangentA = vec3(0.0);\\n    vec3 tangentB = vec3(0.0);\\n\\n    vec3 biNormalA = vec3(0.0);\\n    vec3 biNormalB = vec3(0.0);\\n\\n    //get tangent \\n    tangentA = rNeighbour - pos;\\n    if(vUv.x > 1.0 - texelSize.x) {\\n        tangentA = pos - lNeighbour;\\n    }\\n    tangentA = pos + normalize(tangentA) * EPS;\\n\\n    tangentB = lNeighbour - pos;\\n    if(vUv.x < texelSize.x) {\\n        tangentB = pos - rNeighbour;\\n    } \\n\\n    tangentB = pos + normalize(tangentB) * EPS;\\n    \\n    tangent = tangentA - tangentB;\\n\\n    //get biNormal \\n    biNormalA = tNeighbour - pos;\\n    if(vUv.y > 1.0 - texelSize.y) {\\n        biNormalA = pos - bNeighbour;\\n    } \\n\\n    biNormalA = pos + normalize(biNormalA) * EPS;\\n\\n    biNormalB = bNeighbour - pos;\\n    if(vUv.y < texelSize.y) {\\n        biNormalB = pos - tNeighbour;\\n    } \\n\\n    biNormalB = normalize(biNormalB) * EPS;\\n\\n    biNormal = biNormalA - biNormalB;\\n\\n    normal = normalize(cross(biNormal,tangent));\\n    \\n\\n    gl_FragColor = vec4(normal, 1.0);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _InitPos;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    vec3 initPos = texture2D(_InitPos, vUv).xyz;\\n\\n    vec3 rNeighbour = texture2D(_InitPos, (vUv + vec2(texelSize.x, 0.0))).xyz;\\n    vec3 lNeighbour = texture2D(_InitPos, (vUv + vec2(-texelSize.x, 0.0))).xyz;\\n    vec3 tNeighbour = texture2D(_InitPos, (vUv + vec2(0.0, texelSize.y))).xyz;\\n    vec3 bNeighbour = texture2D(_InitPos, (vUv + vec2(0.0, -texelSize.y))).xyz;\\n\\n    float rDist = 0.0;\\n    float lDist = 0.0;\\n    float tDist = 0.0;\\n    float bDist = 0.0;\\n\\n    if(vUv.x < 1.0 - texelSize.x) {\\n        rDist = length(rNeighbour - initPos );\\n    }\\n    if(vUv.x > texelSize.x) {\\n        lDist = length(lNeighbour - initPos );\\n    }\\n    if(vUv.y < 1.0 - texelSize.y) {\\n        tDist = length(tNeighbour - initPos );\\n    }  \\n    if(vUv.y > texelSize.y) {\\n        bDist = length(bNeighbour - initPos );\\n    }\\n\\n    gl_FragColor = vec4(rDist, lDist, tDist, bDist);\\n    \\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _InitPos;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    vec3 initPos = texture2D(_InitPos, vUv).xyz;\\n\\n    vec3 tRNeighbour = texture2D(_InitPos, (vUv + vec2(texelSize.x, texelSize.y))).xyz;\\n    vec3 bLNeighbour = texture2D(_InitPos, (vUv + vec2(-texelSize.x, -texelSize.y))).xyz;\\n    vec3 tLNeighbour = texture2D(_InitPos, (vUv + vec2(-texelSize.x, texelSize.y))).xyz;\\n    vec3 bRNeighbour = texture2D(_InitPos, (vUv + vec2(texelSize.x, -texelSize.y))).xyz;\\n\\n    float trDist = 0.0;\\n    float tlDist = 0.0;\\n    float brDist = 0.0;\\n    float blDist = 0.0;\\n\\n    // vec2 floorCoord = floor(vUv * 127.0);\\n    // vec2 modFloorCoord = mod(floorCoord, 2.0);\\n\\n    bool isTr = vUv.x < 1.0 - texelSize.x && vUv.y < 1.0 - texelSize.y;\\n    bool isBl = vUv.x > texelSize.x && vUv.y > texelSize.y;\\n\\n    bool isTl = vUv.x > texelSize.x && vUv.y < 1.0 - texelSize.y;\\n    bool isBr = vUv.x < 1.0 - texelSize.x && vUv.y > texelSize.y;\\n\\n    if(isTr) {\\n        trDist = length(tRNeighbour - initPos );\\n    }\\n    if(isBl) {\\n        blDist = length(bLNeighbour - initPos );\\n    } \\n    if(isTl) {\\n        tlDist = length(tLNeighbour - initPos );\\n    }\\n    if(isBr) {\\n        brDist = length(bRNeighbour - initPos );\\n    } \\n\\n    gl_FragColor = vec4(trDist, blDist, tlDist, brDist);\\n    \\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform vec2 _TexelSize;\\nuniform float _Flip;\\nuniform sampler2D _RestLength;\\nuniform float _Stiffness;\\nuniform float _Clamp;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvec3 constrain(vec3 a, vec3 b, float restLength) {\\n\\n    vec3 delta = b - a;\\n    float dist = length(delta);\\n       if(dist <= _Clamp) {\\n        return vec3(0.0, 0.0, 0.0);\\n    }\\n    float percentage = (dist-restLength) / dist;\\n    return delta * percentage * _Stiffness;\\n\\n}\\n\\nvec2 getCenterTexel(vec2 coord, vec2 offset) {\\n\\n    return ((floor(coord * _Size) + 0.5) / (_Size)) + offset;\\n\\n}\\n\\n//inspired by:\\n//https://pdfs.semanticscholar.org/4718/6dcbbc8ccc01c6f4143719d09ed5ab4395fb.pdf?_ga=2.107277378.1544954547.1603025794-293436447.1603025794\\n\\nvoid main() {\\n\\n    // vec4 pos = texture2D(tMap, getCenterTexel(vUv, vec2(0.0)));\\n    vec4 pos = texture2D(tMap, (vUv));\\n    \\n    //r = right\\n    //g = left\\n    //b = top\\n    //w = bottom\\n    vec2 restLength = texture2D(_RestLength, vUv).xy;\\n    vec3 displacement = vec3(0.0, 0.0, 0.0);\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    //floor uv coordinate to get integer representation\\n    //so we know which particle to go towards\\n    float floorCoord = floor(vUv.x * (_Size-1.0));\\n    float modFloorCoord = mod(floorCoord, 2.0);\\n    bool constrainA = modFloorCoord == mix(0.0, 1.0, _Flip);\\n    bool constrainB = modFloorCoord == mix(1.0, 0.0, _Flip);\\n\\n    vec3 x1 = texture2D(tMap, vUv + vec2(texelSize.x, 0.0)).xyz;\\n    vec3 x2 = texture2D(tMap, vUv + vec2(-texelSize.x, 0.0)).xyz;\\n\\n    if(constrainA) displacement = constrain(pos.xyz, x1, restLength.x);\\n    if(constrainB) displacement = constrain(pos.xyz, x2, restLength.y);\\n\\n    pos.xyz += displacement;\\n\\n    gl_FragColor = pos;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform vec2 _TexelSize;\\nuniform float _Flip;\\nuniform sampler2D _RestLength;\\nuniform float _Stiffness;\\nuniform float _Clamp;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvec3 constrain(vec3 a, vec3 b, float restLength) {\\n\\n    vec3 delta = b - a;\\n    float dist = length(delta);\\n       if(dist <= _Clamp) {\\n        return vec3(0.0, 0.0, 0.0);\\n    }\\n    float percentage = (dist-restLength) / dist;\\n    return delta * percentage * _Stiffness;\\n\\n}\\n\\nvec2 getCenterTexel(vec2 coord, vec2 offset) {\\n\\n    return ((floor(coord * _Size) + 0.5) / (_Size)) + offset;\\n\\n}\\n\\n//inspired by:\\n//https://pdfs.semanticscholar.org/4718/6dcbbc8ccc01c6f4143719d09ed5ab4395fb.pdf?_ga=2.107277378.1544954547.1603025794-293436447.1603025794\\n\\nvoid main() {\\n\\n    // vec4 pos = texture2D(tMap, getCenterTexel(vUv, vec2(0.0)));\\n    vec4 pos = texture2D(tMap, vUv);\\n    vec3 displacement = vec3(0.0, 0.0, 0.0);\\n\\n    //r = right\\n    //g = left\\n    //b = top\\n    //w = bottom\\n    vec2 restLength = texture2D(_RestLength, vUv).zw;\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    //floor uv coordinate to get integer representation\\n    //so we know which particle to go towards\\n    float floorCoord = floor(vUv.y * (_Size-1.0));\\n    float modFloorCoord = mod(floorCoord, 2.0);\\n    bool constrainA = modFloorCoord == mix(0.0, 1.0, _Flip);\\n    bool constrainB = modFloorCoord == mix(1.0, 0.0, _Flip);\\n\\n    vec3 x1 = texture2D(tMap, vUv + vec2(0.0, texelSize.y)).xyz;\\n    vec3 x2 = texture2D(tMap, vUv + vec2(0.0, -texelSize.y)).xyz;\\n\\n    if(constrainA) displacement = constrain(pos.xyz, x1, restLength.x);\\n    if(constrainB) displacement = constrain(pos.xyz, x2, restLength.y);\\n\\n    // displacement *= pos.w;\\n    pos.xyz += displacement;\\n\\n    gl_FragColor = pos;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform vec2 _TexelSize;\\nuniform float _Flip;\\nuniform sampler2D _RestLength;\\nuniform float _Stiffness;\\nuniform float _Clamp;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvec3 constrain(vec3 a, vec3 b, float restLength) {\\n\\n    vec3 delta = b - a;\\n    float dist = length(delta);\\n       if(dist <= _Clamp) {\\n        return vec3(0.0, 0.0, 0.0);\\n    }\\n    float percentage = (dist-restLength) / dist;\\n    return delta * percentage * _Stiffness;\\n\\n}\\n\\n//inspired by:\\n//https://pdfs.semanticscholar.org/4718/6dcbbc8ccc01c6f4143719d09ed5ab4395fb.pdf?_ga=2.107277378.1544954547.1603025794-293436447.1603025794\\n\\nvoid main() {\\n\\n    // vec4 pos = texture2D(tMap, getCenterTexel(vUv, vec2(0.0)));\\n    vec4 pos = texture2D(tMap, (vUv));\\n    \\n    //r = top right\\n    //g = bottom left\\n    //b = top left\\n    //w = bottom right\\n    vec2 restLength = texture2D(_RestLength, vUv).xy;\\n    vec3 displacement = vec3(0.0, 0.0, 0.0);\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    //floor uv coordinate to get integer representation\\n    //so we know which particle to go towards\\n    vec2 floorCoord = floor(vUv * (_Size-1.0));\\n    vec2 modFloorCoord = mod(floorCoord, 2.0);\\n\\n    bool constrainA = modFloorCoord.x == mix(0.0, 1.0, _Flip) && (vUv.y < 1.0 - texelSize.y) && (vUv.x < 1.0 - texelSize.x);\\n    bool constrainB = modFloorCoord.x == mix(1.0, 0.0, _Flip) && (vUv.y > texelSize.y) && (vUv.x > texelSize.x);\\n\\n    vec3 x1 = texture2D(tMap, vUv + vec2(texelSize.x, texelSize.y)).xyz;\\n    vec3 x2 = texture2D(tMap, vUv + vec2(-texelSize.x, -texelSize.y)).xyz;\\n\\n    if(constrainA) displacement = constrain(pos.xyz, x1, restLength.x);\\n    if(constrainB) displacement = constrain(pos.xyz, x2, restLength.y);\\n\\n    pos.xyz += displacement;\\n\\n    gl_FragColor = pos;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform vec2 _TexelSize;\\nuniform float _Flip;\\nuniform sampler2D _RestLength;\\nuniform float _Stiffness;\\nuniform float _Clamp;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvec3 constrain(vec3 a, vec3 b, float restLength) {\\n\\n    vec3 delta = b - a;\\n    float dist = length(delta);\\n       if(dist <= _Clamp) {\\n        return vec3(0.0, 0.0, 0.0);\\n    }\\n    float percentage = (dist-restLength) / dist;\\n    return delta * percentage * _Stiffness;\\n\\n}\\n\\n//inspired by:\\n//https://pdfs.semanticscholar.org/4718/6dcbbc8ccc01c6f4143719d09ed5ab4395fb.pdf?_ga=2.107277378.1544954547.1603025794-293436447.1603025794\\n\\nvoid main() {\\n\\n    // vec4 pos = texture2D(tMap, getCenterTexel(vUv, vec2(0.0)));\\n    vec4 pos = texture2D(tMap, (vUv));\\n    \\n    //r = top right\\n    //g = bottom left\\n    //b = top left\\n    //w = bottom right\\n    vec2 restLength = texture2D(_RestLength, vUv).zw;\\n    vec3 displacement = vec3(0.0, 0.0, 0.0);\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    //floor uv coordinate to get integer representation\\n    //so we know which particle to go towards\\n    vec2 floorCoord = floor(vUv * (_Size-1.0));\\n    vec2 modFloorCoord = mod(floorCoord, 2.0);\\n    bool constrainA = modFloorCoord.x == mix(1.0, 0.0, _Flip) && (vUv.y < 1.0 - texelSize.y) && (vUv.x > texelSize.x);\\n    bool constrainB = modFloorCoord.x == mix(0.0, 1.0, _Flip) && (vUv.y > texelSize.y) && (vUv.x < 1.0 - texelSize.x);\\n\\n    vec3 x1 = texture2D(tMap, vUv + vec2(-texelSize.x, texelSize.y)).xyz;\\n    vec3 x2 = texture2D(tMap, vUv + vec2(texelSize.x, -texelSize.y)).xyz;\\n\\n    if(constrainA) displacement = constrain(pos.xyz, x1, restLength.x);\\n    if(constrainB) displacement = constrain(pos.xyz, x2, restLength.y);\\n\\n    pos.xyz += displacement;\\n\\n    gl_FragColor = pos;\\n\\n}\";","import { Program } from \"../../../../vendor/ogl/src/core/Program\";\r\nimport { Vec2 } from \"../../../../vendor/ogl/src/math/Vec2\";\r\nimport { Texture } from \"../../../../vendor/ogl/src/core/Texture\";\r\nimport { Vec3 } from \"../../../../vendor/ogl/src/math/Vec3\";\r\nconst { GPGPU } = require(\"../../../../vendor/ogl/src/extras/GPGPU\");\r\n\r\nconst prevPosKernel = require('./kernels/prevPos.frag');\r\nconst currentPosKernel = require('./kernels/currentPos.frag');\r\nconst positionKernel = require('./kernels/position.frag');\r\nconst normalKernel = require('./kernels/calcNormal.frag');\r\n\r\nconst restlengthKernel = require('./kernels/restLength.frag');\r\nconst restLengthDiagonalKernel = require('./kernels/restLengthDiagonal.frag');\r\n\r\nconst constrainHorizontalKernel = require('./kernels/constrainHorizontal.frag');\r\nconst constrainVerticalKernel = require('./kernels/constrainVertical.frag');\r\nconst constrainBLTRKernel = require('./kernels/constrainBLTR.frag');\r\nconst constrainBRTLKernel = require('./kernels/constrainBRTL.frag');\r\n\r\nimport {params} from '../../../params.js';\r\n\r\nexport class Simulator {\r\n\r\n    constructor(gl, {\r\n        data,\r\n        countX,\r\n        countY,\r\n    }) {\r\n\r\n        this.gl = gl;\r\n\r\n        this.data = data;\r\n\r\n        this.countX = countX;\r\n        this.countY = countY;\r\n\r\n        this.initSimulators();\r\n        this.initPrograms();\r\n        this.prewarm();\r\n\r\n    }\r\n\r\n    initSimulators() {\r\n\r\n        this.positionData = new Float32Array(this.countX*this.countY*4);\r\n        let positionDataIterator = 0;\r\n        let origDataIterator = 0;\r\n        \r\n        for(let y = 0; y < this.countY; y++) {\r\n            \r\n            for(let x = 0; x < this.countX; x++) {\r\n\r\n                this.positionData[positionDataIterator++] = this.data[origDataIterator++];\r\n                this.positionData[positionDataIterator++] = this.data[origDataIterator++];\r\n                this.positionData[positionDataIterator++] = this.data[origDataIterator++];\r\n                \r\n                let corner = 0;\r\n\r\n                let isTopLeft = y === 0 && x === 0;\r\n                let isTopRight = y === 0 && x === this.countX - 1;\r\n                let isBottomLeft = y === this.countY-1 && x === this.countX -1;\r\n                let isBottomRight = y === this.countY-1 && x === 0;\r\n\r\n                if(isTopLeft) corner = 1;\r\n                if(isTopRight) corner = 2;\r\n                if(isBottomLeft) corner = 3;\r\n                if(isBottomRight) corner = 4;\r\n               \r\n                this.positionData[positionDataIterator++] = corner;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.currentPosCapture = new GPGPU(this.gl, {\r\n            data: this.positionData,\r\n            type: this.gl.FLOAT\r\n        });\r\n\r\n        const prevPositionData = this.positionData.slice();\r\n        let prevPosIterator = 0;\r\n        origDataIterator = 0;\r\n        let twoPI = Math.PI * 2;\r\n            \r\n            for(let x = 0; x < this.countX*this.countY; x++) {\r\n\r\n                let offsetx = Math.random() * 2.0 - 1.0;\r\n                let offsety = Math.random() * 2.0 - 1.0;\r\n                let offsetz = Math.random() * 2.0 - 1.0;\r\n\r\n                // let offsetx = Math.cos(angleX) * Math.cos(angleX);\r\n                // let offsety = Math.sin(angleY);\r\n                // let offsetz = Math.cos(angleZ) * Math.sin(angleZ); \r\n\r\n                prevPositionData[prevPosIterator++] += (offsetx*0.01);\r\n                prevPositionData[prevPosIterator++] += (offsety*0.01);\r\n                prevPositionData[prevPosIterator++] += (offsetz*0.01);\r\n                prevPositionData[prevPosIterator++] += 0.0;\r\n\r\n        }\r\n\r\n        this.prevPositionCapture = new GPGPU(this.gl, {\r\n            data: prevPositionData,\r\n            type: this.gl.FLOAT\r\n        });\r\n\r\n        this.positionSim = new GPGPU(this.gl, {\r\n            data: this.positionData,\r\n            type: this.gl.FLOAT,\r\n        });\r\n\r\n        const normalData = new Float32Array(this.countX*this.countY*4.0);\r\n        let normalIterator = 0;\r\n        \r\n        for(let i = 0; i < this.countX*this.countY; i++) {\r\n\r\n            normalData[normalIterator++] = 0.0;\r\n            normalData[normalIterator++] = 0.0;\r\n            normalData[normalIterator++] = -1.0;\r\n            normalData[normalIterator++] = 1.0;\r\n\r\n        }\r\n\r\n        this.normalSim = new GPGPU(this.gl, {\r\n            data: normalData,\r\n            type: this.gl.FLOAT,\r\n            // filtering: this.gl.LINEAR\r\n        });\r\n\r\n        this.restlengthCapture = new GPGPU(this.gl, {\r\n            data: new Float32Array(this.countX*this.countY*4),\r\n            type: this.gl.FLOAT\r\n        });\r\n\r\n        this.restlengthDiagonalCapture = new GPGPU(this.gl, {\r\n            data: new Float32Array(this.countX*this.countY*4),\r\n            type: this.gl.FLOAT\r\n        });\r\n        \r\n        this.constraintSim = new GPGPU(this.gl, {\r\n            data: this.positionData,\r\n            type: this.gl.FLOAT\r\n        });\r\n\r\n    }\r\n\r\n    initPrograms() {\r\n\r\n        const restlengthCaptureU = {\r\n            _InitPos: this.positionSim.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.restlengthCapture.addPass({\r\n            fragment: restlengthKernel,\r\n            uniforms: restlengthCaptureU\r\n        });\r\n\r\n        const restlengthDiagonalU = {\r\n            _InitPos: this.positionSim.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.restlengthDiagonalCapture.addPass({\r\n            fragment: restLengthDiagonalKernel,\r\n            uniforms: restlengthDiagonalU\r\n        });\r\n\r\n        const normalSimU = {\r\n            _Position: this.positionSim.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.normalSim.addPass({\r\n            fragment: normalKernel,\r\n            uniforms: normalSimU\r\n        });\r\n\r\n        const positionSimU = {\r\n            _PrevPos: this.prevPositionCapture.uniform,\r\n            _CurrentPos: this.currentPosCapture.uniform,\r\n            _Normal: this.normalSim.uniform,\r\n            _Force: {\r\n                value: new Vec3(0.0, 0.0, 0.0)\r\n            },\r\n            _Time: {\r\n                value: 0.0\r\n            },\r\n            _InputWorldPos: {\r\n                value: new Vec3(0.0,0.0,0.0)\r\n            },\r\n            _IsInteracting: {\r\n                value: false\r\n            },\r\n            _Corner: {\r\n                value: 0\r\n            },\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.positionSim.addPass({\r\n            fragment: positionKernel,\r\n            uniforms: positionSimU\r\n        });\r\n\r\n        const prevPosCaptureSimU = {\r\n            _Positions: this.currentPosCapture.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.prevPositionCapture.addPass({\r\n            fragment: prevPosKernel,\r\n            uniforms: prevPosCaptureSimU\r\n        });\r\n\r\n        const currentPosCaptureSimU = {\r\n            _Positions: this.positionSim.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.currentPosCapture.addPass({\r\n            fragment: currentPosKernel,\r\n            uniforms: currentPosCaptureSimU\r\n        });\r\n\r\n        const constrainHorizontalFirstPassU = this.createConstraintUniform({flip: 0.0, restlength: this.restlengthCapture.uniform}); \r\n        const constrainHorizontalSecondPassU = this.createConstraintUniform({flip: 1.0, restlength: this.restlengthCapture.uniform});\r\n        \r\n        const constrainVerticalFirstPassU = this.createConstraintUniform({flip: 0.0, restlength: this.restlengthCapture.uniform});\r\n        const constrainVerticalSecondPassU = this.createConstraintUniform({flip: 1.0, restlength: this.restlengthCapture.uniform});\r\n\r\n        const constrainBLTRfirstPasssU = this.createConstraintUniform({flip: 0.0, restlength: this.restlengthDiagonalCapture.uniform}); \r\n        const constrainBLTRsecondPasssU = this.createConstraintUniform({flip: 1.0, restlength: this.restlengthDiagonalCapture.uniform});\r\n        \r\n        const constrainBRTLfirstPasssU = this.createConstraintUniform({flip: 0.0, restlength: this.restlengthDiagonalCapture.uniform});\r\n        const constrainBRTLsecondPasssU = this.createConstraintUniform({flip: 1.0, restlength: this.restlengthDiagonalCapture.uniform});\r\n\r\n        for(let i = 0; i < params.PHYSICS.STEPS; i++) {\r\n\r\n                            // //HORIZONTAL CONSTRAINTS\r\n            this.positionSim.addPass({\r\n                fragment: constrainHorizontalKernel,\r\n                uniforms: constrainHorizontalFirstPassU\r\n            });\r\n    \r\n            this.positionSim.addPass({\r\n                fragment: constrainHorizontalKernel,\r\n                uniforms: constrainHorizontalSecondPassU\r\n            });\r\n\r\n            //VERTICAL CONSTRAINTS\r\n            this.positionSim.addPass({\r\n                fragment: constrainVerticalKernel,\r\n                uniforms: constrainVerticalFirstPassU\r\n            });\r\n    \r\n            this.positionSim.addPass({\r\n                fragment: constrainVerticalKernel,\r\n                uniforms: constrainVerticalSecondPassU\r\n            });\r\n\r\n            //DIAGONAL CONSTRAINTS\r\n            this.positionSim.addPass({\r\n                fragment: constrainBLTRKernel,\r\n                uniforms: constrainBLTRfirstPasssU\r\n            });\r\n\r\n            this.positionSim.addPass({\r\n                fragment: constrainBRTLKernel,\r\n                uniforms: constrainBRTLfirstPasssU\r\n            });\r\n\r\n            this.positionSim.addPass({\r\n                fragment: constrainBLTRKernel,\r\n                uniforms: constrainBLTRsecondPasssU\r\n            });\r\n\r\n            this.positionSim.addPass({\r\n                fragment: constrainBRTLKernel,\r\n                uniforms: constrainBRTLsecondPasssU\r\n            });\r\n\r\n            }\r\n\r\n    }\r\n\r\n    createDataTexture({\r\n        data,\r\n        size\r\n    }) {\r\n\r\n        return new Texture(this.gl, {\r\n            image: data,\r\n            target: this.gl.TEXTURE_2D,\r\n            type: this.gl.FLOAT,\r\n            format: this.gl.RGBA,\r\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\r\n            wrapS: this.gl.CLAMP_TO_EDGE,\r\n            wrapT: this.gl.CLAMP_TO_EDGE,\r\n            generateMipmaps: false,\r\n            minFilter: this.gl.NEAREST,\r\n            magFilter: this.gl.NEAREST,\r\n            width: size,\r\n            height: size,\r\n            flipY: false\r\n        })\r\n\r\n    }\r\n\r\n    createConstraintUniform({\r\n        flip,\r\n        restlength\r\n    }) {\r\n       \r\n\r\n    const uniform = {\r\n       \r\n        _TexelSize: {\r\n            value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        },\r\n        _Stiffness: {\r\n            value: params.PHYSICS.STIFFNESS\r\n        },\r\n        _Flip: {\r\n            value: flip\r\n        },\r\n        _RestLength: restlength,\r\n        _Clamp: {\r\n            value: params.PHYSICS.CLAMP\r\n        },\r\n        _Size: {\r\n            value: params.CLOTH.SIZE\r\n          },\r\n\r\n    }\r\n\r\n       return uniform \r\n    }\r\n\r\n    prewarm() {\r\n\r\n        this.cornerUpdated = false;\r\n        this.restlengthCapture.render();\r\n        this.restlengthDiagonalCapture.render();\r\n\r\n    }\r\n\r\n    update(t, {\r\n        isInteracting,\r\n        inputWorldPos\r\n    }) {\r\n\r\n        this.currentPosCapture.render();   \r\n\r\n        if(isInteracting) {\r\n            if(this.cornerUpdated === false) {\r\n                const corner = (Math.floor(Math.random() * 4) + 1);\r\n                this.positionSim.passes[0].program.uniforms._Corner.value = corner;\r\n                this.cornerUpdated = true;\r\n            }\r\n        } else {\r\n            this.cornerUpdated = false;\r\n        }\r\n\r\n        this.positionSim.passes[0].program.uniforms._Time.value = t;\r\n        this.positionSim.passes[0].program.uniforms._IsInteracting.value = isInteracting;\r\n        this.positionSim.passes[0].program.uniforms._InputWorldPos.value.copy(inputWorldPos);\r\n        this.positionSim.render();\r\n        this.normalSim.render();\r\n        this.prevPositionCapture.render();\r\n        \r\n    }\r\n\r\n    get Positions() {\r\n        return this.positionSim.fbo.read.texture\r\n    }\r\n\r\n    get Normals() {\r\n        return this.normalSim.fbo.read.texture\r\n    }\r\n\r\n    get RestLengthsOrtho() {\r\n        return this.restlengthCapture.fbo.read.texture\r\n    }\r\n\r\n    get RestLengthsDiagonal() {\r\n        return this.restlengthDiagonalCapture.fbo.read.texture\r\n    }\r\n\r\n}","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform sampler2D _Positions;\\nuniform sampler2D _Normals;\\n\\nuniform mat4 projectionMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform mat3 normalMatrix;\\n\\nvarying vec2 vUv;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nuniform float _Size;\\n\\n#define LIGHT vec3(0.0, 5.0, 2.3)\\n#define EPS 0.00001\\n\\nvec2 getCenterTexel(vec2 coord, vec2 offset) {\\n\\n    return (floor((coord+offset) * (_Size-EPS)) + 0.5) / _Size;\\n\\n}\\n\\nvoid main() {\\n\\n    vec3 pos = texture2D(_Positions, position).xyz;\\n    vec4 mvPos = modelViewMatrix * vec4(pos, 1.0);\\n    vec3 norm = texture2D(_Normals, position).xyz;\\n\\n    gl_Position = projectionMatrix * mvPos;\\n    vUv = uv;\\n    vPos = pos.xyz;\\n    vNormal = normalMatrix * norm;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform samplerCube _CubeMap;\\n\\nuniform vec3 cameraPosition;\\n\\nvarying vec3 vNormal;\\nvarying vec3 vPos;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec3 normal = normalize(vNormal);    \\n    vec3 reflectV = reflect(normalize(vPos - cameraPosition), normal);\\n    vec3 col = textureCube(_CubeMap, reflectV).xyz;\\n    gl_FragColor = vec4(col, 1.0);\\n    // gl_FragColor = vec4(vNormal*0.5+0.5, 1.0);\\n\\n}\";","import {\r\n  Mesh\r\n} from \"../../../vendor/ogl/src/core/Mesh.js\";\r\nimport {\r\n  Plane\r\n} from \"../../../vendor/ogl/src/extras/Plane.js\";\r\nimport {\r\n  Program\r\n} from \"../../../vendor/ogl/src/core/Program.js\";\r\n\r\nimport {\r\n  Geometry\r\n} from \"../../../vendor/ogl/src/core/Geometry.js\";\r\nimport {\r\n  Vec3\r\n} from \"../../../vendor/ogl/src/math/Vec3.js\";\r\n\r\nimport {params} from '../../params.js';\r\n\r\nimport {Simulator} from './Simulator/index.js';\r\nimport { Texture } from \"../../../vendor/ogl/src/core/Texture.js\";\r\n\r\nimport cubemap from '../../../static/cubemap/*.jpg';\r\n\r\nconst vertex = require(\"./shader/verlet.vert\");\r\nconst fragment = require(\"./shader/verlet.frag\");\r\n\r\nexport class Verlet extends Mesh {\r\n  constructor(gl) {\r\n    super(gl);\r\n\r\n    this.gl = gl;\r\n\r\n    this.initGeometry();\r\n    this.initProgram();\r\n    // this.initShadowPass();\r\n\r\n    this.timestep = 18.0 / 1000.0 //I suppose this is hardcoded delta time, from what I could gather from logging delta time\r\n    this.timeStepSQ = this.timestep * this.timestep;\r\n    this.windForce = new Vec3(0.0, 0.0, 0.0);\r\n    this.forceDir = new Vec3(0.0, 0.0, 0.0);\r\n    // this.gravity = new Vec3(0.0, -0.0005, 0.0);\r\n    this.gravity = new Vec3(0.0, 0, 0.0);\r\n    this.t = 0;\r\n    this.flipped = false;\r\n\r\n    // this.mode = this.gl.POINTS;\r\n\r\n  }\r\n\r\n  initGeometry() {\r\n    this.widthSegments = params.CLOTH.SIZE-1;\r\n    this.heightSegments = params.CLOTH.SIZE-1;\r\n\r\n    const width = 4.0;\r\n    const height = 4.0;\r\n\r\n    const refGeometry = new Plane(this.gl, {\r\n      width,\r\n      height,\r\n      widthSegments: this.widthSegments,\r\n      heightSegments: this.heightSegments\r\n    });\r\n\r\n    this.faces = []; //will be used for normals\r\n    this.particles = [];\r\n    this.sticks = [];\r\n\r\n    const {\r\n      position,\r\n      uv,\r\n      normal,\r\n      index\r\n    } = refGeometry.attributes;\r\n\r\n\r\n    this.simulator = new Simulator(this.gl, {\r\n      data: position.data,\r\n      countX: params.CLOTH.SIZE,\r\n      countY: params.CLOTH.SIZE,\r\n    });\r\n\r\n    this.geometry = new Geometry(this.gl, {\r\n      position: {\r\n        size: 2,\r\n        data: this.simulator.positionSim.coords\r\n      },\r\n      uv: {\r\n        size: 2,\r\n        data: uv.data\r\n      },\r\n      index: {\r\n        data: index.data\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n\r\n  initProgram() {\r\n\r\n    this.cubeMapTexture = new Texture(this.gl, {\r\n      target: this.gl.TEXTURE_CUBE_MAP,\r\n    });\r\n\r\n    this.loadCubeMap();\r\n\r\n    const uniforms = {\r\n      _Positions: {\r\n        value: this.simulator.Positions\r\n      },\r\n      _Normals: {\r\n        value: this.simulator.Normals\r\n      },\r\n      _Size: {\r\n        value: params.CLOTH.SIZE\r\n      },\r\n      _CubeMap: {\r\n        value: this.cubeMapTexture\r\n      },\r\n    };\r\n\r\n    this.program = new Program(this.gl, {\r\n      vertex,\r\n      fragment,\r\n      uniforms,\r\n      cullFace: null,\r\n      transparent: false\r\n    });\r\n  }\r\n\r\n      async loadCubeMap() {\r\n\r\n        function loadImage(src) {\r\n            return new Promise(res => {\r\n\r\n                const img = new Image();\r\n                img.onload = () => res(img);\r\n                img.src = src;\r\n\r\n            });\r\n        }\r\n\r\n        const images = await Promise.all([\r\n            loadImage(cubemap.posx),\r\n            loadImage(cubemap.negx),\r\n            loadImage(cubemap.posy),\r\n            loadImage(cubemap.negy),\r\n            loadImage(cubemap.posz),\r\n            loadImage(cubemap.negz),\r\n        ]);\r\n\r\n        this.cubeMapTexture.image = images;\r\n\r\n    }\r\n\r\n  update({\r\n    t,\r\n    isInteracting,\r\n    inputWorldPos,\r\n    scene\r\n  }) {\r\n    this.t += t;\r\n    this.simulator.update(this.t, {\r\n      isInteracting,\r\n      inputWorldPos\r\n    });\r\n\r\n  }\r\n\r\n  FlipFace() {\r\n\r\n\r\n    this.program.cullFace = this.flipped ? this.gl.FRONT : this.gl.BACK;\r\n    this.program.uniforms._Flip.value = this.flipped ? -1.0 : 1.0;\r\n    this.flipped = !this.flipped;\r\n\r\n  }\r\n\r\n}","import {\r\n    Renderer\r\n} from \"../../vendor/ogl/src/core/Renderer.js\";\r\nimport {\r\n    Transform\r\n} from \"../../vendor/ogl/src/core/Transform.js\";\r\nimport {\r\n    Camera\r\n} from \"../../vendor/ogl/src/core/Camera.js\";\r\nimport {\r\n    Orbit\r\n} from \"../../vendor/ogl/src/extras/Orbit.js\";\r\nimport {\r\n    Raycast\r\n} from '../../vendor/ogl/src/extras/Raycast';\r\nimport { Vec2 } from \"../../vendor/ogl/src/math/Vec2.js\";\r\n\r\nimport {DisplayQuad} from './debug/DisplayQuad.js';\r\n\r\nimport {\r\n    Verlet\r\n} from \"./VerletGPU/index.js\";\r\nimport { Vec3 } from \"../../vendor/ogl/src/math/Vec3.js\";\r\n\r\nexport default class World3d {\r\n    constructor() {\r\n        this.init();\r\n        this.initInputParams();\r\n    }\r\n\r\n    init() {\r\n        this.renderer = new Renderer({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n            antialias: true\r\n        });\r\n        this.gl = this.renderer.gl;\r\n\r\n        this.gl.clearColor(0.8, 0.8, 0.83, 1);\r\n        this.gl.canvas.style.top = \"0\";\r\n        this.gl.canvas.style.left = \"0\";\r\n        this.gl.canvas.style.zIndex = \"0\";\r\n        this.gl.canvas.style.position = \"absolute\";\r\n        this.gl.canvas.style.width = \"100vw\";\r\n        this.gl.canvas.style.height = \"100vh\";\r\n\r\n        document.body.appendChild(this.gl.canvas);\r\n\r\n        this.camera = new Camera(this.gl, {\r\n            aspect: window.innerWidth / window.innerHeight\r\n        });\r\n        this.camera.position.x = 0.0;\r\n        this.camera.position.y = 0.0;\r\n        this.camera.position.z = 7.0;\r\n\r\n        this.orbitCamera = new Orbit(this.camera, {\r\n            element: this.gl.canvas\r\n        });\r\n\r\n        this.scene = new Transform();\r\n\r\n        this.initMesh();\r\n        this.initDebug();\r\n    }\r\n\r\n    initInputParams() {\r\n\r\n        this.inputPos = new Vec3(0.0, 0.0, 0.5);\r\n        this.projectedInputPos = new Vec3(0.0, 0.0, 0.5);\r\n        this.worldInputPos = new Vec3(0.0,0.0,0.5);\r\n        this.raycast = new Raycast(this.gl);\r\n        this.isInteracting = false;\r\n\r\n    }\r\n\r\n    onMouseDown(e) {\r\n\r\n        this.isInteracting = true;\r\n        this.inputPos.x = (e.clientX / window.innerWidth) * 2.0 - 1.0;\r\n        this.inputPos.y = (1.0 - e.clientY / window.innerHeight) * 2.0 - 1.0;\r\n\r\n    }\r\n\r\n    onMouseMove(e) {\r\n\r\n        if(this.isInteracting === false) return;\r\n\r\n        this.inputPos.x = (e.clientX / window.innerWidth) * 2.0 - 1.0;\r\n        this.inputPos.y = (1.0 - e.clientY / window.innerHeight) * 2.0 - 1.0;        \r\n\r\n    }\r\n\r\n    onMouseUp(e) {\r\n\r\n        this.isInteracting = false;\r\n\r\n    }\r\n\r\n    initMesh() {\r\n        this.verlet = new Verlet(this.gl);\r\n        this.verlet.setParent(this.scene);\r\n    }\r\n\r\n    initDebug() {\r\n        \r\n        this.positionQuad = new DisplayQuad(this.gl, {\r\n            aspect: this.renderer.width/this.renderer.height,\r\n            scale: 0.5,\r\n            position: new Vec2(-0.87,0.74)\r\n        });\r\n\r\n        this.prevPositionQuad = new DisplayQuad(this.gl, {\r\n            aspect: this.renderer.width/this.renderer.height,\r\n            scale: 0.5,\r\n            position: new Vec2(-0.87,0.23)\r\n        })\r\n        \r\n        this.restlengthQuad = new DisplayQuad(this.gl, {\r\n            aspect: this.renderer.width/this.renderer.height,\r\n            scale: 0.5,\r\n            position: new Vec2(-0.87, -0.28)\r\n        })\r\n\r\n    }\r\n\r\n    render({\r\n        scene,\r\n        camera = null,\r\n        clear = true\r\n    }) {\r\n        this.renderer.render({\r\n            scene,\r\n            camera,\r\n            clear\r\n        });\r\n    }\r\n\r\n    calcScreenToWorldPos() {\r\n\r\n        \r\n        this.camera.unproject(this.projectedInputPos.copy(this.inputPos));\r\n        this.projectedInputPos.sub(this.camera.position).normalize();\r\n        \r\n        const dist = -this.camera.position.z / this.projectedInputPos.z;\r\n\r\n        this.worldInputPos.copy(this.camera.position).add(this.projectedInputPos.multiply(dist));\r\n        // this.worldInputPos.z = -this.inputPos.y * 1.0;\r\n        this.worldInputPos.z = -this.inputPos.y * 5.0;\r\n\r\n    }\r\n\r\n    update(dt) {\r\n\r\n        this.camera.updateMatrixWorld();\r\n        //  this.orbitCamera.update();\r\n\r\n        this.calcScreenToWorldPos();\r\n\r\n        this.verlet.update({\r\n            t: dt,\r\n            isInteracting: this.isInteracting,\r\n            inputWorldPos: this.worldInputPos,\r\n            scene: this.scene\r\n        });\r\n\r\n        this.render({\r\n            scene: this.scene,\r\n            camera: this.camera,\r\n            clear: true\r\n        });\r\n\r\n    }\r\n\r\n    onResize() {\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.camera.perspective({\r\n            aspect: this.gl.canvas.width / this.gl.canvas.height\r\n        });\r\n    }\r\n}","import World3d from './World3d'\r\n\r\nexport class App {\r\n    constructor() {\r\n       this.World3d = new World3d();\r\n       this.initEvents();\r\n       this.start();\r\n    }\r\n\r\n    initEvents() {\r\n\r\n        this.time = Date.now();\r\n        this.prevTime = this.time;\r\n        this.deltaTime = 0;\r\n        this.ctaHidden = false;\r\n\r\n        window.addEventListener(\"resize\", this.onResize.bind(this));\r\n        window.addEventListener('mousedown', this.onMouseDown);\r\n        window.addEventListener('mousemove', this.onMouseMove);\r\n        window.addEventListener('mouseup', this.onMouseUp);\r\n\r\n    }\r\n\r\n    start() {\r\n    \r\n        this.update();\r\n\r\n    }\r\n\r\n    onMouseDown = e => {\r\n\r\n        this.World3d.onMouseDown(e);\r\n        this.hideCTA();\r\n\r\n\r\n    }\r\n\r\n    onMouseMove = e => {\r\n\r\n        this.World3d.onMouseMove(e);\r\n\r\n    }\r\n\r\n    onMouseUp = e => {\r\n\r\n        this.World3d.onMouseUp(e);\r\n\r\n    }\r\n\r\n    onResize = () => {\r\n        this.World3d.onResize();\r\n    }\r\n\r\n    hideCTA() {\r\n\r\n        if(this.ctaHidden === false) {\r\n            this.ctaHidden = true;\r\n            document.body.querySelector('.cta-message').classList.add('hidden');\r\n        }\r\n\r\n    }\r\n\r\n    update = () => {\r\n    \r\n        window.requestAnimationFrame(() => this.update());\r\n\r\n        this.time = Date.now();\r\n        let tmpTime = this.time;\r\n        this.deltaTime = (this.time - this.prevTime) / 1000.0;\r\n        this.prevTime = tmpTime;\r\n\r\n        this.World3d.update(this.deltaTime);\r\n\r\n    }\r\n    \r\n}\r\n\r\nwindow.onload = () => new App();"]}