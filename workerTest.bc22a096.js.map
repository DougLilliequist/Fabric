{"version":3,"sources":["../vendor/ogl/src/math/functions/Vec3Func.js","../vendor/ogl/src/math/Vec3.js","workerTest.js"],"names":["EPSILON","length","a","x","y","z","Math","sqrt","copy","out","set","add","b","subtract","multiply","divide","scale","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","transformMat4","m","w","scaleRotateMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","PI","acos","exactEquals","Vec3","Array","constructor","v","Vec3Func","va","vb","sub","squaredLen","equals","applyMatrix4","mat4","scaleRotateMatrix4","applyQuaternion","clone","fromArray","o","toArray","transformDirection","self","updateValue","data","console","log","onmessage","e","postMessage"],"mappings":"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","file":"workerTest.bc22a096.js","sourceRoot":"..\\src","sourcesContent":["const EPSILON = 0.000001;\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    out[2] = a[2] * b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    out[2] = a[2] / b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n    let x = b[0] - a[0];\r\n    let y = b[1] - a[1];\r\n    let z = b[2] - a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n    let x = b[0] - a[0];\r\n    let y = b[1] - a[1];\r\n    let z = b[2] - a[2];\r\n    return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    out[2] = 1.0 / a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let len = x * x + y * y + z * z;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2];\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2];\r\n\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    w = w || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Same as above but doesn't apply translation.\r\n * Useful for rays.\r\n */\r\nexport function scaleRotateMat4(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    w = w || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    out[0] = x * m[0] + y * m[3] + z * m[6];\r\n    out[1] = x * m[1] + y * m[4] + z * m[7];\r\n    out[2] = x * m[2] + y * m[5] + z * m[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let qx = q[0],\r\n        qy = q[1],\r\n        qz = q[2],\r\n        qw = q[3];\r\n\r\n    let uvx = qy * z - qz * y;\r\n    let uvy = qz * x - qx * z;\r\n    let uvz = qx * y - qy * x;\r\n\r\n    let uuvx = qy * uvz - qz * uvy;\r\n    let uuvy = qz * uvx - qx * uvz;\r\n    let uuvz = qx * uvy - qy * uvx;\r\n\r\n    let w2 = qw * 2;\r\n    uvx *= w2;\r\n    uvy *= w2;\r\n    uvz *= w2;\r\n\r\n    uuvx *= 2;\r\n    uuvy *= 2;\r\n    uuvz *= 2;\r\n\r\n    out[0] = x + uvx + uuvx;\r\n    out[1] = y + uvy + uuvy;\r\n    out[2] = z + uvz + uuvz;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport const angle = (function () {\r\n    const tempA = [0, 0, 0];\r\n    const tempB = [0, 0, 0];\r\n\r\n    return function (a, b) {\r\n        copy(tempA, a);\r\n        copy(tempB, b);\r\n\r\n        normalize(tempA, tempA);\r\n        normalize(tempB, tempB);\r\n\r\n        let cosine = dot(tempA, tempB);\r\n\r\n        if (cosine > 1.0) {\r\n            return 0;\r\n        } else if (cosine < -1.0) {\r\n            return Math.PI;\r\n        } else {\r\n            return Math.acos(cosine);\r\n        }\r\n    };\r\n})();\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n","import * as Vec3Func from './functions/Vec3Func.js';\r\n\r\nexport class Vec3 extends Array {\r\n    constructor(x = 0, y = x, z = x) {\r\n        super(x, y, z);\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n    }\r\n\r\n    set z(v) {\r\n        this[2] = v;\r\n    }\r\n\r\n    set(x, y = x, z = x) {\r\n        if (x.length) return this.copy(x);\r\n        Vec3Func.set(this, x, y, z);\r\n        return this;\r\n    }\r\n\r\n    copy(v) {\r\n        Vec3Func.copy(this, v);\r\n        return this;\r\n    }\r\n\r\n    add(va, vb) {\r\n        if (vb) Vec3Func.add(this, va, vb);\r\n        else Vec3Func.add(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    sub(va, vb) {\r\n        if (vb) Vec3Func.subtract(this, va, vb);\r\n        else Vec3Func.subtract(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    multiply(v) {\r\n        if (v.length) Vec3Func.multiply(this, this, v);\r\n        else Vec3Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    divide(v) {\r\n        if (v.length) Vec3Func.divide(this, this, v);\r\n        else Vec3Func.scale(this, this, 1 / v);\r\n        return this;\r\n    }\r\n\r\n    inverse(v = this) {\r\n        Vec3Func.inverse(this, v);\r\n        return this;\r\n    }\r\n\r\n    // Can't use 'length' as Array.prototype uses it\r\n    len() {\r\n        return Vec3Func.length(this);\r\n    }\r\n\r\n    distance(v) {\r\n        if (v) return Vec3Func.distance(this, v);\r\n        else return Vec3Func.length(this);\r\n    }\r\n\r\n    squaredLen() {\r\n        return Vec3Func.squaredLength(this);\r\n    }\r\n\r\n    squaredDistance(v) {\r\n        if (v) return Vec3Func.squaredDistance(this, v);\r\n        else return Vec3Func.squaredLength(this);\r\n    }\r\n\r\n    negate(v = this) {\r\n        Vec3Func.negate(this, v);\r\n        return this;\r\n    }\r\n\r\n    cross(va, vb) {\r\n        if (vb) Vec3Func.cross(this, va, vb);\r\n        else Vec3Func.cross(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    scale(v) {\r\n        Vec3Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    normalize() {\r\n        Vec3Func.normalize(this, this);\r\n        return this;\r\n    }\r\n\r\n    dot(v) {\r\n        return Vec3Func.dot(this, v);\r\n    }\r\n\r\n    equals(v) {\r\n        return Vec3Func.exactEquals(this, v);\r\n    }\r\n\r\n    applyMatrix4(mat4) {\r\n        Vec3Func.transformMat4(this, this, mat4);\r\n        return this;\r\n    }\r\n\r\n    scaleRotateMatrix4(mat4) {\r\n        Vec3Func.scaleRotateMat4(this, this, mat4);\r\n        return this;\r\n    }\r\n\r\n    applyQuaternion(q) {\r\n        Vec3Func.transformQuat(this, this, q);\r\n        return this;\r\n    }\r\n\r\n    angle(v) {\r\n        return Vec3Func.angle(this, v);\r\n    }\r\n\r\n    lerp(v, t) {\r\n        Vec3Func.lerp(this, this, v, t);\r\n        return this;\r\n    }\r\n\r\n    clone() {\r\n        return new Vec3(this[0], this[1], this[2]);\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        this[2] = a[o + 2];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        a[o + 2] = this[2];\r\n        return a;\r\n    }\r\n\r\n    transformDirection(mat4) {\r\n        const x = this[0];\r\n        const y = this[1];\r\n        const z = this[2];\r\n\r\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\r\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\r\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\r\n\r\n        return this.normalize();\r\n    }\r\n}\r\n","import {Vec3} from '../vendor/ogl/src/math/Vec3.js';\r\n\r\nself.updateValue = () => {\r\n\r\n    self.data += 10.0;\r\n    console.log('updated')\r\n\r\n}\r\n\r\n\r\nself.onmessage = e => {\r\n\r\n    console.log(e);\r\n    self.data = e.data[0];\r\n    console.log('worker recieved');\r\n    console.log(Vec3);\r\n    updateValue();    \r\n    postMessage(self.data);\r\n\r\n}"]}