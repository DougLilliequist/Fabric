{"version":3,"sources":["vendor/ogl/src/math/functions/Vec3Func.js","vendor/ogl/src/math/Vec3.js","vendor/ogl/src/core/Renderer.js","vendor/ogl/src/math/functions/Vec4Func.js","vendor/ogl/src/math/functions/QuatFunc.js","vendor/ogl/src/math/Quat.js","vendor/ogl/src/math/functions/Mat4Func.js","vendor/ogl/src/math/Mat4.js","vendor/ogl/src/math/functions/EulerFunc.js","vendor/ogl/src/math/Euler.js","vendor/ogl/src/core/Transform.js","vendor/ogl/src/core/Camera.js","vendor/ogl/src/math/functions/Vec2Func.js","vendor/ogl/src/math/Vec2.js","vendor/ogl/src/extras/Orbit.js","vendor/ogl/src/extras/Raycast.js","vendor/ogl/src/core/Texture.js","vendor/ogl/src/math/functions/Mat3Func.js","vendor/ogl/src/math/Mat3.js","vendor/ogl/src/core/Mesh.js","vendor/ogl/src/core/Geometry.js","vendor/ogl/src/extras/Plane.js","vendor/ogl/src/core/Program.js","src/World3d/debug/shader/quad.vert","src/World3d/debug/shader/quad.frag","src/World3d/debug/DisplayQuad.js","src/params.js","vendor/ogl/src/core/RenderTarget.js","vendor/ogl/src/extras/Triangle.js","vendor/ogl/src/extras/GPGPU.js","src/World3d/VerletGPU/Simulator/kernels/prevPos.frag","src/World3d/VerletGPU/Simulator/kernels/currentPos.frag","src/World3d/VerletGPU/Simulator/kernels/position.frag","src/World3d/VerletGPU/Simulator/kernels/calcNormal.frag","src/World3d/VerletGPU/Simulator/kernels/restLength.frag","src/World3d/VerletGPU/Simulator/kernels/restLengthDiagonal.frag","src/World3d/VerletGPU/Simulator/kernels/constrainHorizontal.frag","src/World3d/VerletGPU/Simulator/kernels/constrainVertical.frag","src/World3d/VerletGPU/Simulator/kernels/constrainBLTR.frag","src/World3d/VerletGPU/Simulator/kernels/constrainBRTL.frag","src/World3d/VerletGPU/Simulator/index.js","src/World3d/VerletGPU/shader/verlet.vert","src/World3d/VerletGPU/shader/verlet.frag","src/World3d/VerletGPU/index.js","src/World3d/index.js","src/index.js"],"names":["EPSILON","length","a","x","y","z","Math","sqrt","copy","out","set","add","b","subtract","multiply","divide","scale","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","transformMat4","m","w","scaleRotateMat4","transformMat3","transformQuat","q","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","PI","acos","exactEquals","Array","Vec3","Vec3Func","v","va","vb","mat4","o","tempVec3","ID","Renderer","canvas","document","createElement","width","height","dpr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","autoClear","webgl","attributes","color","id","gl","getContext","isWebgl2","renderer","setSize","state","blendFunc","src","ONE","dst","ZERO","blendEquation","modeRGB","FUNC_ADD","cullFace","frontFace","CCW","depthMask","depthFunc","LESS","premultiplyAlpha","flipY","unpackAlignment","framebuffer","viewport","textureUnits","activeTextureUnit","boundBuffer","uniformLocations","Map","extensions","getExtension","vertexAttribDivisor","drawArraysInstanced","drawElementsInstanced","createVertexArray","bindVertexArray","deleteVertexArray","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","Object","assign","style","enable","disable","srcAlpha","dstAlpha","undefined","blendFuncSeparate","modeAlpha","blendEquationSeparate","value","activeTexture","TEXTURE0","target","FRAMEBUFFER","buffer","bindFramebuffer","extension","webgl2Func","extFunc","bind","renderOrder","program","zDepth","scene","camera","frustumCull","sort","renderList","updateFrustum","traverse","node","visible","draw","frustumCulled","frustumIntersectsMesh","push","opaque","transparent","ui","forEach","depthTest","worldMatrix","getTranslation","applyMatrix4","projectionViewMatrix","sortOpaque","sortTransparent","sortUI","concat","update","clear","setViewport","DEPTH_TEST","setDepthMask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","updateMatrixWorld","getRenderList","aw","identity","setAxisAngle","axis","rad","s","sin","cos","bw","rotateX","rotateY","rotateZ","slerp","omega","cosom","sinom","scale0","scale1","invert","a0","a1","a2","a3","invDot","conjugate","fromMat3","fTrace","fRoot","i","j","k","fromEuler","euler","order","sx","cx","sy","cy","sz","cz","vec4","Quat","onChange","QuatFunc","qA","qB","matrix3","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","transpose","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","determinant","b0","b1","b2","b3","translate","rotate","c","b12","b20","b21","b22","hypot","abs","mat","getScaling","getMaxScaleOnAxis","max","getRotation","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat","yx","zx","zy","perspective","fovy","aspect","near","far","f","tan","nf","ortho","left","right","bottom","top","lr","bt","targetTo","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","multiplyScalar","Mat4","Mat4Func","ma","mb","fov","pos","fromRotationMatrix","asin","min","atan2","tmpMat4","Euler","EulerFunc","fromQuaternion","Transform","parent","children","matrix","matrixAutoUpdate","position","quaternion","rotation","notifyParent","removeChild","addChild","child","notifyChild","indexOf","setParent","splice","force","updateMatrix","worldMatrixNeedsUpdate","l","compose","callback","lookAt","tempMat4","tempVec3a","tempVec3b","Camera","zoom","projectionMatrix","viewMatrix","worldPosition","type","orthographic","fromPerspective","fromOrthogonal","frustum","constant","invLen","geometry","bounds","radius","Infinity","computeBoundingSphere","center","frustumIntersectsSphere","normal","plane","transformMat2","transformMat2d","Vec2","Vec2Func","mat3","STATE","NONE","ROTATE","DOLLY","PAN","DOLLY_PAN","tempVec2a","tempVec2b","Orbit","object","element","enabled","ease","inertia","enableRotate","rotateSpeed","autoRotate","autoRotateSpeed","enableZoom","zoomSpeed","enablePan","panSpeed","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","maxDistance","sphericalDelta","phi","theta","sphericalTarget","spherical","panDelta","offset","sub","handleAutoRotate","sinPhiRadius","forcePosition","rotateStart","panStart","dollyStart","getZoomScale","pow","mouseButtons","ORBIT","ZOOM","pan","deltaX","deltaY","el","body","targetDistance","clientHeight","panUp","dolly","dollyScale","handleMoveRotate","handleMovePan","onMouseDown","e","button","clientX","clientY","window","addEventListener","onMouseMove","onMouseUp","handleMouseMoveDolly","removeEventListener","onMouseWheel","stopPropagation","preventDefault","onTouchStart","touches","pageX","pageY","handleTouchStartDollyPan","dx","dy","onTouchMove","handleTouchMoveDollyPan","onTouchEnd","onContextMenu","remove","passive","tempVec2c","tempVec3c","tempVec3d","tempVec3e","tempVec3f","tempVec3g","tempVec3h","tempVec3i","tempVec3j","tempVec3k","Raycast","origin","direction","mouse","unproject","meshes","output","isArray","invWorldMat4","hits","mesh","localMaxDistance","scaleRotateMatrix4","transformDirection","localDistance","raycast","intersectSphere","intersectBox","hit","localPoint","point","includeUV","includeNormal","intersectBounds","closestFaceNormal","faceNormal","barycoord","uvA","uvB","uvC","closestA","closestB","closestC","index","start","drawRange","end","count","ai","data","bi","ci","fromArray","intersectTriangle","localFaceNormal","uv","localNormal","getBarycoord","sphere","ray","tca","d2","radius2","thc","t0","t1","box","tmin","tmax","tYmin","tYmax","tZmin","tZmax","invdirx","invdiry","invdirz","backfaceCulling","edge1","edge2","diff","DdN","sign","DdQxE2","DdE1xQ","QdN","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","emptyPixel","Uint8Array","isPowerOf2","Texture","image","TEXTURE_2D","UNSIGNED_BYTE","format","RGBA","internalFormat","wrapS","CLAMP_TO_EDGE","wrapT","generateMipmaps","minFilter","NEAREST_MIPMAP_LINEAR","LINEAR","magFilter","anisotropy","level","texture","createTexture","store","glState","REPEAT","bindTexture","textureUnit","needsUpdate","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_CUBE_MAP","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","ArrayBuffer","isView","isCompressedTexture","compressedTexImage2D","generateMipmap","onUpdate","fromMat4","normalFromMat4","projection","Mat3","Mat3Func","vec3a","vec3b","vec3c","Mesh","mode","TRIANGLES","console","error","modelViewMatrix","normalMatrix","beforeRenderCallbacks","afterRenderCallbacks","uniforms","modelMatrix","cameraPosition","getNormalMatrix","flipFaces","use","ATTR_ID","isBoundsWarned","Geometry","key","VAOs","instancedCount","currentGeometry","addAttribute","attr","size","constructor","Float32Array","FLOAT","Uint16Array","UNSIGNED_SHORT","UNSIGNED_INT","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","normalized","stride","byteLength","divisor","instanced","createBuffer","updateAttribute","isInstanced","warn","bindBuffer","bufferData","STATIC_DRAW","attributeOrder","bindAttributes","attributeLocations","location","name","numLoc","vertexAttribPointer","enableVertexAttribArray","createVAO","drawElements","drawArrays","array","getPositionArray","computeBoundingBox","maxRadiusSq","vao","deleteBuffer","Plane","widthSegments","heightSegments","wSegs","hSegs","num","numIndices","Uint32Array","buildPlane","uDir","vDir","ii","io","segW","segH","iy","ix","d","arrayCacheF32","Program","vertex","fragment","BACK","depthWrite","setBlendFunc","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","addLineNumbers","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","getUniformLocation","split","match","uniformName","isStructArray","structIndex","Number","structProperty","isNaN","isStruct","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","getAttribLocation","join","CULL_FACE","BLEND","setCullFace","setFrontFace","setDepthFunc","setBlendEquation","currentProgram","useProgram","activeUniform","setUniform","applyState","CW","deleteProgram","flatten","setValue","get","slice","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","arrayLen","valueLen","warnCount","message","module","exports","require","DisplayQuad","_Texture","_Aspect","innerWidth","innerHeight","_Scale","_ViewportPos","params","PHYSICS","STIFFNESS","MAX_BOUNDS","TIMESTEP","CLAMP","STEPS","CLOTH","SIZE","NOISE","SPATIAL_FREQ","TEMPORAL_FREQ","AMP","SHADOW","BIAS","RenderTarget","depthTexture","createFramebuffer","textures","framebufferTexture2D","COLOR_ATTACHMENT0","NEAREST","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_ATTACHMENT","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","stencilBuffer","STENCIL_INDEX8","STENCIL_ATTACHMENT","depthStencilBuffer","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","Triangle","GPGPU","filtering","initialData","passes","dataLength","ceil","log","LN2","coords","floor","floatArray","RGBA32F","options","HALF_FLOAT","HALF_FLOAT_OES","RGBA16F","fbo","read","write","swap","defaultVertex","defaultFragment","textureUniform","pass","filter","render","prevPosKernel","currentPosKernel","positionKernel","normalKernel","restlengthKernel","restLengthDiagonalKernel","constrainHorizontalKernel","constrainVerticalKernel","constrainBLTRKernel","constrainBRTLKernel","Simulator","countX","countY","initSimulators","initPrograms","prewarm","positionData","positionDataIterator","origDataIterator","corner","currentPosCapture","prevPositionData","prevPosIterator","twoPI","offsetx","random","offsety","offsetz","prevPositionCapture","positionSim","normalData","normalIterator","normalSim","restlengthCapture","restlengthDiagonalCapture","constraintSim","restlengthCaptureU","_InitPos","_Size","addPass","restlengthDiagonalU","normalSimU","_Position","positionSimU","_PrevPos","_CurrentPos","_Normal","_Force","_Time","_InputWorldPos","_IsInteracting","_Corner","prevPosCaptureSimU","_Positions","currentPosCaptureSimU","constrainHorizontalFirstPassU","createConstraintUniform","flip","restlength","constrainHorizontalSecondPassU","constrainVerticalFirstPassU","constrainVerticalSecondPassU","constrainBLTRfirstPasssU","constrainBLTRsecondPasssU","constrainBRTLfirstPasssU","constrainBRTLsecondPasssU","_TexelSize","_Stiffness","_Flip","_RestLength","_Clamp","cornerUpdated","isInteracting","inputWorldPos","Verlet","initGeometry","initProgram","timestep","timeStepSQ","windForce","forceDir","gravity","flipped","refGeometry","faces","particles","sticks","simulator","cubeMapTexture","loadCubeMap","Positions","_Normals","Normals","_CubeMap","loadImage","Promise","res","img","Image","onload","all","cubemap","posx","negx","posy","negy","posz","negz","images","FRONT","World3d","init","initInputParams","clearColor","zIndex","appendChild","orbitCamera","initMesh","initDebug","inputPos","projectedInputPos","worldInputPos","verlet","positionQuad","prevPositionQuad","restlengthQuad","dist","dt","calcScreenToWorldPos","App","hideCTA","onResize","requestAnimationFrame","time","Date","now","tmpTime","deltaTime","prevTime","initEvents","ctaHidden","querySelector","classList"],"mappings":"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","file":"src.9c9a32bb.js","sourceRoot":"..","sourcesContent":["const EPSILON = 0.000001;\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    out[2] = a[2] * b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    out[2] = a[2] / b[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n    let x = b[0] - a[0];\r\n    let y = b[1] - a[1];\r\n    let z = b[2] - a[2];\r\n    return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n    let x = b[0] - a[0];\r\n    let y = b[1] - a[1];\r\n    let z = b[2] - a[2];\r\n    return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    out[2] = 1.0 / a[2];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let len = x * x + y * y + z * z;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2];\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2];\r\n\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    w = w || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Same as above but doesn't apply translation.\r\n * Useful for rays.\r\n */\r\nexport function scaleRotateMat4(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n    w = w || 1.0;\r\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\r\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\r\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    out[0] = x * m[0] + y * m[3] + z * m[6];\r\n    out[1] = x * m[1] + y * m[4] + z * m[7];\r\n    out[2] = x * m[2] + y * m[5] + z * m[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n\r\n    let x = a[0],\r\n        y = a[1],\r\n        z = a[2];\r\n    let qx = q[0],\r\n        qy = q[1],\r\n        qz = q[2],\r\n        qw = q[3];\r\n\r\n    let uvx = qy * z - qz * y;\r\n    let uvy = qz * x - qx * z;\r\n    let uvz = qx * y - qy * x;\r\n\r\n    let uuvx = qy * uvz - qz * uvy;\r\n    let uuvy = qz * uvx - qx * uvz;\r\n    let uuvz = qx * uvy - qy * uvx;\r\n\r\n    let w2 = qw * 2;\r\n    uvx *= w2;\r\n    uvy *= w2;\r\n    uvz *= w2;\r\n\r\n    uuvx *= 2;\r\n    uuvy *= 2;\r\n    uuvz *= 2;\r\n\r\n    out[0] = x + uvx + uuvx;\r\n    out[1] = y + uvy + uuvy;\r\n    out[2] = z + uvz + uuvz;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport const angle = (function () {\r\n    const tempA = [0, 0, 0];\r\n    const tempB = [0, 0, 0];\r\n\r\n    return function (a, b) {\r\n        copy(tempA, a);\r\n        copy(tempB, b);\r\n\r\n        normalize(tempA, tempA);\r\n        normalize(tempB, tempB);\r\n\r\n        let cosine = dot(tempA, tempB);\r\n\r\n        if (cosine > 1.0) {\r\n            return 0;\r\n        } else if (cosine < -1.0) {\r\n            return Math.PI;\r\n        } else {\r\n            return Math.acos(cosine);\r\n        }\r\n    };\r\n})();\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n","import * as Vec3Func from './functions/Vec3Func.js';\r\n\r\nexport class Vec3 extends Array {\r\n    constructor(x = 0, y = x, z = x) {\r\n        super(x, y, z);\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n    }\r\n\r\n    set z(v) {\r\n        this[2] = v;\r\n    }\r\n\r\n    set(x, y = x, z = x) {\r\n        if (x.length) return this.copy(x);\r\n        Vec3Func.set(this, x, y, z);\r\n        return this;\r\n    }\r\n\r\n    copy(v) {\r\n        Vec3Func.copy(this, v);\r\n        return this;\r\n    }\r\n\r\n    add(va, vb) {\r\n        if (vb) Vec3Func.add(this, va, vb);\r\n        else Vec3Func.add(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    sub(va, vb) {\r\n        if (vb) Vec3Func.subtract(this, va, vb);\r\n        else Vec3Func.subtract(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    multiply(v) {\r\n        if (v.length) Vec3Func.multiply(this, this, v);\r\n        else Vec3Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    divide(v) {\r\n        if (v.length) Vec3Func.divide(this, this, v);\r\n        else Vec3Func.scale(this, this, 1 / v);\r\n        return this;\r\n    }\r\n\r\n    inverse(v = this) {\r\n        Vec3Func.inverse(this, v);\r\n        return this;\r\n    }\r\n\r\n    // Can't use 'length' as Array.prototype uses it\r\n    len() {\r\n        return Vec3Func.length(this);\r\n    }\r\n\r\n    distance(v) {\r\n        if (v) return Vec3Func.distance(this, v);\r\n        else return Vec3Func.length(this);\r\n    }\r\n\r\n    squaredLen() {\r\n        return Vec3Func.squaredLength(this);\r\n    }\r\n\r\n    squaredDistance(v) {\r\n        if (v) return Vec3Func.squaredDistance(this, v);\r\n        else return Vec3Func.squaredLength(this);\r\n    }\r\n\r\n    negate(v = this) {\r\n        Vec3Func.negate(this, v);\r\n        return this;\r\n    }\r\n\r\n    cross(va, vb) {\r\n        if (vb) Vec3Func.cross(this, va, vb);\r\n        else Vec3Func.cross(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    scale(v) {\r\n        Vec3Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    normalize() {\r\n        Vec3Func.normalize(this, this);\r\n        return this;\r\n    }\r\n\r\n    dot(v) {\r\n        return Vec3Func.dot(this, v);\r\n    }\r\n\r\n    equals(v) {\r\n        return Vec3Func.exactEquals(this, v);\r\n    }\r\n\r\n    applyMatrix4(mat4) {\r\n        Vec3Func.transformMat4(this, this, mat4);\r\n        return this;\r\n    }\r\n\r\n    scaleRotateMatrix4(mat4) {\r\n        Vec3Func.scaleRotateMat4(this, this, mat4);\r\n        return this;\r\n    }\r\n\r\n    applyQuaternion(q) {\r\n        Vec3Func.transformQuat(this, this, q);\r\n        return this;\r\n    }\r\n\r\n    angle(v) {\r\n        return Vec3Func.angle(this, v);\r\n    }\r\n\r\n    lerp(v, t) {\r\n        Vec3Func.lerp(this, this, v, t);\r\n        return this;\r\n    }\r\n\r\n    clone() {\r\n        return new Vec3(this[0], this[1], this[2]);\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        this[2] = a[o + 2];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        a[o + 2] = this[2];\r\n        return a;\r\n    }\r\n\r\n    transformDirection(mat4) {\r\n        const x = this[0];\r\n        const y = this[1];\r\n        const z = this[2];\r\n\r\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\r\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\r\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\r\n\r\n        return this.normalize();\r\n    }\r\n}\r\n","import { Vec3 } from '../math/Vec3.js';\r\n\r\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\r\n\r\n// Not automatic - devs to use these methods manually\r\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n// gl.clearColor( r, g, b, a );\r\n// gl.stencilMask( stencilMask );\r\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\r\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\r\n// gl.clearStencil( stencil );\r\n\r\nconst tempVec3 = new Vec3();\r\nlet ID = 1;\r\n\r\nexport class Renderer {\r\n    constructor({\r\n        canvas = document.createElement('canvas'),\r\n        width = 300,\r\n        height = 150,\r\n        dpr = 1,\r\n        alpha = false,\r\n        depth = true,\r\n        stencil = false,\r\n        antialias = false,\r\n        premultipliedAlpha = false,\r\n        preserveDrawingBuffer = false,\r\n        powerPreference = 'default',\r\n        autoClear = true,\r\n        webgl = 2,\r\n    } = {}) {\r\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\r\n        this.dpr = dpr;\r\n        this.alpha = alpha;\r\n        this.color = true;\r\n        this.depth = depth;\r\n        this.stencil = stencil;\r\n        this.premultipliedAlpha = premultipliedAlpha;\r\n        this.autoClear = autoClear;\r\n        this.id = ID++;\r\n\r\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\r\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\r\n        this.isWebgl2 = !!this.gl;\r\n        if (!this.gl) {\r\n            this.gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);\r\n        }\r\n\r\n        // Attach renderer to gl so that all classes have access to internal state functions\r\n        this.gl.renderer = this;\r\n\r\n        // initialise size values\r\n        this.setSize(width, height);\r\n\r\n        // gl state stores to avoid redundant calls on methods used internally\r\n        this.state = {};\r\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\r\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\r\n        this.state.cullFace = null;\r\n        this.state.frontFace = this.gl.CCW;\r\n        this.state.depthMask = true;\r\n        this.state.depthFunc = this.gl.LESS;\r\n        this.state.premultiplyAlpha = false;\r\n        this.state.flipY = false;\r\n        this.state.unpackAlignment = 4;\r\n        this.state.framebuffer = null;\r\n        this.state.viewport = { width: null, height: null };\r\n        this.state.textureUnits = [];\r\n        this.state.activeTextureUnit = 0;\r\n        this.state.boundBuffer = null;\r\n        this.state.uniformLocations = new Map();\r\n\r\n        // store requested extensions\r\n        this.extensions = {};\r\n\r\n        // Initialise extra format types\r\n        if (this.isWebgl2) {\r\n            this.getExtension('EXT_color_buffer_float');\r\n            this.getExtension('OES_texture_float_linear');\r\n        } else {\r\n            this.getExtension('OES_texture_float');\r\n            this.getExtension('OES_texture_float_linear');\r\n            this.getExtension('OES_texture_half_float');\r\n            this.getExtension('OES_texture_half_float_linear');\r\n            this.getExtension('OES_element_index_uint');\r\n            this.getExtension('OES_standard_derivatives');\r\n            this.getExtension('EXT_sRGB');\r\n            this.getExtension('WEBGL_depth_texture');\r\n            this.getExtension('WEBGL_draw_buffers');\r\n        }\r\n\r\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\r\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\r\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\r\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\r\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\r\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\r\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\r\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\r\n\r\n        // Store device parameters\r\n        this.parameters = {};\r\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\r\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\r\n            : 0;\r\n    }\r\n\r\n    setSize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.gl.canvas.width = width * this.dpr;\r\n        this.gl.canvas.height = height * this.dpr;\r\n\r\n        Object.assign(this.gl.canvas.style, {\r\n            width: width + 'px',\r\n            height: height + 'px',\r\n        });\r\n    }\r\n\r\n    setViewport(width, height) {\r\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\r\n        this.state.viewport.width = width;\r\n        this.state.viewport.height = height;\r\n        this.gl.viewport(0, 0, width, height);\r\n    }\r\n\r\n    enable(id) {\r\n        if (this.state[id] === true) return;\r\n        this.gl.enable(id);\r\n        this.state[id] = true;\r\n    }\r\n\r\n    disable(id) {\r\n        if (this.state[id] === false) return;\r\n        this.gl.disable(id);\r\n        this.state[id] = false;\r\n    }\r\n\r\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\r\n        if (\r\n            this.state.blendFunc.src === src &&\r\n            this.state.blendFunc.dst === dst &&\r\n            this.state.blendFunc.srcAlpha === srcAlpha &&\r\n            this.state.blendFunc.dstAlpha === dstAlpha\r\n        )\r\n            return;\r\n        this.state.blendFunc.src = src;\r\n        this.state.blendFunc.dst = dst;\r\n        this.state.blendFunc.srcAlpha = srcAlpha;\r\n        this.state.blendFunc.dstAlpha = dstAlpha;\r\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\r\n        else this.gl.blendFunc(src, dst);\r\n    }\r\n\r\n    setBlendEquation(modeRGB, modeAlpha) {\r\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\r\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\r\n        this.state.blendEquation.modeRGB = modeRGB;\r\n        this.state.blendEquation.modeAlpha = modeAlpha;\r\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\r\n        else this.gl.blendEquation(modeRGB);\r\n    }\r\n\r\n    setCullFace(value) {\r\n        if (this.state.cullFace === value) return;\r\n        this.state.cullFace = value;\r\n        this.gl.cullFace(value);\r\n    }\r\n\r\n    setFrontFace(value) {\r\n        if (this.state.frontFace === value) return;\r\n        this.state.frontFace = value;\r\n        this.gl.frontFace(value);\r\n    }\r\n\r\n    setDepthMask(value) {\r\n        if (this.state.depthMask === value) return;\r\n        this.state.depthMask = value;\r\n        this.gl.depthMask(value);\r\n    }\r\n\r\n    setDepthFunc(value) {\r\n        if (this.state.depthFunc === value) return;\r\n        this.state.depthFunc = value;\r\n        this.gl.depthFunc(value);\r\n    }\r\n\r\n    activeTexture(value) {\r\n        if (this.state.activeTextureUnit === value) return;\r\n        this.state.activeTextureUnit = value;\r\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\r\n    }\r\n\r\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\r\n        if (this.state.framebuffer === buffer) return;\r\n        this.state.framebuffer = buffer;\r\n        this.gl.bindFramebuffer(target, buffer);\r\n    }\r\n\r\n    getExtension(extension, webgl2Func, extFunc) {\r\n        // if webgl2 function supported, return func bound to gl context\r\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\r\n\r\n        // fetch extension once only\r\n        if (!this.extensions[extension]) {\r\n            this.extensions[extension] = this.gl.getExtension(extension);\r\n        }\r\n\r\n        // return extension if no function requested\r\n        if (!webgl2Func) return this.extensions[extension];\r\n\r\n        // Return null if extension not supported\r\n        if (!this.extensions[extension]) return null;\r\n\r\n        // return extension function, bound to extension\r\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\r\n    }\r\n\r\n    sortOpaque(a, b) {\r\n        if (a.renderOrder !== b.renderOrder) {\r\n            return a.renderOrder - b.renderOrder;\r\n        } else if (a.program.id !== b.program.id) {\r\n            return a.program.id - b.program.id;\r\n        } else if (a.zDepth !== b.zDepth) {\r\n            return a.zDepth - b.zDepth;\r\n        } else {\r\n            return b.id - a.id;\r\n        }\r\n    }\r\n\r\n    sortTransparent(a, b) {\r\n        if (a.renderOrder !== b.renderOrder) {\r\n            return a.renderOrder - b.renderOrder;\r\n        }\r\n        if (a.zDepth !== b.zDepth) {\r\n            return b.zDepth - a.zDepth;\r\n        } else {\r\n            return b.id - a.id;\r\n        }\r\n    }\r\n\r\n    sortUI(a, b) {\r\n        if (a.renderOrder !== b.renderOrder) {\r\n            return a.renderOrder - b.renderOrder;\r\n        } else if (a.program.id !== b.program.id) {\r\n            return a.program.id - b.program.id;\r\n        } else {\r\n            return b.id - a.id;\r\n        }\r\n    }\r\n\r\n    getRenderList({ scene, camera, frustumCull, sort }) {\r\n        let renderList = [];\r\n\r\n        if (camera && frustumCull) camera.updateFrustum();\r\n\r\n        // Get visible\r\n        scene.traverse((node) => {\r\n            if (!node.visible) return true;\r\n            if (!node.draw) return;\r\n\r\n            if (frustumCull && node.frustumCulled && camera) {\r\n                if (!camera.frustumIntersectsMesh(node)) return;\r\n            }\r\n\r\n            renderList.push(node);\r\n        });\r\n\r\n        if (sort) {\r\n            const opaque = [];\r\n            const transparent = []; // depthTest true\r\n            const ui = []; // depthTest false\r\n\r\n            renderList.forEach((node) => {\r\n                // Split into the 3 render groups\r\n                if (!node.program.transparent) {\r\n                    opaque.push(node);\r\n                } else if (node.program.depthTest) {\r\n                    transparent.push(node);\r\n                } else {\r\n                    ui.push(node);\r\n                }\r\n\r\n                node.zDepth = 0;\r\n\r\n                // Only calculate z-depth if renderOrder unset and depthTest is true\r\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\r\n\r\n                // update z-depth\r\n                node.worldMatrix.getTranslation(tempVec3);\r\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\r\n                node.zDepth = tempVec3.z;\r\n            });\r\n\r\n            opaque.sort(this.sortOpaque);\r\n            transparent.sort(this.sortTransparent);\r\n            ui.sort(this.sortUI);\r\n\r\n            renderList = opaque.concat(transparent, ui);\r\n        }\r\n\r\n        return renderList;\r\n    }\r\n\r\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\r\n        if (target === null) {\r\n            // make sure no render target bound so draws to canvas\r\n            this.bindFramebuffer();\r\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\r\n        } else {\r\n            // bind supplied render target and update viewport\r\n            this.bindFramebuffer(target);\r\n            this.setViewport(target.width, target.height);\r\n        }\r\n\r\n        if (clear || (this.autoClear && clear !== false)) {\r\n            // Ensure depth buffer writing is enabled so it can be cleared\r\n            if (this.depth && (!target || target.depth)) {\r\n                this.enable(this.gl.DEPTH_TEST);\r\n                this.setDepthMask(true);\r\n            }\r\n            this.gl.clear(\r\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\r\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\r\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\r\n            );\r\n        }\r\n\r\n        // updates all scene graph matrices\r\n        if (update) scene.updateMatrixWorld();\r\n\r\n        // Update camera separately, in case not in scene graph\r\n        if (camera) camera.updateMatrixWorld();\r\n\r\n        // Get render list - entails culling and sorting\r\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\r\n\r\n        renderList.forEach((node) => {\r\n            node.draw({ camera });\r\n        });\r\n    }\r\n}\r\n","const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    out[2] = z;\r\n    out[3] = w;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let w = a[3];\r\n    return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    let z = a[2];\r\n    let w = a[3];\r\n    let len = x * x + y * y + z * z + w * w;\r\n    if (len > 0) {\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    let ax = a[0];\r\n    let ay = a[1];\r\n    let az = a[2];\r\n    let aw = a[3];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    out[2] = az + t * (b[2] - az);\r\n    out[3] = aw + t * (b[3] - aw);\r\n    return out;\r\n}\r\n","import * as vec4 from './Vec4Func.js';\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n    rad = rad * 0.5;\r\n    let s = Math.sin(rad);\r\n    out[0] = s * axis[0];\r\n    out[1] = s * axis[1];\r\n    out[2] = s * axis[2];\r\n    out[3] = Math.cos(rad);\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiplies two quats\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2],\r\n        bw = b[3];\r\n\r\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n    rad *= 0.5;\r\n\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let bx = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw + aw * bx;\r\n    out[1] = ay * bw + az * bx;\r\n    out[2] = az * bw - ay * bx;\r\n    out[3] = aw * bw - ax * bx;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n    rad *= 0.5;\r\n\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let by = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw - az * by;\r\n    out[1] = ay * bw + aw * by;\r\n    out[2] = az * bw + ax * by;\r\n    out[3] = aw * bw - ay * by;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n    rad *= 0.5;\r\n\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let bz = Math.sin(rad),\r\n        bw = Math.cos(rad);\r\n\r\n    out[0] = ax * bw + ay * bz;\r\n    out[1] = ay * bw - ax * bz;\r\n    out[2] = az * bw + aw * bz;\r\n    out[3] = aw * bw - az * bz;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n    // benchmarks:\r\n    //    http://jsperf.com/quaternion-slerp-implementations\r\n    let ax = a[0],\r\n        ay = a[1],\r\n        az = a[2],\r\n        aw = a[3];\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2],\r\n        bw = b[3];\r\n\r\n    let omega, cosom, sinom, scale0, scale1;\r\n\r\n    // calc cosine\r\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n    // adjust signs (if necessary)\r\n    if (cosom < 0.0) {\r\n        cosom = -cosom;\r\n        bx = -bx;\r\n        by = -by;\r\n        bz = -bz;\r\n        bw = -bw;\r\n    }\r\n    // calculate coefficients\r\n    if (1.0 - cosom > 0.000001) {\r\n        // standard case (slerp)\r\n        omega = Math.acos(cosom);\r\n        sinom = Math.sin(omega);\r\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n        scale1 = Math.sin(t * omega) / sinom;\r\n    } else {\r\n        // \"from\" and \"to\" quaternions are very close\r\n        //  ... so we can do a linear interpolation\r\n        scale0 = 1.0 - t;\r\n        scale1 = t;\r\n    }\r\n    // calculate final values\r\n    out[0] = scale0 * ax + scale1 * bx;\r\n    out[1] = scale0 * ay + scale1 * by;\r\n    out[2] = scale0 * az + scale1 * bz;\r\n    out[3] = scale0 * aw + scale1 * bw;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n    let a0 = a[0],\r\n        a1 = a[1],\r\n        a2 = a[2],\r\n        a3 = a[3];\r\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n    let invDot = dot ? 1.0 / dot : 0;\r\n\r\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n    out[0] = -a0 * invDot;\r\n    out[1] = -a1 * invDot;\r\n    out[2] = -a2 * invDot;\r\n    out[3] = a3 * invDot;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    out[2] = -a[2];\r\n    out[3] = a[3];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n    // article \"Quaternion Calculus and Fast Animation\".\r\n    let fTrace = m[0] + m[4] + m[8];\r\n    let fRoot;\r\n\r\n    if (fTrace > 0.0) {\r\n        // |w| > 1/2, may as well choose w > 1/2\r\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n        out[3] = 0.5 * fRoot;\r\n        fRoot = 0.5 / fRoot; // 1/(4w)\r\n        out[0] = (m[5] - m[7]) * fRoot;\r\n        out[1] = (m[6] - m[2]) * fRoot;\r\n        out[2] = (m[1] - m[3]) * fRoot;\r\n    } else {\r\n        // |w| <= 1/2\r\n        let i = 0;\r\n        if (m[4] > m[0]) i = 1;\r\n        if (m[8] > m[i * 3 + i]) i = 2;\r\n        let j = (i + 1) % 3;\r\n        let k = (i + 2) % 3;\r\n\r\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n        out[i] = 0.5 * fRoot;\r\n        fRoot = 0.5 / fRoot;\r\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} euler Angles to rotate around each axis in degrees.\r\n * @param {String} order detailing order of operations. Default 'XYZ'.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, euler, order = 'YXZ') {\r\n    let sx = Math.sin(euler[0] * 0.5);\r\n    let cx = Math.cos(euler[0] * 0.5);\r\n    let sy = Math.sin(euler[1] * 0.5);\r\n    let cy = Math.cos(euler[1] * 0.5);\r\n    let sz = Math.sin(euler[2] * 0.5);\r\n    let cz = Math.cos(euler[2] * 0.5);\r\n\r\n    if (order === 'XYZ') {\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n    } else if (order === 'YXZ') {\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n    } else if (order === 'ZXY') {\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n    } else if (order === 'ZYX') {\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n    } else if (order === 'YZX') {\r\n        out[0] = sx * cy * cz + cx * sy * sz;\r\n        out[1] = cx * sy * cz + sx * cy * sz;\r\n        out[2] = cx * cy * sz - sx * sy * cz;\r\n        out[3] = cx * cy * cz - sx * sy * sz;\r\n    } else if (order === 'XZY') {\r\n        out[0] = sx * cy * cz - cx * sy * sz;\r\n        out[1] = cx * sy * cz - sx * cy * sz;\r\n        out[2] = cx * cy * sz + sx * sy * cz;\r\n        out[3] = cx * cy * cz + sx * sy * sz;\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const add = vec4.add;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport const dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport const length = vec4.length;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const normalize = vec4.normalize;\r\n","import * as QuatFunc from './functions/QuatFunc.js';\r\n\r\nexport class Quat extends Array {\r\n    constructor(x = 0, y = 0, z = 0, w = 1) {\r\n        super(x, y, z, w);\r\n        this.onChange = () => {};\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n\r\n    get w() {\r\n        return this[3];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set z(v) {\r\n        this[2] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set w(v) {\r\n        this[3] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    identity() {\r\n        QuatFunc.identity(this);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    set(x, y, z, w) {\r\n        if (x.length) return this.copy(x);\r\n        QuatFunc.set(this, x, y, z, w);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    rotateX(a) {\r\n        QuatFunc.rotateX(this, this, a);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    rotateY(a) {\r\n        QuatFunc.rotateY(this, this, a);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    rotateZ(a) {\r\n        QuatFunc.rotateZ(this, this, a);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    inverse(q = this) {\r\n        QuatFunc.invert(this, q);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    conjugate(q = this) {\r\n        QuatFunc.conjugate(this, q);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    copy(q) {\r\n        QuatFunc.copy(this, q);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    normalize(q = this) {\r\n        QuatFunc.normalize(this, q);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    multiply(qA, qB) {\r\n        if (qB) {\r\n            QuatFunc.multiply(this, qA, qB);\r\n        } else {\r\n            QuatFunc.multiply(this, this, qA);\r\n        }\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    dot(v) {\r\n        return QuatFunc.dot(this, v);\r\n    }\r\n\r\n    fromMatrix3(matrix3) {\r\n        QuatFunc.fromMat3(this, matrix3);\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    fromEuler(euler) {\r\n        QuatFunc.fromEuler(this, euler, euler.order);\r\n        return this;\r\n    }\r\n\r\n    fromAxisAngle(axis, a) {\r\n        QuatFunc.setAxisAngle(this, axis, a);\r\n        return this;\r\n    }\r\n\r\n    slerp(q, t) {\r\n        QuatFunc.slerp(this, this, q, t);\r\n        return this;\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        this[2] = a[o + 2];\r\n        this[3] = a[o + 3];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        a[o + 2] = this[2];\r\n        a[o + 3] = this[3];\r\n        return a;\r\n    }\r\n}\r\n","const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n    out[0] = m00;\r\n    out[1] = m01;\r\n    out[2] = m02;\r\n    out[3] = m03;\r\n    out[4] = m10;\r\n    out[5] = m11;\r\n    out[6] = m12;\r\n    out[7] = m13;\r\n    out[8] = m20;\r\n    out[9] = m21;\r\n    out[10] = m22;\r\n    out[11] = m23;\r\n    out[12] = m30;\r\n    out[13] = m31;\r\n    out[14] = m32;\r\n    out[15] = m33;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = 1;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 1;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n    if (out === a) {\r\n        let a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a12 = a[6],\r\n            a13 = a[7];\r\n        let a23 = a[11];\r\n\r\n        out[1] = a[4];\r\n        out[2] = a[8];\r\n        out[3] = a[12];\r\n        out[4] = a01;\r\n        out[6] = a[9];\r\n        out[7] = a[13];\r\n        out[8] = a02;\r\n        out[9] = a12;\r\n        out[11] = a[14];\r\n        out[12] = a03;\r\n        out[13] = a13;\r\n        out[14] = a23;\r\n    } else {\r\n        out[0] = a[0];\r\n        out[1] = a[4];\r\n        out[2] = a[8];\r\n        out[3] = a[12];\r\n        out[4] = a[1];\r\n        out[5] = a[5];\r\n        out[6] = a[9];\r\n        out[7] = a[13];\r\n        out[8] = a[2];\r\n        out[9] = a[6];\r\n        out[10] = a[10];\r\n        out[11] = a[14];\r\n        out[12] = a[3];\r\n        out[13] = a[7];\r\n        out[14] = a[11];\r\n        out[15] = a[15];\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    let a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7];\r\n    let a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11];\r\n    let a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n\r\n    let b00 = a00 * a11 - a01 * a10;\r\n    let b01 = a00 * a12 - a02 * a10;\r\n    let b02 = a00 * a13 - a03 * a10;\r\n    let b03 = a01 * a12 - a02 * a11;\r\n    let b04 = a01 * a13 - a03 * a11;\r\n    let b05 = a02 * a13 - a03 * a12;\r\n    let b06 = a20 * a31 - a21 * a30;\r\n    let b07 = a20 * a32 - a22 * a30;\r\n    let b08 = a20 * a33 - a23 * a30;\r\n    let b09 = a21 * a32 - a22 * a31;\r\n    let b10 = a21 * a33 - a23 * a31;\r\n    let b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    if (!det) {\r\n        return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    let a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7];\r\n    let a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11];\r\n    let a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n\r\n    let b00 = a00 * a11 - a01 * a10;\r\n    let b01 = a00 * a12 - a02 * a10;\r\n    let b02 = a00 * a13 - a03 * a10;\r\n    let b03 = a01 * a12 - a02 * a11;\r\n    let b04 = a01 * a13 - a03 * a11;\r\n    let b05 = a02 * a13 - a03 * a12;\r\n    let b06 = a20 * a31 - a21 * a30;\r\n    let b07 = a20 * a32 - a22 * a30;\r\n    let b08 = a20 * a33 - a23 * a30;\r\n    let b09 = a21 * a32 - a22 * a31;\r\n    let b10 = a21 * a33 - a23 * a31;\r\n    let b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    let a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7];\r\n    let a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11];\r\n    let a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n\r\n    // Cache only the current line of the second matrix\r\n    let b0 = b[0],\r\n        b1 = b[1],\r\n        b2 = b[2],\r\n        b3 = b[3];\r\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[4];\r\n    b1 = b[5];\r\n    b2 = b[6];\r\n    b3 = b[7];\r\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[8];\r\n    b1 = b[9];\r\n    b2 = b[10];\r\n    b3 = b[11];\r\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n    b0 = b[12];\r\n    b1 = b[13];\r\n    b2 = b[14];\r\n    b3 = b[15];\r\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n    let x = v[0],\r\n        y = v[1],\r\n        z = v[2];\r\n    let a00, a01, a02, a03;\r\n    let a10, a11, a12, a13;\r\n    let a20, a21, a22, a23;\r\n\r\n    if (a === out) {\r\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n    } else {\r\n        a00 = a[0];\r\n        a01 = a[1];\r\n        a02 = a[2];\r\n        a03 = a[3];\r\n        a10 = a[4];\r\n        a11 = a[5];\r\n        a12 = a[6];\r\n        a13 = a[7];\r\n        a20 = a[8];\r\n        a21 = a[9];\r\n        a22 = a[10];\r\n        a23 = a[11];\r\n\r\n        out[0] = a00;\r\n        out[1] = a01;\r\n        out[2] = a02;\r\n        out[3] = a03;\r\n        out[4] = a10;\r\n        out[5] = a11;\r\n        out[6] = a12;\r\n        out[7] = a13;\r\n        out[8] = a20;\r\n        out[9] = a21;\r\n        out[10] = a22;\r\n        out[11] = a23;\r\n\r\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n    let x = v[0],\r\n        y = v[1],\r\n        z = v[2];\r\n\r\n    out[0] = a[0] * x;\r\n    out[1] = a[1] * x;\r\n    out[2] = a[2] * x;\r\n    out[3] = a[3] * x;\r\n    out[4] = a[4] * y;\r\n    out[5] = a[5] * y;\r\n    out[6] = a[6] * y;\r\n    out[7] = a[7] * y;\r\n    out[8] = a[8] * z;\r\n    out[9] = a[9] * z;\r\n    out[10] = a[10] * z;\r\n    out[11] = a[11] * z;\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n    let x = axis[0],\r\n        y = axis[1],\r\n        z = axis[2];\r\n    let len = Math.hypot(x, y, z);\r\n    let s, c, t;\r\n    let a00, a01, a02, a03;\r\n    let a10, a11, a12, a13;\r\n    let a20, a21, a22, a23;\r\n    let b00, b01, b02;\r\n    let b10, b11, b12;\r\n    let b20, b21, b22;\r\n\r\n    if (Math.abs(len) < EPSILON) {\r\n        return null;\r\n    }\r\n\r\n    len = 1 / len;\r\n    x *= len;\r\n    y *= len;\r\n    z *= len;\r\n\r\n    s = Math.sin(rad);\r\n    c = Math.cos(rad);\r\n    t = 1 - c;\r\n\r\n    a00 = a[0];\r\n    a01 = a[1];\r\n    a02 = a[2];\r\n    a03 = a[3];\r\n    a10 = a[4];\r\n    a11 = a[5];\r\n    a12 = a[6];\r\n    a13 = a[7];\r\n    a20 = a[8];\r\n    a21 = a[9];\r\n    a22 = a[10];\r\n    a23 = a[11];\r\n\r\n    // Construct the elements of the rotation matrix\r\n    b00 = x * x * t + c;\r\n    b01 = y * x * t + z * s;\r\n    b02 = z * x * t - y * s;\r\n    b10 = x * y * t - z * s;\r\n    b11 = y * y * t + c;\r\n    b12 = z * y * t + x * s;\r\n    b20 = x * z * t + y * s;\r\n    b21 = y * z * t - x * s;\r\n    b22 = z * z * t + c;\r\n\r\n    // Perform rotation-specific matrix multiplication\r\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n    if (a !== out) {\r\n        // If the source and destination differ, copy the unchanged last row\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n    out[0] = mat[12];\r\n    out[1] = mat[13];\r\n    out[2] = mat[14];\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n    let m11 = mat[0];\r\n    let m12 = mat[1];\r\n    let m13 = mat[2];\r\n    let m21 = mat[4];\r\n    let m22 = mat[5];\r\n    let m23 = mat[6];\r\n    let m31 = mat[8];\r\n    let m32 = mat[9];\r\n    let m33 = mat[10];\r\n\r\n    out[0] = Math.hypot(m11, m12, m13);\r\n    out[1] = Math.hypot(m21, m22, m23);\r\n    out[2] = Math.hypot(m31, m32, m33);\r\n\r\n    return out;\r\n}\r\n\r\nexport function getMaxScaleOnAxis(mat) {\r\n    let m11 = mat[0];\r\n    let m12 = mat[1];\r\n    let m13 = mat[2];\r\n    let m21 = mat[4];\r\n    let m22 = mat[5];\r\n    let m23 = mat[6];\r\n    let m31 = mat[8];\r\n    let m32 = mat[9];\r\n    let m33 = mat[10];\r\n\r\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\r\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\r\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\r\n\r\n    return Math.sqrt(Math.max(x, y, z));\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport const getRotation = (function () {\r\n    const temp = [0, 0, 0];\r\n\r\n    return function (out, mat) {\r\n        let scaling = temp;\r\n        getScaling(scaling, mat);\r\n\r\n        let is1 = 1 / scaling[0];\r\n        let is2 = 1 / scaling[1];\r\n        let is3 = 1 / scaling[2];\r\n\r\n        let sm11 = mat[0] * is1;\r\n        let sm12 = mat[1] * is2;\r\n        let sm13 = mat[2] * is3;\r\n        let sm21 = mat[4] * is1;\r\n        let sm22 = mat[5] * is2;\r\n        let sm23 = mat[6] * is3;\r\n        let sm31 = mat[8] * is1;\r\n        let sm32 = mat[9] * is2;\r\n        let sm33 = mat[10] * is3;\r\n\r\n        let trace = sm11 + sm22 + sm33;\r\n        let S = 0;\r\n\r\n        if (trace > 0) {\r\n            S = Math.sqrt(trace + 1.0) * 2;\r\n            out[3] = 0.25 * S;\r\n            out[0] = (sm23 - sm32) / S;\r\n            out[1] = (sm31 - sm13) / S;\r\n            out[2] = (sm12 - sm21) / S;\r\n        } else if (sm11 > sm22 && sm11 > sm33) {\r\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\r\n            out[3] = (sm23 - sm32) / S;\r\n            out[0] = 0.25 * S;\r\n            out[1] = (sm12 + sm21) / S;\r\n            out[2] = (sm31 + sm13) / S;\r\n        } else if (sm22 > sm33) {\r\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\r\n            out[3] = (sm31 - sm13) / S;\r\n            out[0] = (sm12 + sm21) / S;\r\n            out[1] = 0.25 * S;\r\n            out[2] = (sm23 + sm32) / S;\r\n        } else {\r\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\r\n            out[3] = (sm12 - sm21) / S;\r\n            out[0] = (sm31 + sm13) / S;\r\n            out[1] = (sm23 + sm32) / S;\r\n            out[2] = 0.25 * S;\r\n        }\r\n\r\n        return out;\r\n    };\r\n})();\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n    // Quaternion math\r\n    let x = q[0],\r\n        y = q[1],\r\n        z = q[2],\r\n        w = q[3];\r\n    let x2 = x + x;\r\n    let y2 = y + y;\r\n    let z2 = z + z;\r\n\r\n    let xx = x * x2;\r\n    let xy = x * y2;\r\n    let xz = x * z2;\r\n    let yy = y * y2;\r\n    let yz = y * z2;\r\n    let zz = z * z2;\r\n    let wx = w * x2;\r\n    let wy = w * y2;\r\n    let wz = w * z2;\r\n    let sx = s[0];\r\n    let sy = s[1];\r\n    let sz = s[2];\r\n\r\n    out[0] = (1 - (yy + zz)) * sx;\r\n    out[1] = (xy + wz) * sx;\r\n    out[2] = (xz - wy) * sx;\r\n    out[3] = 0;\r\n    out[4] = (xy - wz) * sy;\r\n    out[5] = (1 - (xx + zz)) * sy;\r\n    out[6] = (yz + wx) * sy;\r\n    out[7] = 0;\r\n    out[8] = (xz + wy) * sz;\r\n    out[9] = (yz - wx) * sz;\r\n    out[10] = (1 - (xx + yy)) * sz;\r\n    out[11] = 0;\r\n    out[12] = v[0];\r\n    out[13] = v[1];\r\n    out[14] = v[2];\r\n    out[15] = 1;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n    let x = q[0],\r\n        y = q[1],\r\n        z = q[2],\r\n        w = q[3];\r\n    let x2 = x + x;\r\n    let y2 = y + y;\r\n    let z2 = z + z;\r\n\r\n    let xx = x * x2;\r\n    let yx = y * x2;\r\n    let yy = y * y2;\r\n    let zx = z * x2;\r\n    let zy = z * y2;\r\n    let zz = z * z2;\r\n    let wx = w * x2;\r\n    let wy = w * y2;\r\n    let wz = w * z2;\r\n\r\n    out[0] = 1 - yy - zz;\r\n    out[1] = yx + wz;\r\n    out[2] = zx - wy;\r\n    out[3] = 0;\r\n\r\n    out[4] = yx - wz;\r\n    out[5] = 1 - xx - zz;\r\n    out[6] = zy + wx;\r\n    out[7] = 0;\r\n\r\n    out[8] = zx + wy;\r\n    out[9] = zy - wx;\r\n    out[10] = 1 - xx - yy;\r\n    out[11] = 0;\r\n\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n    out[15] = 1;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n    let f = 1.0 / Math.tan(fovy / 2);\r\n    let nf = 1 / (near - far);\r\n    out[0] = f / aspect;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = f;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = (far + near) * nf;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 2 * far * near * nf;\r\n    out[15] = 0;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n    let lr = 1 / (left - right);\r\n    let bt = 1 / (bottom - top);\r\n    let nf = 1 / (near - far);\r\n    out[0] = -2 * lr;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = -2 * bt;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[10] = 2 * nf;\r\n    out[11] = 0;\r\n    out[12] = (left + right) * lr;\r\n    out[13] = (top + bottom) * bt;\r\n    out[14] = (far + near) * nf;\r\n    out[15] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} target Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n    let eyex = eye[0],\r\n        eyey = eye[1],\r\n        eyez = eye[2],\r\n        upx = up[0],\r\n        upy = up[1],\r\n        upz = up[2];\r\n\r\n    let z0 = eyex - target[0],\r\n        z1 = eyey - target[1],\r\n        z2 = eyez - target[2];\r\n\r\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\r\n    if (len === 0) {\r\n        // eye and target are in the same position\r\n        z2 = 1;\r\n    } else {\r\n        len = 1 / Math.sqrt(len);\r\n        z0 *= len;\r\n        z1 *= len;\r\n        z2 *= len;\r\n    }\r\n\r\n    let x0 = upy * z2 - upz * z1,\r\n        x1 = upz * z0 - upx * z2,\r\n        x2 = upx * z1 - upy * z0;\r\n\r\n    len = x0 * x0 + x1 * x1 + x2 * x2;\r\n    if (len === 0) {\r\n        // up and z are parallel\r\n        if (upz) {\r\n            upx += 1e-6;\r\n        } else if (upy) {\r\n            upz += 1e-6;\r\n        } else {\r\n            upy += 1e-6;\r\n        }\r\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\r\n\r\n        len = x0 * x0 + x1 * x1 + x2 * x2;\r\n    }\r\n\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n\r\n    out[0] = x0;\r\n    out[1] = x1;\r\n    out[2] = x2;\r\n    out[3] = 0;\r\n    out[4] = z1 * x2 - z2 * x1;\r\n    out[5] = z2 * x0 - z0 * x2;\r\n    out[6] = z0 * x1 - z1 * x0;\r\n    out[7] = 0;\r\n    out[8] = z0;\r\n    out[9] = z1;\r\n    out[10] = z2;\r\n    out[11] = 0;\r\n    out[12] = eyex;\r\n    out[13] = eyey;\r\n    out[14] = eyez;\r\n    out[15] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    out[4] = a[4] + b[4];\r\n    out[5] = a[5] + b[5];\r\n    out[6] = a[6] + b[6];\r\n    out[7] = a[7] + b[7];\r\n    out[8] = a[8] + b[8];\r\n    out[9] = a[9] + b[9];\r\n    out[10] = a[10] + b[10];\r\n    out[11] = a[11] + b[11];\r\n    out[12] = a[12] + b[12];\r\n    out[13] = a[13] + b[13];\r\n    out[14] = a[14] + b[14];\r\n    out[15] = a[15] + b[15];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    out[4] = a[4] - b[4];\r\n    out[5] = a[5] - b[5];\r\n    out[6] = a[6] - b[6];\r\n    out[7] = a[7] - b[7];\r\n    out[8] = a[8] - b[8];\r\n    out[9] = a[9] - b[9];\r\n    out[10] = a[10] - b[10];\r\n    out[11] = a[11] - b[11];\r\n    out[12] = a[12] - b[12];\r\n    out[13] = a[13] - b[13];\r\n    out[14] = a[14] - b[14];\r\n    out[15] = a[15] - b[15];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    out[4] = a[4] * b;\r\n    out[5] = a[5] * b;\r\n    out[6] = a[6] * b;\r\n    out[7] = a[7] * b;\r\n    out[8] = a[8] * b;\r\n    out[9] = a[9] * b;\r\n    out[10] = a[10] * b;\r\n    out[11] = a[11] * b;\r\n    out[12] = a[12] * b;\r\n    out[13] = a[13] * b;\r\n    out[14] = a[14] * b;\r\n    out[15] = a[15] * b;\r\n    return out;\r\n}\r\n","import * as Mat4Func from './functions/Mat4Func.js';\r\n\r\nexport class Mat4 extends Array {\r\n    constructor(\r\n        m00 = 1,\r\n        m01 = 0,\r\n        m02 = 0,\r\n        m03 = 0,\r\n        m10 = 0,\r\n        m11 = 1,\r\n        m12 = 0,\r\n        m13 = 0,\r\n        m20 = 0,\r\n        m21 = 0,\r\n        m22 = 1,\r\n        m23 = 0,\r\n        m30 = 0,\r\n        m31 = 0,\r\n        m32 = 0,\r\n        m33 = 1\r\n    ) {\r\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[12];\r\n    }\r\n\r\n    get y() {\r\n        return this[13];\r\n    }\r\n\r\n    get z() {\r\n        return this[14];\r\n    }\r\n\r\n    get w() {\r\n        return this[15];\r\n    }\r\n\r\n    set x(v) {\r\n        this[12] = v;\r\n    }\r\n\r\n    set y(v) {\r\n        this[13] = v;\r\n    }\r\n\r\n    set z(v) {\r\n        this[14] = v;\r\n    }\r\n\r\n    set w(v) {\r\n        this[15] = v;\r\n    }\r\n\r\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n        if (m00.length) return this.copy(m00);\r\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\r\n        return this;\r\n    }\r\n\r\n    translate(v, m = this) {\r\n        Mat4Func.translate(this, m, v);\r\n        return this;\r\n    }\r\n\r\n    rotate(v, axis, m = this) {\r\n        Mat4Func.rotate(this, m, v, axis);\r\n        return this;\r\n    }\r\n\r\n    scale(v, m = this) {\r\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\r\n        return this;\r\n    }\r\n\r\n    multiply(ma, mb) {\r\n        if (mb) {\r\n            Mat4Func.multiply(this, ma, mb);\r\n        } else {\r\n            Mat4Func.multiply(this, this, ma);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    identity() {\r\n        Mat4Func.identity(this);\r\n        return this;\r\n    }\r\n\r\n    copy(m) {\r\n        Mat4Func.copy(this, m);\r\n        return this;\r\n    }\r\n\r\n    fromPerspective({ fov, aspect, near, far } = {}) {\r\n        Mat4Func.perspective(this, fov, aspect, near, far);\r\n        return this;\r\n    }\r\n\r\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\r\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\r\n        return this;\r\n    }\r\n\r\n    fromQuaternion(q) {\r\n        Mat4Func.fromQuat(this, q);\r\n        return this;\r\n    }\r\n\r\n    setPosition(v) {\r\n        this.x = v[0];\r\n        this.y = v[1];\r\n        this.z = v[2];\r\n        return this;\r\n    }\r\n\r\n    inverse(m = this) {\r\n        Mat4Func.invert(this, m);\r\n        return this;\r\n    }\r\n\r\n    compose(q, pos, scale) {\r\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\r\n        return this;\r\n    }\r\n\r\n    getRotation(q) {\r\n        Mat4Func.getRotation(q, this);\r\n        return this;\r\n    }\r\n\r\n    getTranslation(pos) {\r\n        Mat4Func.getTranslation(pos, this);\r\n        return this;\r\n    }\r\n\r\n    getScaling(scale) {\r\n        Mat4Func.getScaling(scale, this);\r\n        return this;\r\n    }\r\n\r\n    getMaxScaleOnAxis() {\r\n        return Mat4Func.getMaxScaleOnAxis(this);\r\n    }\r\n\r\n    lookAt(eye, target, up) {\r\n        Mat4Func.targetTo(this, eye, target, up);\r\n        return this;\r\n    }\r\n\r\n    determinant() {\r\n        return Mat4Func.determinant(this);\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        this[2] = a[o + 2];\r\n        this[3] = a[o + 3];\r\n        this[4] = a[o + 4];\r\n        this[5] = a[o + 5];\r\n        this[6] = a[o + 6];\r\n        this[7] = a[o + 7];\r\n        this[8] = a[o + 8];\r\n        this[9] = a[o + 9];\r\n        this[10] = a[o + 10];\r\n        this[11] = a[o + 11];\r\n        this[12] = a[o + 12];\r\n        this[13] = a[o + 13];\r\n        this[14] = a[o + 14];\r\n        this[15] = a[o + 15];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        a[o + 2] = this[2];\r\n        a[o + 3] = this[3];\r\n        a[o + 4] = this[4];\r\n        a[o + 5] = this[5];\r\n        a[o + 6] = this[6];\r\n        a[o + 7] = this[7];\r\n        a[o + 8] = this[8];\r\n        a[o + 9] = this[9];\r\n        a[o + 10] = this[10];\r\n        a[o + 11] = this[11];\r\n        a[o + 12] = this[12];\r\n        a[o + 13] = this[13];\r\n        a[o + 14] = this[14];\r\n        a[o + 15] = this[15];\r\n        return a;\r\n    }\r\n}\r\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\r\n    if (order === 'XYZ') {\r\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\r\n        if (Math.abs(m[8]) < 0.99999) {\r\n            out[0] = Math.atan2(-m[9], m[10]);\r\n            out[2] = Math.atan2(-m[4], m[0]);\r\n        } else {\r\n            out[0] = Math.atan2(m[6], m[5]);\r\n            out[2] = 0;\r\n        }\r\n    } else if (order === 'YXZ') {\r\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\r\n        if (Math.abs(m[9]) < 0.99999) {\r\n            out[1] = Math.atan2(m[8], m[10]);\r\n            out[2] = Math.atan2(m[1], m[5]);\r\n        } else {\r\n            out[1] = Math.atan2(-m[2], m[0]);\r\n            out[2] = 0;\r\n        }\r\n    } else if (order === 'ZXY') {\r\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\r\n        if (Math.abs(m[6]) < 0.99999) {\r\n            out[1] = Math.atan2(-m[2], m[10]);\r\n            out[2] = Math.atan2(-m[4], m[5]);\r\n        } else {\r\n            out[1] = 0;\r\n            out[2] = Math.atan2(m[1], m[0]);\r\n        }\r\n    } else if (order === 'ZYX') {\r\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\r\n        if (Math.abs(m[2]) < 0.99999) {\r\n            out[0] = Math.atan2(m[6], m[10]);\r\n            out[2] = Math.atan2(m[1], m[0]);\r\n        } else {\r\n            out[0] = 0;\r\n            out[2] = Math.atan2(-m[4], m[5]);\r\n        }\r\n    } else if (order === 'YZX') {\r\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\r\n        if (Math.abs(m[1]) < 0.99999) {\r\n            out[0] = Math.atan2(-m[9], m[5]);\r\n            out[1] = Math.atan2(-m[2], m[0]);\r\n        } else {\r\n            out[0] = 0;\r\n            out[1] = Math.atan2(m[8], m[10]);\r\n        }\r\n    } else if (order === 'XZY') {\r\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\r\n        if (Math.abs(m[4]) < 0.99999) {\r\n            out[0] = Math.atan2(m[6], m[5]);\r\n            out[1] = Math.atan2(m[8], m[0]);\r\n        } else {\r\n            out[0] = Math.atan2(-m[9], m[10]);\r\n            out[1] = 0;\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\n","import * as EulerFunc from './functions/EulerFunc.js';\r\nimport { Mat4 } from './Mat4.js';\r\n\r\nconst tmpMat4 = new Mat4();\r\n\r\nexport class Euler extends Array {\r\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\r\n        super(x, y, z);\r\n        this.order = order;\r\n        this.onChange = () => {};\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    get z() {\r\n        return this[2];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set z(v) {\r\n        this[2] = v;\r\n        this.onChange();\r\n    }\r\n\r\n    set(x, y = x, z = x) {\r\n        if (x.length) return this.copy(x);\r\n        this[0] = x;\r\n        this[1] = y;\r\n        this[2] = z;\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    copy(v) {\r\n        this[0] = v[0];\r\n        this[1] = v[1];\r\n        this[2] = v[2];\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    reorder(order) {\r\n        this.order = order;\r\n        this.onChange();\r\n        return this;\r\n    }\r\n\r\n    fromRotationMatrix(m, order = this.order) {\r\n        EulerFunc.fromRotationMatrix(this, m, order);\r\n        return this;\r\n    }\r\n\r\n    fromQuaternion(q, order = this.order) {\r\n        tmpMat4.fromQuaternion(q);\r\n        return this.fromRotationMatrix(tmpMat4, order);\r\n    }\r\n}\r\n","import { Vec3 } from '../math/Vec3.js';\r\nimport { Quat } from '../math/Quat.js';\r\nimport { Mat4 } from '../math/Mat4.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nexport class Transform {\r\n    constructor() {\r\n        this.parent = null;\r\n        this.children = [];\r\n        this.visible = true;\r\n\r\n        this.matrix = new Mat4();\r\n        this.worldMatrix = new Mat4();\r\n        this.matrixAutoUpdate = true;\r\n\r\n        this.position = new Vec3();\r\n        this.quaternion = new Quat();\r\n        this.scale = new Vec3(1);\r\n        this.rotation = new Euler();\r\n        this.up = new Vec3(0, 1, 0);\r\n\r\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\r\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\r\n    }\r\n\r\n    setParent(parent, notifyParent = true) {\r\n        if (notifyParent && this.parent && parent !== this.parent) this.parent.removeChild(this, false);\r\n        this.parent = parent;\r\n        if (notifyParent && parent) parent.addChild(this, false);\r\n    }\r\n\r\n    addChild(child, notifyChild = true) {\r\n        if (!~this.children.indexOf(child)) this.children.push(child);\r\n        if (notifyChild) child.setParent(this, false);\r\n    }\r\n\r\n    removeChild(child, notifyChild = true) {\r\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\r\n        if (notifyChild) child.setParent(null, false);\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n        if (this.matrixAutoUpdate) this.updateMatrix();\r\n        if (this.worldMatrixNeedsUpdate || force) {\r\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\r\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\r\n            this.worldMatrixNeedsUpdate = false;\r\n            force = true;\r\n        }\r\n\r\n        for (let i = 0, l = this.children.length; i < l; i++) {\r\n            this.children[i].updateMatrixWorld(force);\r\n        }\r\n    }\r\n\r\n    updateMatrix() {\r\n        this.matrix.compose(this.quaternion, this.position, this.scale);\r\n        this.worldMatrixNeedsUpdate = true;\r\n    }\r\n\r\n    traverse(callback) {\r\n        // Return true in callback to stop traversing children\r\n        if (callback(this)) return;\r\n        for (let i = 0, l = this.children.length; i < l; i++) {\r\n            this.children[i].traverse(callback);\r\n        }\r\n    }\r\n\r\n    decompose() {\r\n        this.matrix.getTranslation(this.position);\r\n        this.matrix.getRotation(this.quaternion);\r\n        this.matrix.getScaling(this.scale);\r\n        this.rotation.fromQuaternion(this.quaternion);\r\n    }\r\n\r\n    lookAt(target, invert = false) {\r\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\r\n        else this.matrix.lookAt(target, this.position, this.up);\r\n        this.matrix.getRotation(this.quaternion);\r\n        this.rotation.fromQuaternion(this.quaternion);\r\n    }\r\n}\r\n","import { Transform } from './Transform.js';\r\nimport { Mat4 } from '../math/Mat4.js';\r\nimport { Vec3 } from '../math/Vec3.js';\r\n\r\nconst tempMat4 = new Mat4();\r\nconst tempVec3a = new Vec3();\r\nconst tempVec3b = new Vec3();\r\n\r\nexport class Camera extends Transform {\r\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\r\n        super();\r\n\r\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\r\n\r\n        this.projectionMatrix = new Mat4();\r\n        this.viewMatrix = new Mat4();\r\n        this.projectionViewMatrix = new Mat4();\r\n        this.worldPosition = new Vec3();\r\n\r\n        // Use orthographic if left/right set, else default to perspective camera\r\n        this.type = left || right ? 'orthographic' : 'perspective';\r\n\r\n        if (this.type === 'orthographic') this.orthographic();\r\n        else this.perspective();\r\n    }\r\n\r\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\r\n        Object.assign(this, { near, far, fov, aspect });\r\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\r\n        this.type = 'perspective';\r\n        return this;\r\n    }\r\n\r\n    orthographic({\r\n        near = this.near,\r\n        far = this.far,\r\n        left = this.left,\r\n        right = this.right,\r\n        bottom = this.bottom,\r\n        top = this.top,\r\n        zoom = this.zoom,\r\n    } = {}) {\r\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\r\n        left /= zoom;\r\n        right /= zoom;\r\n        bottom /= zoom;\r\n        top /= zoom;\r\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\r\n        this.type = 'orthographic';\r\n        return this;\r\n    }\r\n\r\n    updateMatrixWorld() {\r\n        super.updateMatrixWorld();\r\n        this.viewMatrix.inverse(this.worldMatrix);\r\n        this.worldMatrix.getTranslation(this.worldPosition);\r\n\r\n        // used for sorting\r\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\r\n        return this;\r\n    }\r\n\r\n    lookAt(target) {\r\n        super.lookAt(target, true);\r\n        return this;\r\n    }\r\n\r\n    // Project 3D coordinate to 2D point\r\n    project(v) {\r\n        v.applyMatrix4(this.viewMatrix);\r\n        v.applyMatrix4(this.projectionMatrix);\r\n        return this;\r\n    }\r\n\r\n    // Unproject 2D point to 3D coordinate\r\n    unproject(v) {\r\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\r\n        v.applyMatrix4(this.worldMatrix);\r\n        return this;\r\n    }\r\n\r\n    updateFrustum() {\r\n        if (!this.frustum) {\r\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\r\n        }\r\n\r\n        const m = this.projectionViewMatrix;\r\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\r\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\r\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\r\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\r\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\r\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            const invLen = 1.0 / this.frustum[i].distance();\r\n            this.frustum[i].multiply(invLen);\r\n            this.frustum[i].constant *= invLen;\r\n        }\r\n    }\r\n\r\n    frustumIntersectsMesh(node) {\r\n        // If no position attribute, treat as frustumCulled false\r\n        if (!node.geometry.attributes.position) return true;\r\n\r\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\r\n\r\n        if (!node.geometry.bounds) return true;\r\n\r\n        const center = tempVec3a;\r\n        center.copy(node.geometry.bounds.center);\r\n        center.applyMatrix4(node.worldMatrix);\r\n\r\n        const radius = node.geometry.bounds.radius * node.worldMatrix.getMaxScaleOnAxis();\r\n\r\n        return this.frustumIntersectsSphere(center, radius);\r\n    }\r\n\r\n    frustumIntersectsSphere(center, radius) {\r\n        const normal = tempVec3b;\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            const plane = this.frustum[i];\r\n            const distance = normal.copy(plane).dot(center) + plane.constant;\r\n            if (distance < -radius) return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nexport function set(out, x, y) {\r\n    out[0] = x;\r\n    out[1] = y;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    out[0] = a[0] * b[0];\r\n    out[1] = a[1] * b[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function divide(out, a, b) {\r\n    out[0] = a[0] / b[0];\r\n    out[1] = a[1] / b[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nexport function scale(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n    var x = b[0] - a[0],\r\n        y = b[1] - a[1];\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n    var x = b[0] - a[0],\r\n        y = b[1] - a[1];\r\n    return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nexport function negate(out, a) {\r\n    out[0] = -a[0];\r\n    out[1] = -a[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nexport function inverse(out, a) {\r\n    out[0] = 1.0 / a[0];\r\n    out[1] = 1.0 / a[1];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nexport function normalize(out, a) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    var len = x * x + y * y;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n    }\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product returns a scalar\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} cross product of a and b\r\n */\r\nexport function cross(a, b) {\r\n    return a[0] * b[1] - a[1] * b[0];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n    var ax = a[0],\r\n        ay = a[1];\r\n    out[0] = ax + t * (b[0] - ax);\r\n    out[1] = ay + t * (b[1] - ay);\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[2] * y;\r\n    out[1] = m[1] * x + m[3] * y;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2d(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[2] * y + m[4];\r\n    out[1] = m[1] * x + m[3] * y + m[5];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n    var x = a[0],\r\n        y = a[1];\r\n    out[0] = m[0] * x + m[3] * y + m[6];\r\n    out[1] = m[1] * x + m[4] * y + m[7];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n    let x = a[0];\r\n    let y = a[1];\r\n    out[0] = m[0] * x + m[4] * y + m[12];\r\n    out[1] = m[1] * x + m[5] * y + m[13];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n    return a[0] === b[0] && a[1] === b[1];\r\n}\r\n","import * as Vec2Func from './functions/Vec2Func.js';\r\n\r\nexport class Vec2 extends Array {\r\n    constructor(x = 0, y = x) {\r\n        super(x, y);\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this[0];\r\n    }\r\n\r\n    get y() {\r\n        return this[1];\r\n    }\r\n\r\n    set x(v) {\r\n        this[0] = v;\r\n    }\r\n\r\n    set y(v) {\r\n        this[1] = v;\r\n    }\r\n\r\n    set(x, y = x) {\r\n        if (x.length) return this.copy(x);\r\n        Vec2Func.set(this, x, y);\r\n        return this;\r\n    }\r\n\r\n    copy(v) {\r\n        Vec2Func.copy(this, v);\r\n        return this;\r\n    }\r\n\r\n    add(va, vb) {\r\n        if (vb) Vec2Func.add(this, va, vb);\r\n        else Vec2Func.add(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    sub(va, vb) {\r\n        if (vb) Vec2Func.subtract(this, va, vb);\r\n        else Vec2Func.subtract(this, this, va);\r\n        return this;\r\n    }\r\n\r\n    multiply(v) {\r\n        if (v.length) Vec2Func.multiply(this, this, v);\r\n        else Vec2Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    divide(v) {\r\n        if (v.length) Vec2Func.divide(this, this, v);\r\n        else Vec2Func.scale(this, this, 1 / v);\r\n        return this;\r\n    }\r\n\r\n    inverse(v = this) {\r\n        Vec2Func.inverse(this, v);\r\n        return this;\r\n    }\r\n\r\n    // Can't use 'length' as Array.prototype uses it\r\n    len() {\r\n        return Vec2Func.length(this);\r\n    }\r\n\r\n    distance(v) {\r\n        if (v) return Vec2Func.distance(this, v);\r\n        else return Vec2Func.length(this);\r\n    }\r\n\r\n    squaredLen() {\r\n        return this.squaredDistance();\r\n    }\r\n\r\n    squaredDistance(v) {\r\n        if (v) return Vec2Func.squaredDistance(this, v);\r\n        else return Vec2Func.squaredLength(this);\r\n    }\r\n\r\n    negate(v = this) {\r\n        Vec2Func.negate(this, v);\r\n        return this;\r\n    }\r\n\r\n    cross(va, vb) {\r\n        if (vb) return Vec2Func.cross(va, vb);\r\n        return Vec2Func.cross(this, va);\r\n    }\r\n\r\n    scale(v) {\r\n        Vec2Func.scale(this, this, v);\r\n        return this;\r\n    }\r\n\r\n    normalize() {\r\n        Vec2Func.normalize(this, this);\r\n        return this;\r\n    }\r\n\r\n    dot(v) {\r\n        return Vec2Func.dot(this, v);\r\n    }\r\n\r\n    equals(v) {\r\n        return Vec2Func.exactEquals(this, v);\r\n    }\r\n\r\n    applyMatrix3(mat3) {\r\n        Vec2Func.transformMat3(this, this, mat3);\r\n        return this;\r\n    }\r\n\r\n    applyMatrix4(mat4) {\r\n        Vec2Func.transformMat4(this, this, mat4);\r\n        return this;\r\n    }\r\n\r\n    lerp(v, a) {\r\n        Vec2Func.lerp(this, this, v, a);\r\n    }\r\n\r\n    clone() {\r\n        return new Vec2(this[0], this[1]);\r\n    }\r\n\r\n    fromArray(a, o = 0) {\r\n        this[0] = a[o];\r\n        this[1] = a[o + 1];\r\n        return this;\r\n    }\r\n\r\n    toArray(a = [], o = 0) {\r\n        a[o] = this[0];\r\n        a[o + 1] = this[1];\r\n        return a;\r\n    }\r\n}\r\n","// Based from ThreeJS' OrbitControls class, rewritten using es6 with some additions and subtractions.\r\n// TODO: abstract event handlers so can be fed from other sources\r\n// TODO: make scroll zoom more accurate than just >/< zero\r\n// TODO: be able to pass in new camera position\r\n\r\nimport { Vec3 } from '../math/Vec3.js';\r\nimport { Vec2 } from '../math/Vec2.js';\r\n\r\nconst STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, DOLLY_PAN: 3 };\r\nconst tempVec3 = new Vec3();\r\nconst tempVec2a = new Vec2();\r\nconst tempVec2b = new Vec2();\r\n\r\nexport function Orbit(\r\n    object,\r\n    {\r\n        element = document,\r\n        enabled = true,\r\n        target = new Vec3(),\r\n        ease = 0.25,\r\n        inertia = 0.85,\r\n        enableRotate = true,\r\n        rotateSpeed = 0.1,\r\n        autoRotate = false,\r\n        autoRotateSpeed = 1.0,\r\n        enableZoom = true,\r\n        zoomSpeed = 1,\r\n        enablePan = true,\r\n        panSpeed = 0.1,\r\n        minPolarAngle = 0,\r\n        maxPolarAngle = Math.PI,\r\n        minAzimuthAngle = -Infinity,\r\n        maxAzimuthAngle = Infinity,\r\n        minDistance = 0,\r\n        maxDistance = Infinity,\r\n    } = {}\r\n) {\r\n    this.enabled = enabled;\r\n    this.target = target;\r\n\r\n    // Catch attempts to disable - set to 1 so has no effect\r\n    ease = ease || 1;\r\n    inertia = inertia || 0;\r\n\r\n    this.minDistance = minDistance;\r\n    this.maxDistance = maxDistance;\r\n\r\n    // current position in sphericalTarget coordinates\r\n    const sphericalDelta = { radius: 1, phi: 0, theta: 0 };\r\n    const sphericalTarget = { radius: 1, phi: 0, theta: 0 };\r\n    const spherical = { radius: 1, phi: 0, theta: 0 };\r\n    const panDelta = new Vec3();\r\n\r\n    // Grab initial position values\r\n    const offset = new Vec3();\r\n    offset.copy(object.position).sub(this.target);\r\n    spherical.radius = sphericalTarget.radius = offset.distance();\r\n    spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\r\n    spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\r\n\r\n    this.offset = offset;\r\n\r\n    this.update = () => {\r\n        if (autoRotate) {\r\n            handleAutoRotate();\r\n        }\r\n\r\n        // apply delta\r\n        sphericalTarget.radius *= sphericalDelta.radius;\r\n        sphericalTarget.theta += sphericalDelta.theta;\r\n        sphericalTarget.phi += sphericalDelta.phi;\r\n\r\n        // apply boundaries\r\n        sphericalTarget.theta = Math.max(minAzimuthAngle, Math.min(maxAzimuthAngle, sphericalTarget.theta));\r\n        sphericalTarget.phi = Math.max(minPolarAngle, Math.min(maxPolarAngle, sphericalTarget.phi));\r\n        sphericalTarget.radius = Math.max(this.minDistance, Math.min(this.maxDistance, sphericalTarget.radius));\r\n\r\n        // ease values\r\n        spherical.phi += (sphericalTarget.phi - spherical.phi) * ease;\r\n        spherical.theta += (sphericalTarget.theta - spherical.theta) * ease;\r\n        spherical.radius += (sphericalTarget.radius - spherical.radius) * ease;\r\n\r\n        // apply pan to target. As offset is relative to target, it also shifts\r\n        this.target.add(panDelta);\r\n\r\n        // apply rotation to offset\r\n        let sinPhiRadius = spherical.radius * Math.sin(Math.max(0.000001, spherical.phi));\r\n        offset.x = sinPhiRadius * Math.sin(spherical.theta);\r\n        offset.y = spherical.radius * Math.cos(spherical.phi);\r\n        offset.z = sinPhiRadius * Math.cos(spherical.theta);\r\n\r\n        // Apply updated values to object\r\n        object.position.copy(this.target).add(offset);\r\n        object.lookAt(this.target);\r\n\r\n        // Apply inertia to values\r\n        sphericalDelta.theta *= inertia;\r\n        sphericalDelta.phi *= inertia;\r\n        panDelta.multiply(inertia);\r\n\r\n        // Reset scale every frame to avoid applying scale multiple times\r\n        sphericalDelta.radius = 1;\r\n    };\r\n\r\n    // Updates internals with new position\r\n    this.forcePosition = () => {\r\n        offset.copy(object.position).sub(this.target);\r\n        spherical.radius = sphericalTarget.radius = offset.distance();\r\n        spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\r\n        spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\r\n        object.lookAt(this.target);\r\n    };\r\n\r\n    // Everything below here just updates panDelta and sphericalDelta\r\n    // Using those two objects' values, the orbit is calculated\r\n\r\n    const rotateStart = new Vec2();\r\n    const panStart = new Vec2();\r\n    const dollyStart = new Vec2();\r\n\r\n    let state = STATE.NONE;\r\n    this.mouseButtons = { ORBIT: 0, ZOOM: 1, PAN: 2 };\r\n\r\n    function getZoomScale() {\r\n        return Math.pow(0.95, zoomSpeed);\r\n    }\r\n\r\n    function panLeft(distance, m) {\r\n        tempVec3.set(m[0], m[1], m[2]);\r\n        tempVec3.multiply(-distance);\r\n        panDelta.add(tempVec3);\r\n    }\r\n\r\n    function panUp(distance, m) {\r\n        tempVec3.set(m[4], m[5], m[6]);\r\n        tempVec3.multiply(distance);\r\n        panDelta.add(tempVec3);\r\n    }\r\n\r\n    const pan = (deltaX, deltaY) => {\r\n        let el = element === document ? document.body : element;\r\n        tempVec3.copy(object.position).sub(this.target);\r\n        let targetDistance = tempVec3.distance();\r\n        targetDistance *= Math.tan((((object.fov || 45) / 2) * Math.PI) / 180.0);\r\n        panLeft((2 * deltaX * targetDistance) / el.clientHeight, object.matrix);\r\n        panUp((2 * deltaY * targetDistance) / el.clientHeight, object.matrix);\r\n    };\r\n\r\n    function dolly(dollyScale) {\r\n        sphericalDelta.radius /= dollyScale;\r\n    }\r\n\r\n    function handleAutoRotate() {\r\n        const angle = ((2 * Math.PI) / 60 / 60) * autoRotateSpeed;\r\n        sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function handleMoveRotate(x, y) {\r\n        tempVec2a.set(x, y);\r\n        tempVec2b.sub(tempVec2a, rotateStart).multiply(rotateSpeed);\r\n        let el = element === document ? document.body : element;\r\n        sphericalDelta.theta -= (2 * Math.PI * tempVec2b.x) / el.clientHeight;\r\n        sphericalDelta.phi -= (2 * Math.PI * tempVec2b.y) / el.clientHeight;\r\n        rotateStart.copy(tempVec2a);\r\n    }\r\n\r\n    function handleMouseMoveDolly(e) {\r\n        tempVec2a.set(e.clientX, e.clientY);\r\n        tempVec2b.sub(tempVec2a, dollyStart);\r\n        if (tempVec2b.y > 0) {\r\n            dolly(getZoomScale());\r\n        } else if (tempVec2b.y < 0) {\r\n            dolly(1 / getZoomScale());\r\n        }\r\n        dollyStart.copy(tempVec2a);\r\n    }\r\n\r\n    function handleMovePan(x, y) {\r\n        tempVec2a.set(x, y);\r\n        tempVec2b.sub(tempVec2a, panStart).multiply(panSpeed);\r\n        pan(tempVec2b.x, tempVec2b.y);\r\n        panStart.copy(tempVec2a);\r\n    }\r\n\r\n    function handleTouchStartDollyPan(e) {\r\n        if (enableZoom) {\r\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\r\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\r\n            let distance = Math.sqrt(dx * dx + dy * dy);\r\n            dollyStart.set(0, distance);\r\n        }\r\n\r\n        if (enablePan) {\r\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\r\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\r\n            panStart.set(x, y);\r\n        }\r\n    }\r\n\r\n    function handleTouchMoveDollyPan(e) {\r\n        if (enableZoom) {\r\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\r\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\r\n            let distance = Math.sqrt(dx * dx + dy * dy);\r\n            tempVec2a.set(0, distance);\r\n            tempVec2b.set(0, Math.pow(tempVec2a.y / dollyStart.y, zoomSpeed));\r\n            dolly(tempVec2b.y);\r\n            dollyStart.copy(tempVec2a);\r\n        }\r\n\r\n        if (enablePan) {\r\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\r\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\r\n            handleMovePan(x, y);\r\n        }\r\n    }\r\n\r\n    const onMouseDown = (e) => {\r\n        if (!this.enabled) return;\r\n\r\n        switch (e.button) {\r\n            case this.mouseButtons.ORBIT:\r\n                if (enableRotate === false) return;\r\n                rotateStart.set(e.clientX, e.clientY);\r\n                state = STATE.ROTATE;\r\n                break;\r\n            case this.mouseButtons.ZOOM:\r\n                if (enableZoom === false) return;\r\n                dollyStart.set(e.clientX, e.clientY);\r\n                state = STATE.DOLLY;\r\n                break;\r\n            case this.mouseButtons.PAN:\r\n                if (enablePan === false) return;\r\n                panStart.set(e.clientX, e.clientY);\r\n                state = STATE.PAN;\r\n                break;\r\n        }\r\n\r\n        if (state !== STATE.NONE) {\r\n            window.addEventListener('mousemove', onMouseMove, false);\r\n            window.addEventListener('mouseup', onMouseUp, false);\r\n        }\r\n    };\r\n\r\n    const onMouseMove = (e) => {\r\n        if (!this.enabled) return;\r\n\r\n        switch (state) {\r\n            case STATE.ROTATE:\r\n                if (enableRotate === false) return;\r\n                handleMoveRotate(e.clientX, e.clientY);\r\n                break;\r\n            case STATE.DOLLY:\r\n                if (enableZoom === false) return;\r\n                handleMouseMoveDolly(e);\r\n                break;\r\n            case STATE.PAN:\r\n                if (enablePan === false) return;\r\n                handleMovePan(e.clientX, e.clientY);\r\n                break;\r\n        }\r\n    };\r\n\r\n    const onMouseUp = () => {\r\n        window.removeEventListener('mousemove', onMouseMove, false);\r\n        window.removeEventListener('mouseup', onMouseUp, false);\r\n        state = STATE.NONE;\r\n    };\r\n\r\n    const onMouseWheel = (e) => {\r\n        if (!this.enabled || !enableZoom || (state !== STATE.NONE && state !== STATE.ROTATE)) return;\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (e.deltaY < 0) {\r\n            dolly(1 / getZoomScale());\r\n        } else if (e.deltaY > 0) {\r\n            dolly(getZoomScale());\r\n        }\r\n    };\r\n\r\n    const onTouchStart = (e) => {\r\n        if (!this.enabled) return;\r\n        e.preventDefault();\r\n\r\n        switch (e.touches.length) {\r\n            case 1:\r\n                if (enableRotate === false) return;\r\n                rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);\r\n                state = STATE.ROTATE;\r\n                break;\r\n            case 2:\r\n                if (enableZoom === false && enablePan === false) return;\r\n                handleTouchStartDollyPan(e);\r\n                state = STATE.DOLLY_PAN;\r\n                break;\r\n            default:\r\n                state = STATE.NONE;\r\n        }\r\n    };\r\n\r\n    const onTouchMove = (e) => {\r\n        if (!this.enabled) return;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        switch (e.touches.length) {\r\n            case 1:\r\n                if (enableRotate === false) return;\r\n                handleMoveRotate(e.touches[0].pageX, e.touches[0].pageY);\r\n                break;\r\n            case 2:\r\n                if (enableZoom === false && enablePan === false) return;\r\n                handleTouchMoveDollyPan(e);\r\n                break;\r\n            default:\r\n                state = STATE.NONE;\r\n        }\r\n    };\r\n\r\n    const onTouchEnd = () => {\r\n        if (!this.enabled) return;\r\n        state = STATE.NONE;\r\n    };\r\n\r\n    const onContextMenu = (e) => {\r\n        if (!this.enabled) return;\r\n        e.preventDefault();\r\n    };\r\n\r\n    function addHandlers() {\r\n        element.addEventListener('contextmenu', onContextMenu, false);\r\n        element.addEventListener('mousedown', onMouseDown, false);\r\n        element.addEventListener('wheel', onMouseWheel, { passive: false });\r\n        element.addEventListener('touchstart', onTouchStart, { passive: false });\r\n        element.addEventListener('touchend', onTouchEnd, false);\r\n        element.addEventListener('touchmove', onTouchMove, { passive: false });\r\n    }\r\n\r\n    this.remove = function () {\r\n        element.removeEventListener('contextmenu', onContextMenu);\r\n        element.removeEventListener('mousedown', onMouseDown);\r\n        element.removeEventListener('wheel', onMouseWheel);\r\n        element.removeEventListener('touchstart', onTouchStart);\r\n        element.removeEventListener('touchend', onTouchEnd);\r\n        element.removeEventListener('touchmove', onTouchMove);\r\n        window.removeEventListener('mousemove', onMouseMove);\r\n        window.removeEventListener('mouseup', onMouseUp);\r\n    };\r\n\r\n    addHandlers();\r\n}\r\n","// TODO: barycentric code shouldn't be here, but where?\r\n// TODO: SphereCast?\r\n\r\nimport { Vec2 } from '../math/Vec2.js';\r\nimport { Vec3 } from '../math/Vec3.js';\r\nimport { Mat4 } from '../math/Mat4.js';\r\n\r\nconst tempVec2a = new Vec2();\r\nconst tempVec2b = new Vec2();\r\nconst tempVec2c = new Vec2();\r\n\r\nconst tempVec3a = new Vec3();\r\nconst tempVec3b = new Vec3();\r\nconst tempVec3c = new Vec3();\r\nconst tempVec3d = new Vec3();\r\nconst tempVec3e = new Vec3();\r\nconst tempVec3f = new Vec3();\r\nconst tempVec3g = new Vec3();\r\nconst tempVec3h = new Vec3();\r\nconst tempVec3i = new Vec3();\r\nconst tempVec3j = new Vec3();\r\nconst tempVec3k = new Vec3();\r\n\r\nconst tempMat4 = new Mat4();\r\n\r\nexport class Raycast {\r\n    constructor() {\r\n        this.origin = new Vec3();\r\n        this.direction = new Vec3();\r\n    }\r\n\r\n    // Set ray from mouse unprojection\r\n    castMouse(camera, mouse = [0, 0]) {\r\n        if (camera.type === 'orthographic') {\r\n            // Set origin\r\n            // Since camera is orthographic, origin is not the camera position\r\n            const { left, right, bottom, top, zoom } = camera;\r\n            const x = left / zoom + ((right - left) / zoom) * (mouse[0] * 0.5 + 0.5);\r\n            const y = bottom / zoom + ((top - bottom) / zoom) * (mouse[1] * 0.5 + 0.5);\r\n            this.origin.set(x, y, 0);\r\n            this.origin.applyMatrix4(camera.worldMatrix);\r\n\r\n            // Set direction\r\n            // https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2\r\n            this.direction.x = -camera.worldMatrix[8];\r\n            this.direction.y = -camera.worldMatrix[9];\r\n            this.direction.z = -camera.worldMatrix[10];\r\n        } else {\r\n            // Set origin\r\n            camera.worldMatrix.getTranslation(this.origin);\r\n\r\n            // Set direction\r\n            this.direction.set(mouse[0], mouse[1], 0.5);\r\n            camera.unproject(this.direction);\r\n            this.direction.sub(this.origin).normalize();\r\n        }\r\n    }\r\n\r\n    intersectBounds(meshes, { maxDistance, output = [] } = {}) {\r\n        if (!Array.isArray(meshes)) meshes = [meshes];\r\n\r\n        const invWorldMat4 = tempMat4;\r\n        const origin = tempVec3a;\r\n        const direction = tempVec3b;\r\n\r\n        const hits = output;\r\n        hits.length = 0;\r\n\r\n        meshes.forEach((mesh) => {\r\n            // Create bounds\r\n            if (!mesh.geometry.bounds || mesh.geometry.bounds.radius === Infinity) mesh.geometry.computeBoundingSphere();\r\n            const bounds = mesh.geometry.bounds;\r\n            invWorldMat4.inverse(mesh.worldMatrix);\r\n\r\n            // Get max distance locally\r\n            let localMaxDistance;\r\n            if (maxDistance) {\r\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\r\n                localMaxDistance = maxDistance * direction.len();\r\n            }\r\n\r\n            // Take world space ray and make it object space to align with bounding box\r\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\r\n            direction.copy(this.direction).transformDirection(invWorldMat4);\r\n\r\n            // Break out early if bounds too far away from origin\r\n            if (maxDistance) {\r\n                if (origin.distance(bounds.center) - bounds.radius > localMaxDistance) return;\r\n            }\r\n\r\n            let localDistance = 0;\r\n\r\n            // Check origin isn't inside bounds before testing intersection\r\n            if (mesh.geometry.raycast === 'sphere') {\r\n                if (origin.distance(bounds.center) > bounds.radius) {\r\n                    localDistance = this.intersectSphere(bounds, origin, direction);\r\n                    if (!localDistance) return;\r\n                }\r\n            } else {\r\n                if (\r\n                    origin.x < bounds.min.x ||\r\n                    origin.x > bounds.max.x ||\r\n                    origin.y < bounds.min.y ||\r\n                    origin.y > bounds.max.y ||\r\n                    origin.z < bounds.min.z ||\r\n                    origin.z > bounds.max.z\r\n                ) {\r\n                    localDistance = this.intersectBox(bounds, origin, direction);\r\n                    if (!localDistance) return;\r\n                }\r\n            }\r\n\r\n            if (maxDistance && localDistance > localMaxDistance) return;\r\n\r\n            // Create object on mesh to avoid generating lots of objects\r\n            if (!mesh.hit) mesh.hit = { localPoint: new Vec3(), point: new Vec3() };\r\n\r\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\r\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\r\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\r\n\r\n            hits.push(mesh);\r\n        });\r\n\r\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\r\n        return hits;\r\n    }\r\n\r\n    intersectMeshes(meshes, { cullFace = true, maxDistance, includeUV = true, includeNormal = true, output = [] } = {}) {\r\n        // Test bounds first before testing geometry\r\n        const hits = this.intersectBounds(meshes, { maxDistance, output });\r\n        if (!hits.length) return hits;\r\n\r\n        const invWorldMat4 = tempMat4;\r\n        const origin = tempVec3a;\r\n        const direction = tempVec3b;\r\n        const a = tempVec3c;\r\n        const b = tempVec3d;\r\n        const c = tempVec3e;\r\n        const closestFaceNormal = tempVec3f;\r\n        const faceNormal = tempVec3g;\r\n        const barycoord = tempVec3h;\r\n        const uvA = tempVec2a;\r\n        const uvB = tempVec2b;\r\n        const uvC = tempVec2c;\r\n\r\n        for (let i = hits.length - 1; i >= 0; i--) {\r\n            const mesh = hits[i];\r\n            invWorldMat4.inverse(mesh.worldMatrix);\r\n\r\n            // Get max distance locally\r\n            let localMaxDistance;\r\n            if (maxDistance) {\r\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\r\n                localMaxDistance = maxDistance * direction.len();\r\n            }\r\n\r\n            // Take world space ray and make it object space to align with bounding box\r\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\r\n            direction.copy(this.direction).transformDirection(invWorldMat4);\r\n\r\n            let localDistance = 0;\r\n            let closestA, closestB, closestC;\r\n\r\n            const geometry = mesh.geometry;\r\n            const attributes = geometry.attributes;\r\n            const index = attributes.index;\r\n\r\n            const start = Math.max(0, geometry.drawRange.start);\r\n            const end = Math.min(index ? index.count : attributes.position.count, geometry.drawRange.start + geometry.drawRange.count);\r\n\r\n            for (let j = start; j < end; j += 3) {\r\n                // Position attribute indices for each triangle\r\n                const ai = index ? index.data[j] : j;\r\n                const bi = index ? index.data[j + 1] : j + 1;\r\n                const ci = index ? index.data[j + 2] : j + 2;\r\n\r\n                a.fromArray(attributes.position.data, ai * 3);\r\n                b.fromArray(attributes.position.data, bi * 3);\r\n                c.fromArray(attributes.position.data, ci * 3);\r\n\r\n                const distance = this.intersectTriangle(a, b, c, cullFace, origin, direction, faceNormal);\r\n                if (!distance) continue;\r\n\r\n                // Too far away\r\n                if (maxDistance && distance > localMaxDistance) continue;\r\n\r\n                if (!localDistance || distance < localDistance) {\r\n                    localDistance = distance;\r\n                    closestA = ai;\r\n                    closestB = bi;\r\n                    closestC = ci;\r\n                    closestFaceNormal.copy(faceNormal);\r\n                }\r\n            }\r\n\r\n            if (!localDistance) hits.splice(i, 1);\r\n\r\n            // Update hit values from bounds-test\r\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\r\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\r\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\r\n\r\n            // Add unique hit objects on mesh to avoid generating lots of objects\r\n            if (!mesh.hit.faceNormal) {\r\n                mesh.hit.localFaceNormal = new Vec3();\r\n                mesh.hit.faceNormal = new Vec3();\r\n                mesh.hit.uv = new Vec2();\r\n                mesh.hit.localNormal = new Vec3();\r\n                mesh.hit.normal = new Vec3();\r\n            }\r\n\r\n            // Add face normal data which is already computed\r\n            mesh.hit.localFaceNormal.copy(closestFaceNormal);\r\n            mesh.hit.faceNormal.copy(mesh.hit.localFaceNormal).transformDirection(mesh.worldMatrix);\r\n\r\n            // Optional data, opt out to optimise a bit if necessary\r\n            if (includeUV || includeNormal) {\r\n                // Calculate barycoords to find uv values at hit point\r\n                a.fromArray(attributes.position.data, closestA * 3);\r\n                b.fromArray(attributes.position.data, closestB * 3);\r\n                c.fromArray(attributes.position.data, closestC * 3);\r\n                this.getBarycoord(mesh.hit.localPoint, a, b, c, barycoord);\r\n            }\r\n\r\n            if (includeUV && attributes.uv) {\r\n                uvA.fromArray(attributes.uv.data, closestA * 2);\r\n                uvB.fromArray(attributes.uv.data, closestB * 2);\r\n                uvC.fromArray(attributes.uv.data, closestC * 2);\r\n                mesh.hit.uv.set(\r\n                    uvA.x * barycoord.x + uvB.x * barycoord.y + uvC.x * barycoord.z,\r\n                    uvA.y * barycoord.x + uvB.y * barycoord.y + uvC.y * barycoord.z\r\n                );\r\n            }\r\n\r\n            if (includeNormal && attributes.normal) {\r\n                a.fromArray(attributes.normal.data, closestA * 3);\r\n                b.fromArray(attributes.normal.data, closestB * 3);\r\n                c.fromArray(attributes.normal.data, closestC * 3);\r\n                mesh.hit.localNormal.set(\r\n                    a.x * barycoord.x + b.x * barycoord.y + c.x * barycoord.z,\r\n                    a.y * barycoord.x + b.y * barycoord.y + c.y * barycoord.z,\r\n                    a.z * barycoord.x + b.z * barycoord.y + c.z * barycoord.z\r\n                );\r\n\r\n                mesh.hit.normal.copy(mesh.hit.localNormal).transformDirection(mesh.worldMatrix);\r\n            }\r\n        }\r\n\r\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\r\n        return hits;\r\n    }\r\n\r\n    intersectSphere(sphere, origin = this.origin, direction = this.direction) {\r\n        const ray = tempVec3c;\r\n        ray.sub(sphere.center, origin);\r\n        const tca = ray.dot(direction);\r\n        const d2 = ray.dot(ray) - tca * tca;\r\n        const radius2 = sphere.radius * sphere.radius;\r\n        if (d2 > radius2) return 0;\r\n        const thc = Math.sqrt(radius2 - d2);\r\n        const t0 = tca - thc;\r\n        const t1 = tca + thc;\r\n        if (t0 < 0 && t1 < 0) return 0;\r\n        if (t0 < 0) return t1;\r\n        return t0;\r\n    }\r\n\r\n    // Ray AABB - Ray Axis aligned bounding box testing\r\n    intersectBox(box, origin = this.origin, direction = this.direction) {\r\n        let tmin, tmax, tYmin, tYmax, tZmin, tZmax;\r\n        const invdirx = 1 / direction.x;\r\n        const invdiry = 1 / direction.y;\r\n        const invdirz = 1 / direction.z;\r\n        const min = box.min;\r\n        const max = box.max;\r\n        tmin = ((invdirx >= 0 ? min.x : max.x) - origin.x) * invdirx;\r\n        tmax = ((invdirx >= 0 ? max.x : min.x) - origin.x) * invdirx;\r\n        tYmin = ((invdiry >= 0 ? min.y : max.y) - origin.y) * invdiry;\r\n        tYmax = ((invdiry >= 0 ? max.y : min.y) - origin.y) * invdiry;\r\n        if (tmin > tYmax || tYmin > tmax) return 0;\r\n        if (tYmin > tmin) tmin = tYmin;\r\n        if (tYmax < tmax) tmax = tYmax;\r\n        tZmin = ((invdirz >= 0 ? min.z : max.z) - origin.z) * invdirz;\r\n        tZmax = ((invdirz >= 0 ? max.z : min.z) - origin.z) * invdirz;\r\n        if (tmin > tZmax || tZmin > tmax) return 0;\r\n        if (tZmin > tmin) tmin = tZmin;\r\n        if (tZmax < tmax) tmax = tZmax;\r\n        if (tmax < 0) return 0;\r\n        return tmin >= 0 ? tmin : tmax;\r\n    }\r\n\r\n    intersectTriangle(a, b, c, backfaceCulling = true, origin = this.origin, direction = this.direction, normal = tempVec3g) {\r\n        // from https://github.com/mrdoob/three.js/blob/master/src/math/Ray.js\r\n        // which is from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n        const edge1 = tempVec3h;\r\n        const edge2 = tempVec3i;\r\n        const diff = tempVec3j;\r\n        edge1.sub(b, a);\r\n        edge2.sub(c, a);\r\n        normal.cross(edge1, edge2);\r\n        let DdN = direction.dot(normal);\r\n        if (!DdN) return 0;\r\n        let sign;\r\n        if (DdN > 0) {\r\n            if (backfaceCulling) return 0;\r\n            sign = 1;\r\n        } else {\r\n            sign = -1;\r\n            DdN = -DdN;\r\n        }\r\n        diff.sub(origin, a);\r\n        let DdQxE2 = sign * direction.dot(edge2.cross(diff, edge2));\r\n        if (DdQxE2 < 0) return 0;\r\n        let DdE1xQ = sign * direction.dot(edge1.cross(diff));\r\n        if (DdE1xQ < 0) return 0;\r\n        if (DdQxE2 + DdE1xQ > DdN) return 0;\r\n        let QdN = -sign * diff.dot(normal);\r\n        if (QdN < 0) return 0;\r\n        return QdN / DdN;\r\n    }\r\n\r\n    getBarycoord(point, a, b, c, target = tempVec3h) {\r\n        // From https://github.com/mrdoob/three.js/blob/master/src/math/Triangle.js\r\n        // static/instance method to calculate barycentric coordinates\r\n        // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n        const v0 = tempVec3i;\r\n        const v1 = tempVec3j;\r\n        const v2 = tempVec3k;\r\n        v0.sub(c, a);\r\n        v1.sub(b, a);\r\n        v2.sub(point, a);\r\n        const dot00 = v0.dot(v0);\r\n        const dot01 = v0.dot(v1);\r\n        const dot02 = v0.dot(v2);\r\n        const dot11 = v1.dot(v1);\r\n        const dot12 = v1.dot(v2);\r\n        const denom = dot00 * dot11 - dot01 * dot01;\r\n        if (denom === 0) return target.set(-2, -1, -1);\r\n        const invDenom = 1 / denom;\r\n        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\r\n        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\r\n        return target.set(1 - u - v, v, u);\r\n    }\r\n}\r\n","// TODO: delete texture\r\n// TODO: use texSubImage2D for updates (video or when loaded)\r\n// TODO: need? encoding = linearEncoding\r\n// TODO: support non-compressed mipmaps uploads\r\n\r\nconst emptyPixel = new Uint8Array(4);\r\n\r\nfunction isPowerOf2(value) {\r\n    return (value & (value - 1)) === 0;\r\n}\r\n\r\nlet ID = 1;\r\n\r\nexport class Texture {\r\n    constructor(\r\n        gl,\r\n        {\r\n            image,\r\n            target = gl.TEXTURE_2D,\r\n            type = gl.UNSIGNED_BYTE,\r\n            format = gl.RGBA,\r\n            internalFormat = format,\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            generateMipmaps = true,\r\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\r\n            magFilter = gl.LINEAR,\r\n            premultiplyAlpha = false,\r\n            unpackAlignment = 4,\r\n            flipY = target == gl.TEXTURE_2D ? true : false,\r\n            anisotropy = 0,\r\n            level = 0,\r\n            width, // used for RenderTargets or Data Textures\r\n            height = width,\r\n        } = {}\r\n    ) {\r\n        this.gl = gl;\r\n        this.id = ID++;\r\n\r\n        this.image = image;\r\n        this.target = target;\r\n        this.type = type;\r\n        this.format = format;\r\n        this.internalFormat = internalFormat;\r\n        this.minFilter = minFilter;\r\n        this.magFilter = magFilter;\r\n        this.wrapS = wrapS;\r\n        this.wrapT = wrapT;\r\n        this.generateMipmaps = generateMipmaps;\r\n        this.premultiplyAlpha = premultiplyAlpha;\r\n        this.unpackAlignment = unpackAlignment;\r\n        this.flipY = flipY;\r\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\r\n        this.level = level;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.texture = this.gl.createTexture();\r\n\r\n        this.store = {\r\n            image: null,\r\n        };\r\n\r\n        // Alias for state store to avoid redundant calls for global state\r\n        this.glState = this.gl.renderer.state;\r\n\r\n        // State store to avoid redundant calls for per-texture state\r\n        this.state = {};\r\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\r\n        this.state.magFilter = this.gl.LINEAR;\r\n        this.state.wrapS = this.gl.REPEAT;\r\n        this.state.wrapT = this.gl.REPEAT;\r\n        this.state.anisotropy = 0;\r\n    }\r\n\r\n    bind() {\r\n        // Already bound to active texture unit\r\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\r\n        this.gl.bindTexture(this.target, this.texture);\r\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\r\n    }\r\n\r\n    update(textureUnit = 0) {\r\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\r\n\r\n        // Make sure that texture is bound to its texture unit\r\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\r\n            // set active texture unit to perform texture functions\r\n            this.gl.renderer.activeTexture(textureUnit);\r\n            this.bind();\r\n        }\r\n\r\n        if (!needsUpdate) return;\r\n        this.needsUpdate = false;\r\n\r\n        if (this.flipY !== this.glState.flipY) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\r\n            this.glState.flipY = this.flipY;\r\n        }\r\n\r\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\r\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\r\n        }\r\n\r\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\r\n            this.glState.unpackAlignment = this.unpackAlignment;\r\n        }\r\n\r\n        if (this.minFilter !== this.state.minFilter) {\r\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\r\n            this.state.minFilter = this.minFilter;\r\n        }\r\n\r\n        if (this.magFilter !== this.state.magFilter) {\r\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\r\n            this.state.magFilter = this.magFilter;\r\n        }\r\n\r\n        if (this.wrapS !== this.state.wrapS) {\r\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\r\n            this.state.wrapS = this.wrapS;\r\n        }\r\n\r\n        if (this.wrapT !== this.state.wrapT) {\r\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\r\n            this.state.wrapT = this.wrapT;\r\n        }\r\n\r\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\r\n            this.gl.texParameterf(\r\n                this.target,\r\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\r\n                this.anisotropy\r\n            );\r\n            this.state.anisotropy = this.anisotropy;\r\n        }\r\n\r\n        if (this.image) {\r\n            if (this.image.width) {\r\n                this.width = this.image.width;\r\n                this.height = this.image.height;\r\n            }\r\n\r\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\r\n                // For cube maps\r\n                for (let i = 0; i < 6; i++) {\r\n                    this.gl.texImage2D(\r\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                        this.level,\r\n                        this.internalFormat,\r\n                        this.format,\r\n                        this.type,\r\n                        this.image[i]\r\n                    );\r\n                }\r\n            } else if (ArrayBuffer.isView(this.image)) {\r\n                // Data texture\r\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\r\n            } else if (this.image.isCompressedTexture) {\r\n                // Compressed texture\r\n                for (let level = 0; level < this.image.length; level++) {\r\n                    this.gl.compressedTexImage2D(\r\n                        this.target,\r\n                        level,\r\n                        this.internalFormat,\r\n                        this.image[level].width,\r\n                        this.image[level].height,\r\n                        0,\r\n                        this.image[level].data\r\n                    );\r\n                }\r\n            } else {\r\n                // Regular texture\r\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\r\n            }\r\n\r\n            if (this.generateMipmaps) {\r\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\r\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\r\n                    this.generateMipmaps = false;\r\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\r\n                    this.minFilter = this.gl.LINEAR;\r\n                } else {\r\n                    this.gl.generateMipmap(this.target);\r\n                }\r\n            }\r\n\r\n            // Callback for when data is pushed to GPU\r\n            this.onUpdate && this.onUpdate();\r\n        } else {\r\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\r\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\r\n                for (let i = 0; i < 6; i++) {\r\n                    this.gl.texImage2D(\r\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                        0,\r\n                        this.gl.RGBA,\r\n                        1,\r\n                        1,\r\n                        0,\r\n                        this.gl.RGBA,\r\n                        this.gl.UNSIGNED_BYTE,\r\n                        emptyPixel\r\n                    );\r\n                }\r\n            } else if (this.width) {\r\n                // image intentionally left null for RenderTarget\r\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\r\n            } else {\r\n                // Upload empty pixel if no image to avoid errors while image or video loading\r\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\r\n            }\r\n        }\r\n        this.store.image = this.image;\r\n    }\r\n}\r\n","const EPSILON = 0.000001;\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[4];\r\n    out[4] = a[5];\r\n    out[5] = a[6];\r\n    out[6] = a[8];\r\n    out[7] = a[9];\r\n    out[8] = a[10];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\nexport function fromQuat(out, q) {\r\n    let x = q[0],\r\n        y = q[1],\r\n        z = q[2],\r\n        w = q[3];\r\n    let x2 = x + x;\r\n    let y2 = y + y;\r\n    let z2 = z + z;\r\n\r\n    let xx = x * x2;\r\n    let yx = y * x2;\r\n    let yy = y * y2;\r\n    let zx = z * x2;\r\n    let zy = z * y2;\r\n    let zz = z * z2;\r\n    let wx = w * x2;\r\n    let wy = w * y2;\r\n    let wz = w * z2;\r\n\r\n    out[0] = 1 - yy - zz;\r\n    out[3] = yx - wz;\r\n    out[6] = zx + wy;\r\n\r\n    out[1] = yx + wz;\r\n    out[4] = 1 - xx - zz;\r\n    out[7] = zy - wx;\r\n\r\n    out[2] = zx - wy;\r\n    out[5] = zy + wx;\r\n    out[8] = 1 - xx - yy;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n    out[0] = m00;\r\n    out[1] = m01;\r\n    out[2] = m02;\r\n    out[3] = m10;\r\n    out[4] = m11;\r\n    out[5] = m12;\r\n    out[6] = m20;\r\n    out[7] = m21;\r\n    out[8] = m22;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n    out[0] = 1;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 1;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n    if (out === a) {\r\n        let a01 = a[1],\r\n            a02 = a[2],\r\n            a12 = a[5];\r\n        out[1] = a[3];\r\n        out[2] = a[6];\r\n        out[3] = a01;\r\n        out[5] = a[7];\r\n        out[6] = a02;\r\n        out[7] = a12;\r\n    } else {\r\n        out[0] = a[0];\r\n        out[1] = a[3];\r\n        out[2] = a[6];\r\n        out[3] = a[1];\r\n        out[4] = a[4];\r\n        out[5] = a[7];\r\n        out[6] = a[2];\r\n        out[7] = a[5];\r\n        out[8] = a[8];\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2];\r\n    let a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5];\r\n    let a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n\r\n    let b01 = a22 * a11 - a12 * a21;\r\n    let b11 = -a22 * a10 + a12 * a20;\r\n    let b21 = a21 * a10 - a11 * a20;\r\n\r\n    // Calculate the determinant\r\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n    if (!det) {\r\n        return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = b01 * det;\r\n    out[1] = (-a22 * a01 + a02 * a21) * det;\r\n    out[2] = (a12 * a01 - a02 * a11) * det;\r\n    out[3] = b11 * det;\r\n    out[4] = (a22 * a00 - a02 * a20) * det;\r\n    out[5] = (-a12 * a00 + a02 * a10) * det;\r\n    out[6] = b21 * det;\r\n    out[7] = (-a21 * a00 + a01 * a20) * det;\r\n    out[8] = (a11 * a00 - a01 * a10) * det;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2];\r\n    let a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5];\r\n    let a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n\r\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2];\r\n    let a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5];\r\n    let a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8];\r\n\r\n    let b00 = b[0],\r\n        b01 = b[1],\r\n        b02 = b[2];\r\n    let b10 = b[3],\r\n        b11 = b[4],\r\n        b12 = b[5];\r\n    let b20 = b[6],\r\n        b21 = b[7],\r\n        b22 = b[8];\r\n\r\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5],\r\n        a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8],\r\n        x = v[0],\r\n        y = v[1];\r\n\r\n    out[0] = a00;\r\n    out[1] = a01;\r\n    out[2] = a02;\r\n\r\n    out[3] = a10;\r\n    out[4] = a11;\r\n    out[5] = a12;\r\n\r\n    out[6] = x * a00 + y * a10 + a20;\r\n    out[7] = x * a01 + y * a11 + a21;\r\n    out[8] = x * a02 + y * a12 + a22;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a10 = a[3],\r\n        a11 = a[4],\r\n        a12 = a[5],\r\n        a20 = a[6],\r\n        a21 = a[7],\r\n        a22 = a[8],\r\n        s = Math.sin(rad),\r\n        c = Math.cos(rad);\r\n\r\n    out[0] = c * a00 + s * a10;\r\n    out[1] = c * a01 + s * a11;\r\n    out[2] = c * a02 + s * a12;\r\n\r\n    out[3] = c * a10 - s * a00;\r\n    out[4] = c * a11 - s * a01;\r\n    out[5] = c * a12 - s * a02;\r\n\r\n    out[6] = a20;\r\n    out[7] = a21;\r\n    out[8] = a22;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n    let x = v[0],\r\n        y = v[1];\r\n\r\n    out[0] = x * a[0];\r\n    out[1] = x * a[1];\r\n    out[2] = x * a[2];\r\n\r\n    out[3] = y * a[3];\r\n    out[4] = y * a[4];\r\n    out[5] = y * a[5];\r\n\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[8] = a[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {mat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\nexport function normalFromMat4(out, a) {\r\n    let a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    let a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7];\r\n    let a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11];\r\n    let a30 = a[12],\r\n        a31 = a[13],\r\n        a32 = a[14],\r\n        a33 = a[15];\r\n\r\n    let b00 = a00 * a11 - a01 * a10;\r\n    let b01 = a00 * a12 - a02 * a10;\r\n    let b02 = a00 * a13 - a03 * a10;\r\n    let b03 = a01 * a12 - a02 * a11;\r\n    let b04 = a01 * a13 - a03 * a11;\r\n    let b05 = a02 * a13 - a03 * a12;\r\n    let b06 = a20 * a31 - a21 * a30;\r\n    let b07 = a20 * a32 - a22 * a30;\r\n    let b08 = a20 * a33 - a23 * a30;\r\n    let b09 = a21 * a32 - a22 * a31;\r\n    let b10 = a21 * a33 - a23 * a31;\r\n    let b11 = a22 * a33 - a23 * a32;\r\n\r\n    // Calculate the determinant\r\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    if (!det) {\r\n        return null;\r\n    }\r\n    det = 1.0 / det;\r\n\r\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n    out[0] = 2 / width;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = -2 / height;\r\n    out[5] = 0;\r\n    out[6] = -1;\r\n    out[7] = 1;\r\n    out[8] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n    out[0] = a[0] + b[0];\r\n    out[1] = a[1] + b[1];\r\n    out[2] = a[2] + b[2];\r\n    out[3] = a[3] + b[3];\r\n    out[4] = a[4] + b[4];\r\n    out[5] = a[5] + b[5];\r\n    out[6] = a[6] + b[6];\r\n    out[7] = a[7] + b[7];\r\n    out[8] = a[8] + b[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n    out[0] = a[0] - b[0];\r\n    out[1] = a[1] - b[1];\r\n    out[2] = a[2] - b[2];\r\n    out[3] = a[3] - b[3];\r\n    out[4] = a[4] - b[4];\r\n    out[5] = a[5] - b[5];\r\n    out[6] = a[6] - b[6];\r\n    out[7] = a[7] - b[7];\r\n    out[8] = a[8] - b[8];\r\n    return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n    out[0] = a[0] * b;\r\n    out[1] = a[1] * b;\r\n    out[2] = a[2] * b;\r\n    out[3] = a[3] * b;\r\n    out[4] = a[4] * b;\r\n    out[5] = a[5] * b;\r\n    out[6] = a[6] * b;\r\n    out[7] = a[7] * b;\r\n    out[8] = a[8] * b;\r\n    return out;\r\n}\r\n","import * as Mat3Func from './functions/Mat3Func.js';\r\n\r\nexport class Mat3 extends Array {\r\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\r\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\r\n        return this;\r\n    }\r\n\r\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n        if (m00.length) return this.copy(m00);\r\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\r\n        return this;\r\n    }\r\n\r\n    translate(v, m = this) {\r\n        Mat3Func.translate(this, m, v);\r\n        return this;\r\n    }\r\n\r\n    rotate(v, m = this) {\r\n        Mat3Func.rotate(this, m, v);\r\n        return this;\r\n    }\r\n\r\n    scale(v, m = this) {\r\n        Mat3Func.scale(this, m, v);\r\n        return this;\r\n    }\r\n\r\n    multiply(ma, mb) {\r\n        if (mb) {\r\n            Mat3Func.multiply(this, ma, mb);\r\n        } else {\r\n            Mat3Func.multiply(this, this, ma);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    identity() {\r\n        Mat3Func.identity(this);\r\n        return this;\r\n    }\r\n\r\n    copy(m) {\r\n        Mat3Func.copy(this, m);\r\n        return this;\r\n    }\r\n\r\n    fromMatrix4(m) {\r\n        Mat3Func.fromMat4(this, m);\r\n        return this;\r\n    }\r\n\r\n    fromQuaternion(q) {\r\n        Mat3Func.fromQuat(this, q);\r\n        return this;\r\n    }\r\n\r\n    fromBasis(vec3a, vec3b, vec3c) {\r\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\r\n        return this;\r\n    }\r\n\r\n    inverse(m = this) {\r\n        Mat3Func.invert(this, m);\r\n        return this;\r\n    }\r\n\r\n    getNormalMatrix(m) {\r\n        Mat3Func.normalFromMat4(this, m);\r\n        return this;\r\n    }\r\n}\r\n","import { Transform } from './Transform.js';\r\nimport { Mat3 } from '../math/Mat3.js';\r\nimport { Mat4 } from '../math/Mat4.js';\r\n\r\nlet ID = 0;\r\n\r\nexport class Mesh extends Transform {\r\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\r\n        super();\r\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\r\n        this.gl = gl;\r\n        this.id = ID++;\r\n        this.geometry = geometry;\r\n        this.program = program;\r\n        this.mode = mode;\r\n\r\n        // Used to skip frustum culling\r\n        this.frustumCulled = frustumCulled;\r\n\r\n        // Override sorting to force an order\r\n        this.renderOrder = renderOrder;\r\n        this.modelViewMatrix = new Mat4();\r\n        this.normalMatrix = new Mat3();\r\n        this.beforeRenderCallbacks = [];\r\n        this.afterRenderCallbacks = [];\r\n    }\r\n\r\n    onBeforeRender(f) {\r\n        this.beforeRenderCallbacks.push(f);\r\n        return this;\r\n    }\r\n\r\n    onAfterRender(f) {\r\n        this.afterRenderCallbacks.push(f);\r\n        return this;\r\n    }\r\n\r\n    draw({ camera } = {}) {\r\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\r\n        if (camera) {\r\n            // Add empty matrix uniforms to program if unset\r\n            if (!this.program.uniforms.modelMatrix) {\r\n                Object.assign(this.program.uniforms, {\r\n                    modelMatrix: { value: null },\r\n                    viewMatrix: { value: null },\r\n                    modelViewMatrix: { value: null },\r\n                    normalMatrix: { value: null },\r\n                    projectionMatrix: { value: null },\r\n                    cameraPosition: { value: null },\r\n                });\r\n            }\r\n\r\n            // Set the matrix uniforms\r\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\r\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\r\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\r\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\r\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\r\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\r\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\r\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\r\n        }\r\n\r\n        // determine if faces need to be flipped - when mesh scaled negatively\r\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\r\n        this.program.use({ flipFaces });\r\n        this.geometry.draw({ mode: this.mode, program: this.program });\r\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\r\n    }\r\n}\r\n","// attribute params\r\n// {\r\n//     data - typed array eg UInt16Array for indices, Float32Array\r\n//     size - int default 1\r\n//     instanced - default null. Pass divisor amount\r\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\r\n//     normalized - boolean default false\r\n\r\n//     buffer - gl buffer, if buffer exists, don't need to provide data\r\n//     stride - default 0 - for when passing in buffer\r\n//     offset - default 0 - for when passing in buffer\r\n//     count - default null - for when passing in buffer\r\n//     min - array - for when passing in buffer\r\n//     max - array - for when passing in buffer\r\n// }\r\n\r\n// TODO: fit in transform feedback\r\n// TODO: when would I disableVertexAttribArray ?\r\n// TODO: use offset/stride if exists\r\n\r\nimport { Vec3 } from '../math/Vec3.js';\r\n\r\nconst tempVec3 = new Vec3();\r\n\r\nlet ID = 1;\r\nlet ATTR_ID = 1;\r\n\r\n// To stop inifinite warnings\r\nlet isBoundsWarned = false;\r\n\r\nexport class Geometry {\r\n    constructor(gl, attributes = {}) {\r\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\r\n        this.gl = gl;\r\n        this.attributes = attributes;\r\n        this.id = ID++;\r\n\r\n        // Store one VAO per program attribute locations order\r\n        this.VAOs = {};\r\n\r\n        this.drawRange = { start: 0, count: 0 };\r\n        this.instancedCount = 0;\r\n\r\n        // Unbind current VAO so that new buffers don't get added to active mesh\r\n        this.gl.renderer.bindVertexArray(null);\r\n        this.gl.renderer.currentGeometry = null;\r\n\r\n        // Alias for state store to avoid redundant calls for global state\r\n        this.glState = this.gl.renderer.state;\r\n\r\n        // create the buffers\r\n        for (let key in attributes) {\r\n            this.addAttribute(key, attributes[key]);\r\n        }\r\n    }\r\n\r\n    addAttribute(key, attr) {\r\n        this.attributes[key] = attr;\r\n\r\n        // Set options\r\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\r\n        attr.size = attr.size || 1;\r\n        attr.type =\r\n            attr.type ||\r\n            (attr.data.constructor === Float32Array\r\n                ? this.gl.FLOAT\r\n                : attr.data.constructor === Uint16Array\r\n                ? this.gl.UNSIGNED_SHORT\r\n                : this.gl.UNSIGNED_INT); // Uint32Array\r\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\r\n        attr.normalized = attr.normalized || false;\r\n        attr.stride = attr.stride || 0;\r\n        attr.offset = attr.offset || 0;\r\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\r\n        attr.divisor = attr.instanced || 0;\r\n        attr.needsUpdate = false;\r\n\r\n        if (!attr.buffer) {\r\n            attr.buffer = this.gl.createBuffer();\r\n\r\n            // Push data to buffer\r\n            this.updateAttribute(attr);\r\n        }\r\n\r\n        // Update geometry counts. If indexed, ignore regular attributes\r\n        if (attr.divisor) {\r\n            this.isInstanced = true;\r\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\r\n                console.warn('geometry has multiple instanced buffers of different length');\r\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\r\n            }\r\n            this.instancedCount = attr.count * attr.divisor;\r\n        } else if (key === 'index') {\r\n            this.drawRange.count = attr.count;\r\n        } else if (!this.attributes.index) {\r\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\r\n        }\r\n    }\r\n\r\n    updateAttribute(attr) {\r\n        if (this.glState.boundBuffer !== attr.buffer) {\r\n            this.gl.bindBuffer(attr.target, attr.buffer);\r\n            this.glState.boundBuffer = attr.buffer;\r\n        }\r\n        this.gl.bufferData(attr.target, attr.data, this.gl.STATIC_DRAW);\r\n        attr.needsUpdate = false;\r\n    }\r\n\r\n    setIndex(value) {\r\n        this.addAttribute('index', value);\r\n    }\r\n\r\n    setDrawRange(start, count) {\r\n        this.drawRange.start = start;\r\n        this.drawRange.count = count;\r\n    }\r\n\r\n    setInstancedCount(value) {\r\n        this.instancedCount = value;\r\n    }\r\n\r\n    createVAO(program) {\r\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\r\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\r\n        this.bindAttributes(program);\r\n    }\r\n\r\n    bindAttributes(program) {\r\n        // Link all attributes to program using gl.vertexAttribPointer\r\n        program.attributeLocations.forEach((location, { name, type }) => {\r\n            // If geometry missing a required shader attribute\r\n            if (!this.attributes[name]) {\r\n                console.warn(`active attribute ${name} not being supplied`);\r\n                return;\r\n            }\r\n\r\n            const attr = this.attributes[name];\r\n\r\n            this.gl.bindBuffer(attr.target, attr.buffer);\r\n            this.glState.boundBuffer = attr.buffer;\r\n\r\n            // For matrix attributes, buffer needs to be defined per column\r\n            let numLoc = 1;\r\n            if (type === 35674) numLoc = 2; // mat2\r\n            if (type === 35675) numLoc = 3; // mat3\r\n            if (type === 35676) numLoc = 4; // mat4\r\n\r\n            const size = attr.size / numLoc;\r\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\r\n            const offset = numLoc === 1 ? 0 : numLoc * numLoc;\r\n\r\n            for (let i = 0; i < numLoc; i++) {\r\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\r\n                this.gl.enableVertexAttribArray(location + i);\r\n\r\n                // For instanced attributes, divisor needs to be set.\r\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\r\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\r\n            }\r\n        });\r\n\r\n        // Bind indices if geometry indexed\r\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\r\n    }\r\n\r\n    draw({ program, mode = this.gl.TRIANGLES }) {\r\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\r\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\r\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\r\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\r\n        }\r\n\r\n        // Check if any attributes need updating\r\n        program.attributeLocations.forEach((location, { name }) => {\r\n            const attr = this.attributes[name];\r\n            if (attr.needsUpdate) this.updateAttribute(attr);\r\n        });\r\n\r\n        if (this.isInstanced) {\r\n            if (this.attributes.index) {\r\n                this.gl.renderer.drawElementsInstanced(\r\n                    mode,\r\n                    this.drawRange.count,\r\n                    this.attributes.index.type,\r\n                    this.attributes.index.offset + this.drawRange.start * 2,\r\n                    this.instancedCount\r\n                );\r\n            } else {\r\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\r\n            }\r\n        } else {\r\n            if (this.attributes.index) {\r\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\r\n            } else {\r\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\r\n            }\r\n        }\r\n    }\r\n\r\n    getPositionArray() {\r\n        // Use position buffer, or min/max if available\r\n        const attr = this.attributes.position;\r\n        // if (attr.min) return [...attr.min, ...attr.max];\r\n        if (attr.data) return attr.data;\r\n        if (isBoundsWarned) return;\r\n        console.warn('No position buffer data found to compute bounds');\r\n        return (isBoundsWarned = true);\r\n    }\r\n\r\n    computeBoundingBox(array) {\r\n        if (!array) array = this.getPositionArray();\r\n\r\n        if (!this.bounds) {\r\n            this.bounds = {\r\n                min: new Vec3(),\r\n                max: new Vec3(),\r\n                center: new Vec3(),\r\n                scale: new Vec3(),\r\n                radius: Infinity,\r\n            };\r\n        }\r\n\r\n        const min = this.bounds.min;\r\n        const max = this.bounds.max;\r\n        const center = this.bounds.center;\r\n        const scale = this.bounds.scale;\r\n\r\n        min.set(+Infinity);\r\n        max.set(-Infinity);\r\n\r\n        // TODO: use offset/stride if exists\r\n        // TODO: check size of position (eg triangle with Vec2)\r\n        for (let i = 0, l = array.length; i < l; i += 3) {\r\n            const x = array[i];\r\n            const y = array[i + 1];\r\n            const z = array[i + 2];\r\n\r\n            min.x = Math.min(x, min.x);\r\n            min.y = Math.min(y, min.y);\r\n            min.z = Math.min(z, min.z);\r\n\r\n            max.x = Math.max(x, max.x);\r\n            max.y = Math.max(y, max.y);\r\n            max.z = Math.max(z, max.z);\r\n        }\r\n\r\n        scale.sub(max, min);\r\n        center.add(min, max).divide(2);\r\n    }\r\n\r\n    computeBoundingSphere(array) {\r\n        if (!array) array = this.getPositionArray();\r\n        if (!this.bounds) this.computeBoundingBox(array);\r\n\r\n        let maxRadiusSq = 0;\r\n        for (let i = 0, l = array.length; i < l; i += 3) {\r\n            tempVec3.fromArray(array, i);\r\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\r\n        }\r\n\r\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\r\n    }\r\n\r\n    remove() {\r\n        if (this.vao) this.gl.renderer.deleteVertexArray(this.vao);\r\n        for (let key in this.attributes) {\r\n            this.gl.deleteBuffer(this.attributes[key].buffer);\r\n            delete this.attributes[key];\r\n        }\r\n    }\r\n}\r\n","import { Geometry } from '../core/Geometry.js';\r\n\r\nexport class Plane extends Geometry {\r\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\r\n        const wSegs = widthSegments;\r\n        const hSegs = heightSegments;\r\n\r\n        // Determine length of arrays\r\n        const num = (wSegs + 1) * (hSegs + 1);\r\n        const numIndices = wSegs * hSegs * 6;\r\n\r\n        // Generate empty arrays once\r\n        const position = new Float32Array(num * 3);\r\n        const normal = new Float32Array(num * 3);\r\n        const uv = new Float32Array(num * 2);\r\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\r\n\r\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\r\n\r\n        Object.assign(attributes, {\r\n            position: { size: 3, data: position },\r\n            normal: { size: 3, data: normal },\r\n            uv: { size: 2, data: uv },\r\n            index: { data: index },\r\n        });\r\n\r\n        super(gl, attributes);\r\n    }\r\n\r\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\r\n        const io = i;\r\n        const segW = width / wSegs;\r\n        const segH = height / hSegs;\r\n\r\n        for (let iy = 0; iy <= hSegs; iy++) {\r\n            let y = iy * segH - height / 2;\r\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\r\n                let x = ix * segW - width / 2;\r\n\r\n                position[i * 3 + u] = x * uDir;\r\n                position[i * 3 + v] = y * vDir;\r\n                position[i * 3 + w] = depth / 2;\r\n\r\n                normal[i * 3 + u] = 0;\r\n                normal[i * 3 + v] = 0;\r\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\r\n\r\n                uv[i * 2] = ix / wSegs;\r\n                uv[i * 2 + 1] = 1 - iy / hSegs;\r\n\r\n                if (iy === hSegs || ix === wSegs) continue;\r\n                let a = io + ix + iy * (wSegs + 1);\r\n                let b = io + ix + (iy + 1) * (wSegs + 1);\r\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\r\n                let d = io + ix + iy * (wSegs + 1) + 1;\r\n\r\n                index[ii * 6] = a;\r\n                index[ii * 6 + 1] = b;\r\n                index[ii * 6 + 2] = d;\r\n                index[ii * 6 + 3] = b;\r\n                index[ii * 6 + 4] = c;\r\n                index[ii * 6 + 5] = d;\r\n                ii++;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// TODO: upload empty texture if null ? maybe not\r\n// TODO: upload identity matrix if null ?\r\n// TODO: sampler Cube\r\n\r\nlet ID = 1;\r\n\r\n// cache of typed arrays used to flatten uniform arrays\r\nconst arrayCacheF32 = {};\r\n\r\nexport class Program {\r\n    constructor(\r\n        gl,\r\n        {\r\n            vertex,\r\n            fragment,\r\n            uniforms = {},\r\n\r\n            transparent = false,\r\n            cullFace = gl.BACK,\r\n            frontFace = gl.CCW,\r\n            depthTest = true,\r\n            depthWrite = true,\r\n            depthFunc = gl.LESS,\r\n        } = {}\r\n    ) {\r\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\r\n        this.gl = gl;\r\n        this.uniforms = uniforms;\r\n        this.id = ID++;\r\n\r\n        if (!vertex) console.warn('vertex shader not supplied');\r\n        if (!fragment) console.warn('fragment shader not supplied');\r\n\r\n        // Store program state\r\n        this.transparent = transparent;\r\n        this.cullFace = cullFace;\r\n        this.frontFace = frontFace;\r\n        this.depthTest = depthTest;\r\n        this.depthWrite = depthWrite;\r\n        this.depthFunc = depthFunc;\r\n        this.blendFunc = {};\r\n        this.blendEquation = {};\r\n\r\n        // set default blendFunc if transparent flagged\r\n        if (this.transparent && !this.blendFunc.src) {\r\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        }\r\n\r\n        // compile vertex shader and log errors\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n        gl.shaderSource(vertexShader, vertex);\r\n        gl.compileShader(vertexShader);\r\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\r\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\r\n        }\r\n\r\n        // compile fragment shader and log errors\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        gl.shaderSource(fragmentShader, fragment);\r\n        gl.compileShader(fragmentShader);\r\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\r\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\r\n        }\r\n\r\n        // compile program and log errors\r\n        this.program = gl.createProgram();\r\n        gl.attachShader(this.program, vertexShader);\r\n        gl.attachShader(this.program, fragmentShader);\r\n        gl.linkProgram(this.program);\r\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\r\n            return console.warn(gl.getProgramInfoLog(this.program));\r\n        }\r\n\r\n        // Remove shader once linked\r\n        gl.deleteShader(vertexShader);\r\n        gl.deleteShader(fragmentShader);\r\n\r\n        // Get active uniform locations\r\n        this.uniformLocations = new Map();\r\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\r\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\r\n            let uniform = gl.getActiveUniform(this.program, uIndex);\r\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\r\n\r\n            // split uniforms' names to separate array and struct declarations\r\n            const split = uniform.name.match(/(\\w+)/g);\r\n\r\n            uniform.uniformName = split[0];\r\n\r\n            if (split.length === 3) {\r\n                uniform.isStructArray = true;\r\n                uniform.structIndex = Number(split[1]);\r\n                uniform.structProperty = split[2];\r\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\r\n                uniform.isStruct = true;\r\n                uniform.structProperty = split[1];\r\n            }\r\n        }\r\n\r\n        // Get active attribute locations\r\n        this.attributeLocations = new Map();\r\n        const locations = [];\r\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\r\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\r\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\r\n            const location = gl.getAttribLocation(this.program, attribute.name);\r\n            locations[location] = attribute.name;\r\n            this.attributeLocations.set(attribute, location);\r\n        }\r\n        this.attributeOrder = locations.join('');\r\n    }\r\n\r\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\r\n        this.blendFunc.src = src;\r\n        this.blendFunc.dst = dst;\r\n        this.blendFunc.srcAlpha = srcAlpha;\r\n        this.blendFunc.dstAlpha = dstAlpha;\r\n        if (src) this.transparent = true;\r\n    }\r\n\r\n    setBlendEquation(modeRGB, modeAlpha) {\r\n        this.blendEquation.modeRGB = modeRGB;\r\n        this.blendEquation.modeAlpha = modeAlpha;\r\n    }\r\n\r\n    applyState() {\r\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\r\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\r\n\r\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\r\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\r\n\r\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\r\n        else this.gl.renderer.disable(this.gl.BLEND);\r\n\r\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\r\n        this.gl.renderer.setFrontFace(this.frontFace);\r\n        this.gl.renderer.setDepthMask(this.depthWrite);\r\n        this.gl.renderer.setDepthFunc(this.depthFunc);\r\n        if (this.blendFunc.src)\r\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\r\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\r\n    }\r\n\r\n    use({ flipFaces = false } = {}) {\r\n        let textureUnit = -1;\r\n        const programActive = this.gl.renderer.currentProgram === this.id;\r\n\r\n        // Avoid gl call if program already in use\r\n        if (!programActive) {\r\n            this.gl.useProgram(this.program);\r\n            this.gl.renderer.currentProgram = this.id;\r\n        }\r\n\r\n        // Set only the active uniforms found in the shader\r\n        this.uniformLocations.forEach((location, activeUniform) => {\r\n            let name = activeUniform.uniformName;\r\n\r\n            // get supplied uniform\r\n            let uniform = this.uniforms[name];\r\n\r\n            // For structs, get the specific property instead of the entire object\r\n            if (activeUniform.isStruct) {\r\n                uniform = uniform[activeUniform.structProperty];\r\n                name += `.${activeUniform.structProperty}`;\r\n            }\r\n            if (activeUniform.isStructArray) {\r\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\r\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\r\n            }\r\n\r\n            if (!uniform) {\r\n                return warn(`Active uniform ${name} has not been supplied`);\r\n            }\r\n\r\n            if (uniform && uniform.value === undefined) {\r\n                return warn(`${name} uniform is missing a value parameter`);\r\n            }\r\n\r\n            if (uniform.value.texture) {\r\n                textureUnit = textureUnit + 1;\r\n\r\n                // Check if texture needs to be updated\r\n                uniform.value.update(textureUnit);\r\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\r\n            }\r\n\r\n            // For texture arrays, set uniform as an array of texture units instead of just one\r\n            if (uniform.value.length && uniform.value[0].texture) {\r\n                const textureUnits = [];\r\n                uniform.value.forEach((value) => {\r\n                    textureUnit = textureUnit + 1;\r\n                    value.update(textureUnit);\r\n                    textureUnits.push(textureUnit);\r\n                });\r\n\r\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\r\n            }\r\n\r\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\r\n        });\r\n\r\n        this.applyState();\r\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\r\n    }\r\n\r\n    remove() {\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n}\r\n\r\nfunction setUniform(gl, type, location, value) {\r\n    value = value.length ? flatten(value) : value;\r\n    const setValue = gl.renderer.state.uniformLocations.get(location);\r\n\r\n    // Avoid redundant uniform commands\r\n    if (value.length) {\r\n        if (setValue === undefined || setValue.length !== value.length) {\r\n            // clone array to store as cache\r\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\r\n        } else {\r\n            if (arraysEqual(setValue, value)) return;\r\n\r\n            // Update cached array values\r\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\r\n            gl.renderer.state.uniformLocations.set(location, setValue);\r\n        }\r\n    } else {\r\n        if (setValue === value) return;\r\n        gl.renderer.state.uniformLocations.set(location, value);\r\n    }\r\n\r\n    switch (type) {\r\n        case 5126:\r\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\r\n        case 35664:\r\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\r\n        case 35665:\r\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\r\n        case 35666:\r\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\r\n        case 35670: // BOOL\r\n        case 5124: // INT\r\n        case 35678: // SAMPLER_2D\r\n        case 35680:\r\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\r\n        case 35671: // BOOL_VEC2\r\n        case 35667:\r\n            return gl.uniform2iv(location, value); // INT_VEC2\r\n        case 35672: // BOOL_VEC3\r\n        case 35668:\r\n            return gl.uniform3iv(location, value); // INT_VEC3\r\n        case 35673: // BOOL_VEC4\r\n        case 35669:\r\n            return gl.uniform4iv(location, value); // INT_VEC4\r\n        case 35674:\r\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\r\n        case 35675:\r\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\r\n        case 35676:\r\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\r\n    }\r\n}\r\n\r\nfunction addLineNumbers(string) {\r\n    let lines = string.split('\\n');\r\n    for (let i = 0; i < lines.length; i++) {\r\n        lines[i] = i + 1 + ': ' + lines[i];\r\n    }\r\n    return lines.join('\\n');\r\n}\r\n\r\nfunction flatten(a) {\r\n    const arrayLen = a.length;\r\n    const valueLen = a[0].length;\r\n    if (valueLen === undefined) return a;\r\n    const length = arrayLen * valueLen;\r\n    let value = arrayCacheF32[length];\r\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\r\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\r\n    return value;\r\n}\r\n\r\nfunction arraysEqual(a, b) {\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0, l = a.length; i < l; i++) {\r\n        if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction setArray(a, b) {\r\n    for (let i = 0, l = a.length; i < l; i++) {\r\n        a[i] = b[i];\r\n    }\r\n}\r\n\r\nlet warnCount = 0;\r\nfunction warn(message) {\r\n    if (warnCount > 100) return;\r\n    console.warn(message);\r\n    warnCount++;\r\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\r\n}\r\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform float _Aspect;\\nuniform float _Scale;\\nuniform vec2 _ViewportPos;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec3 localPos = position;\\n    localPos.x /= _Aspect;\\n    localPos *= _Scale;\\n    vec2 finalPos = _ViewportPos + localPos.xy;\\n\\n    vUv = uv;\\n\\n    gl_Position = vec4(finalPos.xy, 0.0, 1.0);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _Texture;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec4 col = texture2D(_Texture, vUv);\\n\\n    gl_FragColor = col;\\n\\n}\";","import { Texture } from \"../../../vendor/ogl/src/core/Texture\";\r\n\r\nconst { Mesh } = require(\"../../../vendor/ogl/src/core/Mesh\");\r\nconst { Plane } = require(\"../../../vendor/ogl/src/extras/Plane\");\r\nconst { Program } = require(\"../../../vendor/ogl/src/core/Program\");\r\n\r\nconst vertex = require('./shader/quad.vert');\r\nconst fragment = require('./shader/quad.frag');\r\nconst { Vec2 } = require(\"../../../vendor/ogl/src/math/Vec2\");\r\n\r\nexport class DisplayQuad extends Mesh {\r\n\r\n    constructor(gl, {\r\n        scale,\r\n        aspect,\r\n        position\r\n    }) {\r\n\r\n        super(gl);\r\n\r\n        this.gl = gl;\r\n\r\n        this.geometry = new Plane(this.gl, {\r\n            width: 1.0,\r\n            height: 1.0,\r\n        });\r\n\r\n        const uniforms = {\r\n\r\n            _Texture: {\r\n\r\n                value: new Texture(this.gl)\r\n\r\n            },\r\n            _Aspect: {\r\n                value: window.innerWidth/window.innerHeight\r\n            },\r\n            _Scale: {\r\n                value: scale\r\n            },\r\n            _ViewportPos: {\r\n                value: position\r\n            }\r\n\r\n        }\r\n\r\n        this.program = new Program(this.gl, {\r\n            vertex,\r\n            fragment,\r\n            uniforms,\r\n            depthTest: false,\r\n            depthWrite: false\r\n        });\r\n\r\n    }\r\n\r\n    get Texture() {\r\n        return this.program.uniforms._Texture.value;\r\n    }\r\n\r\n    set Texture(t) {\r\n        this.program.uniforms._Texture.value = t;\r\n    }\r\n\r\n}","export const params = {\r\n\r\n    PHYSICS: {\r\n\r\n        // STIFFNESS: 0.35,\r\n         STIFFNESS: 0.5,\r\n       // STIFFNESS: 0.2,\r\n        MAX_BOUNDS: 2.0,\r\n        TIMESTEP: 0.01,\r\n        // CLAMP: 0.001\r\n        CLAMP: 0.0,\r\n        STEPS: 2\r\n    },\r\n\r\n    CLOTH: {\r\n\r\n        SIZE: 128\r\n\r\n    },\r\n\r\n    NOISE: {\r\n\r\n        SPATIAL_FREQ: 0.4,\r\n        TEMPORAL_FREQ: 0.1,\r\n        AMP: 10.0,\r\n\r\n    },\r\n\r\n    SHADOW: {\r\n        SIZE: 1024 * 2.0,\r\n        // BIAS: 0.005\r\n        BIAS: 0.01\r\n    }\r\n\r\n}","// TODO: multi target rendering\r\n// TODO: test stencil and depth\r\n// TODO: destroy\r\n// TODO: blit on resize?\r\nimport { Texture } from './Texture.js';\r\n\r\nexport class RenderTarget {\r\n    constructor(\r\n        gl,\r\n        {\r\n            width = gl.canvas.width,\r\n            height = gl.canvas.height,\r\n            target = gl.FRAMEBUFFER,\r\n            color = 1, // number of color attachments\r\n            depth = true,\r\n            stencil = false,\r\n            depthTexture = false, // note - stencil breaks\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            minFilter = gl.LINEAR,\r\n            magFilter = minFilter,\r\n            type = gl.UNSIGNED_BYTE,\r\n            format = gl.RGBA,\r\n            internalFormat = format,\r\n            unpackAlignment,\r\n            premultiplyAlpha,\r\n        } = {}\r\n    ) {\r\n        this.gl = gl;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n        this.buffer = this.gl.createFramebuffer();\r\n        this.target = target;\r\n        this.gl.bindFramebuffer(this.target, this.buffer);\r\n\r\n        this.textures = [];\r\n        const drawBuffers = [];\r\n\r\n        // create and attach required num of color textures\r\n        for (let i = 0; i < color; i++) {\r\n            this.textures.push(\r\n                new Texture(gl, {\r\n                    width,\r\n                    height,\r\n                    wrapS,\r\n                    wrapT,\r\n                    minFilter,\r\n                    magFilter,\r\n                    type,\r\n                    format,\r\n                    internalFormat,\r\n                    unpackAlignment,\r\n                    premultiplyAlpha,\r\n                    flipY: false,\r\n                    generateMipmaps: false,\r\n                })\r\n            );\r\n            this.textures[i].update();\r\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\r\n            drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\r\n        }\r\n\r\n        // For multi-render targets shader access\r\n        if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\r\n\r\n        // alias for majority of use cases\r\n        this.texture = this.textures[0];\r\n\r\n        // note depth textures break stencil - so can't use together\r\n        if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\r\n            this.depthTexture = new Texture(gl, {\r\n                width,\r\n                height,\r\n                minFilter: this.gl.NEAREST,\r\n                magFilter: this.gl.NEAREST,\r\n                format: this.gl.DEPTH_COMPONENT,\r\n                internalFormat: gl.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\r\n                type: this.gl.UNSIGNED_INT,\r\n            });\r\n            this.depthTexture.update();\r\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\r\n        } else {\r\n            // Render buffers\r\n            if (depth && !stencil) {\r\n                this.depthBuffer = this.gl.createRenderbuffer();\r\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\r\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\r\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\r\n            }\r\n\r\n            if (stencil && !depth) {\r\n                this.stencilBuffer = this.gl.createRenderbuffer();\r\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\r\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\r\n                this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\r\n            }\r\n\r\n            if (depth && stencil) {\r\n                this.depthStencilBuffer = this.gl.createRenderbuffer();\r\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\r\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\r\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\r\n            }\r\n        }\r\n\r\n        this.gl.bindFramebuffer(this.target, null);\r\n    }\r\n}\r\n","import { Geometry } from '../core/Geometry.js';\r\n\r\nexport class Triangle extends Geometry {\r\n    constructor(gl, { attributes = {} } = {}) {\r\n        Object.assign(attributes, {\r\n            position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\r\n            uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },\r\n        });\r\n\r\n        super(gl, attributes);\r\n    }\r\n}\r\n","import { Program } from '../core/Program.js';\r\nimport { Mesh } from '../core/Mesh.js';\r\nimport { Texture } from '../core/Texture.js';\r\nimport { RenderTarget } from '../core/RenderTarget.js';\r\nimport { Triangle } from './Triangle.js';\r\n\r\nexport class GPGPU {\r\n    constructor(\r\n        gl,\r\n        {\r\n            // Always pass in array of vec4s (RGBA values within texture)\r\n            data = new Float32Array(16),\r\n            geometry = new Triangle(gl),\r\n            type, // Pass in gl.FLOAT to force it, defaults to gl.HALF_FLOAT,\r\n            filtering = gl.NEAREST\r\n        }\r\n    ) {\r\n        this.gl = gl;\r\n        const initialData = data;\r\n        this.passes = [];\r\n        this.geometry = geometry;\r\n        this.dataLength = initialData.length / 4;\r\n\r\n        // Windows and iOS only like power of 2 textures\r\n        // Find smallest PO2 that fits data\r\n        this.size = Math.pow(2, Math.ceil(Math.log(Math.ceil(Math.sqrt(this.dataLength))) / Math.LN2));\r\n\r\n        // Create coords for output texture\r\n        this.coords = new Float32Array(this.dataLength * 2);\r\n        for (let i = 0; i < this.dataLength; i++) {\r\n            const x = (i % this.size) / this.size; // to add 0.5 to be center pixel ?\r\n            const y = Math.floor(i / this.size) / this.size;\r\n            this.coords.set([x, y], i * 2);\r\n        }\r\n\r\n        // Use original data if already correct length of PO2 texture, else copy to new array of correct length\r\n        const floatArray = (() => {\r\n            if (initialData.length === this.size * this.size * 4) {\r\n                return initialData;\r\n            } else {\r\n                const a = new Float32Array(this.size * this.size * 4);\r\n                a.set(initialData);\r\n                return a;\r\n            }\r\n        })();\r\n\r\n        // Create output texture uniform using input float texture with initial data\r\n        this.uniform = {\r\n            value: new Texture(gl, {\r\n                image: floatArray,\r\n                target: gl.TEXTURE_2D,\r\n                type: gl.FLOAT,\r\n                format: gl.RGBA,\r\n                internalFormat: gl.renderer.isWebgl2 ? gl.RGBA32F : gl.RGBA,\r\n                wrapS: gl.CLAMP_TO_EDGE,\r\n                wrapT: gl.CLAMP_TO_EDGE,\r\n                generateMipmaps: false,\r\n                minFilter: gl.NEAREST,\r\n                magFilter: gl.NEAREST,\r\n                width: this.size,\r\n                flipY: false,\r\n            }),\r\n        };\r\n\r\n        // Create FBOs\r\n        const options = {\r\n            width: this.size,\r\n            height: this.size,\r\n            type: type || gl.HALF_FLOAT || gl.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES,\r\n            format: gl.RGBA,\r\n            internalFormat: gl.renderer.isWebgl2 ? (type === gl.FLOAT ? gl.RGBA32F : gl.RGBA16F) : gl.RGBA,\r\n            minFilter: filtering,\r\n            depth: false,\r\n            unpackAlignment: 1,\r\n        };\r\n\r\n        this.fbo = {\r\n            read: new RenderTarget(gl, options),\r\n            write: new RenderTarget(gl, options),\r\n            swap: () => {\r\n                let temp = this.fbo.read;\r\n                this.fbo.read = this.fbo.write;\r\n                this.fbo.write = temp;\r\n                this.uniform.value = this.fbo.read.texture;\r\n            },\r\n        };\r\n    }\r\n\r\n    addPass({ vertex = defaultVertex, fragment = defaultFragment, uniforms = {}, textureUniform = 'tMap', enabled = true } = {}) {\r\n        uniforms[textureUniform] = this.uniform;\r\n        const program = new Program(this.gl, { vertex, fragment, uniforms });\r\n        const mesh = new Mesh(this.gl, { geometry: this.geometry, program });\r\n\r\n        const pass = {\r\n            mesh,\r\n            program,\r\n            uniforms,\r\n            enabled,\r\n            textureUniform,\r\n        };\r\n\r\n        this.passes.push(pass);\r\n        return pass;\r\n    }\r\n\r\n    render() {\r\n        const enabledPasses = this.passes.filter((pass) => pass.enabled);\r\n\r\n        enabledPasses.forEach((pass, i) => {\r\n            this.gl.renderer.render({\r\n                scene: pass.mesh,\r\n                target: this.fbo.write,\r\n                clear: false,\r\n            });\r\n            this.fbo.swap();\r\n        });\r\n    }\r\n}\r\n\r\nconst defaultVertex = /* glsl */ `\r\n    attribute vec2 uv;\r\n    attribute vec2 position;\r\n\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n        vUv = uv;\r\n        gl_Position = vec4(position, 0, 1);\r\n    }\r\n`;\r\n\r\nconst defaultFragment = /* glsl */ `\r\n    precision highp float;\r\n\r\n    uniform sampler2D tMap;\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n        gl_FragColor = texture2D(tMap, vUv);\r\n    }\r\n`;\r\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _Positions;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    gl_FragColor = texture2D(_Positions,vUv);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _Positions;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    gl_FragColor = texture2D(_Positions,vUv);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _CurrentPos;\\nuniform sampler2D _PrevPos;\\nuniform sampler2D _Normal;\\nuniform vec3 _Force;\\nuniform float _Time;\\n\\nuniform bool _IsInteracting;\\nuniform vec3 _InputWorldPos;\\nuniform float _Corner;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\n#define INERTIA 0.9998\\n// #define INERTIA 0.998\\n// #define INERTIA 0.9995\\n// #define INERTIA 0.997\\n// #define INERTIA 0.9998\\n#define timestepSq 0.015*0.015\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n  { \\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i); \\n  vec4 p = permute( permute( permute( \\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\nvec3 snoiseVec3( vec3 x ){\\n\\n  float s  = snoise(vec3( x ));\\n  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\\n  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\\n  vec3 c = vec3( s , s1 , s2 );\\n  return c;\\n\\n}\\n\\nvec3 curlNoise( vec3 p ){\\n  \\n  const float e = .1;\\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\\n\\n  vec3 p_x0 = snoiseVec3( p - dx );\\n  vec3 p_x1 = snoiseVec3( p + dx );\\n  vec3 p_y0 = snoiseVec3( p - dy );\\n  vec3 p_y1 = snoiseVec3( p + dy );\\n  vec3 p_z0 = snoiseVec3( p - dz );\\n  vec3 p_z1 = snoiseVec3( p + dz );\\n\\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\\n\\n  const float divisor = 1.0 / ( 2.0 * e );\\n  return normalize( vec3( x , y , z ) * divisor );\\n\\n}\\n\\nvec2 getCenterTexel(vec2 coord, vec2 offset) {\\n\\n    return ((floor(coord * _Size) + 0.5) / (_Size)) + offset;\\n\\n}\\n\\nvoid main() {\\n    \\n\\n    vec4 currentPos = texture2D(_CurrentPos, vUv);\\n    vec3 prevPos = texture2D(_PrevPos, vUv).xyz;\\n    vec3 delta = INERTIA * (currentPos.xyz-prevPos);\\n\\n    vec3 acc = vec3(0.0);\\n\\n    vec3 normal = texture2D(_Normal, vUv).xyz;\\n\\n    vec3 curlNoiseForce = curlNoise((currentPos.xyz *0.337) + _Time * 0.4) * 0.85;\\n    // vec3 curlNoiseForce = curlNoise((currentPos.xyz *0.137) + _Time * 0.2) * 0.65;\\n    curlNoiseForce = normal * dot(normal, curlNoiseForce);\\n\\n    if(_IsInteracting && currentPos.w == _Corner) {\\n\\n            vec3 delta = _InputWorldPos - currentPos.xyz;\\n            currentPos.xyz += delta * 0.5 * smoothstep(0.0, 2.0, dot(delta, delta));\\n\\n    } else {\\n        \\n        acc += curlNoiseForce;\\n        acc -= normalize(currentPos.xyz) * 0.08;\\n        // acc -= normalize(currentPos.xyz) * (dot(currentPos.xyz, currentPos.xyz) - 4.0) * -0.01;\\n\\n    }\\n\\n    acc *= timestepSq;\\n    delta += acc;\\n    currentPos.xyz += delta;\\n\\n    gl_FragColor = currentPos;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform sampler2D _Position;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec2 uv = vUv;\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    vec3 pos = texture2D(_Position, vUv).xyz;\\n    vec3 rNeighbour = texture2D(_Position, vUv + vec2(texelSize.x, 0.0)).xyz;\\n    vec3 lNeighbour = texture2D(_Position, vUv + vec2(-texelSize.x, 0.0)).xyz;\\n    vec3 tNeighbour = texture2D(_Position, vUv + vec2(0.0, texelSize.y)).xyz;\\n    vec3 bNeighbour = texture2D(_Position, vUv + vec2(0.0, -texelSize.y)).xyz;\\n\\n    vec3 tangent = vec3(0.0);\\n    vec3 biNormal = vec3(0.0);\\n    vec3 normal = vec3(0.0);\\n\\n    vec3 tangentDeltaA = vec3(0.0);\\n    vec3 tangentDeltaB = vec3(0.0);\\n\\n    vec3 biNormalDeltaA = vec3(0.0);\\n    vec3 biNormalDeltaB = vec3(0.0);\\n\\n    tangent = rNeighbour - pos;\\n    if(vUv.x > 1.0 - texelSize.x) {\\n         tangent = pos - lNeighbour;\\n    }\\n\\n    biNormal = tNeighbour - pos;\\n    if(vUv.y > 1.0 - texelSize.y) {\\n        biNormal = pos - bNeighbour;\\n    }\\n\\n    normal = normalize(cross(tangent, biNormal));\\n    \\n\\n    gl_FragColor = vec4(normal, 1.0);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _InitPos;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    vec3 initPos = texture2D(_InitPos, vUv).xyz;\\n\\n    vec3 rNeighbour = texture2D(_InitPos, (vUv + vec2(texelSize.x, 0.0))).xyz;\\n    vec3 lNeighbour = texture2D(_InitPos, (vUv + vec2(-texelSize.x, 0.0))).xyz;\\n    vec3 tNeighbour = texture2D(_InitPos, (vUv + vec2(0.0, texelSize.y))).xyz;\\n    vec3 bNeighbour = texture2D(_InitPos, (vUv + vec2(0.0, -texelSize.y))).xyz;\\n\\n    float rDist = 0.0;\\n    float lDist = 0.0;\\n    float tDist = 0.0;\\n    float bDist = 0.0;\\n\\n    if(vUv.x < 1.0 - texelSize.x) {\\n        rDist = length(rNeighbour - initPos );\\n    }\\n    if(vUv.x > texelSize.x) {\\n        lDist = length(lNeighbour - initPos );\\n    }\\n    if(vUv.y < 1.0 - texelSize.y) {\\n        tDist = length(tNeighbour - initPos );\\n    }  \\n    if(vUv.y > texelSize.y) {\\n        bDist = length(bNeighbour - initPos );\\n    }\\n\\n    gl_FragColor = vec4(rDist, lDist, tDist, bDist);\\n    \\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _InitPos;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    vec3 initPos = texture2D(_InitPos, vUv).xyz;\\n\\n    vec3 tRNeighbour = texture2D(_InitPos, (vUv + vec2(texelSize.x, texelSize.y))).xyz;\\n    vec3 bLNeighbour = texture2D(_InitPos, (vUv + vec2(-texelSize.x, -texelSize.y))).xyz;\\n    vec3 tLNeighbour = texture2D(_InitPos, (vUv + vec2(-texelSize.x, texelSize.y))).xyz;\\n    vec3 bRNeighbour = texture2D(_InitPos, (vUv + vec2(texelSize.x, -texelSize.y))).xyz;\\n\\n    float trDist = 0.0;\\n    float tlDist = 0.0;\\n    float brDist = 0.0;\\n    float blDist = 0.0;\\n\\n    // vec2 floorCoord = floor(vUv * 127.0);\\n    // vec2 modFloorCoord = mod(floorCoord, 2.0);\\n\\n    bool isTr = vUv.x < 1.0 - texelSize.x && vUv.y < 1.0 - texelSize.y;\\n    bool isBl = vUv.x > texelSize.x && vUv.y > texelSize.y;\\n\\n    bool isTl = vUv.x > texelSize.x && vUv.y < 1.0 - texelSize.y;\\n    bool isBr = vUv.x < 1.0 - texelSize.x && vUv.y > texelSize.y;\\n\\n    if(isTr) {\\n        trDist = length(tRNeighbour - initPos );\\n    }\\n    if(isBl) {\\n        blDist = length(bLNeighbour - initPos );\\n    } \\n    if(isTl) {\\n        tlDist = length(tLNeighbour - initPos );\\n    }\\n    if(isBr) {\\n        brDist = length(bRNeighbour - initPos );\\n    } \\n\\n    gl_FragColor = vec4(trDist, blDist, tlDist, brDist);\\n    \\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform vec2 _TexelSize;\\nuniform float _Flip;\\nuniform sampler2D _RestLength;\\nuniform float _Stiffness;\\nuniform float _Clamp;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvec3 constrain(vec3 a, vec3 b, float restLength) {\\n\\n    vec3 delta = b - a;\\n    float dist = length(delta);\\n       if(dist <= _Clamp) {\\n        return vec3(0.0, 0.0, 0.0);\\n    }\\n    float percentage = (dist-restLength) / dist;\\n    return delta * percentage * _Stiffness;\\n\\n}\\n\\nvec2 getCenterTexel(vec2 coord, vec2 offset) {\\n\\n    return ((floor(coord * _Size) + 0.5) / (_Size)) + offset;\\n\\n}\\n\\n//inspired by:\\n//https://pdfs.semanticscholar.org/4718/6dcbbc8ccc01c6f4143719d09ed5ab4395fb.pdf?_ga=2.107277378.1544954547.1603025794-293436447.1603025794\\n\\nvoid main() {\\n\\n    // vec4 pos = texture2D(tMap, getCenterTexel(vUv, vec2(0.0)));\\n    vec4 pos = texture2D(tMap, (vUv));\\n    \\n    //r = right\\n    //g = left\\n    //b = top\\n    //w = bottom\\n    vec2 restLength = texture2D(_RestLength, vUv).xy;\\n    vec3 displacement = vec3(0.0, 0.0, 0.0);\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    //floor uv coordinate to get integer representation\\n    //so we know which particle to go towards\\n    float floorCoord = floor(vUv.x * (_Size-1.0));\\n    float modFloorCoord = mod(floorCoord, 2.0);\\n    bool constrainA = modFloorCoord == mix(0.0, 1.0, _Flip);\\n    bool constrainB = modFloorCoord == mix(1.0, 0.0, _Flip);\\n\\n    vec3 x1 = texture2D(tMap, vUv + vec2(texelSize.x, 0.0)).xyz;\\n    vec3 x2 = texture2D(tMap, vUv + vec2(-texelSize.x, 0.0)).xyz;\\n\\n    if(constrainA) displacement = constrain(pos.xyz, x1, restLength.x);\\n    if(constrainB) displacement = constrain(pos.xyz, x2, restLength.y);\\n\\n    pos.xyz += displacement;\\n\\n    gl_FragColor = pos;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform vec2 _TexelSize;\\nuniform float _Flip;\\nuniform sampler2D _RestLength;\\nuniform float _Stiffness;\\nuniform float _Clamp;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvec3 constrain(vec3 a, vec3 b, float restLength) {\\n\\n    vec3 delta = b - a;\\n    float dist = length(delta);\\n       if(dist <= _Clamp) {\\n        return vec3(0.0, 0.0, 0.0);\\n    }\\n    float percentage = (dist-restLength) / dist;\\n    return delta * percentage * _Stiffness;\\n\\n}\\n\\nvec2 getCenterTexel(vec2 coord, vec2 offset) {\\n\\n    return ((floor(coord * _Size) + 0.5) / (_Size)) + offset;\\n\\n}\\n\\n//inspired by:\\n//https://pdfs.semanticscholar.org/4718/6dcbbc8ccc01c6f4143719d09ed5ab4395fb.pdf?_ga=2.107277378.1544954547.1603025794-293436447.1603025794\\n\\nvoid main() {\\n\\n    // vec4 pos = texture2D(tMap, getCenterTexel(vUv, vec2(0.0)));\\n    vec4 pos = texture2D(tMap, vUv);\\n    vec3 displacement = vec3(0.0, 0.0, 0.0);\\n\\n    //r = right\\n    //g = left\\n    //b = top\\n    //w = bottom\\n    vec2 restLength = texture2D(_RestLength, vUv).zw;\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    //floor uv coordinate to get integer representation\\n    //so we know which particle to go towards\\n    float floorCoord = floor(vUv.y * (_Size-1.0));\\n    float modFloorCoord = mod(floorCoord, 2.0);\\n    bool constrainA = modFloorCoord == mix(0.0, 1.0, _Flip);\\n    bool constrainB = modFloorCoord == mix(1.0, 0.0, _Flip);\\n\\n    vec3 x1 = texture2D(tMap, vUv + vec2(0.0, texelSize.y)).xyz;\\n    vec3 x2 = texture2D(tMap, vUv + vec2(0.0, -texelSize.y)).xyz;\\n\\n    if(constrainA) displacement = constrain(pos.xyz, x1, restLength.x);\\n    if(constrainB) displacement = constrain(pos.xyz, x2, restLength.y);\\n\\n    // displacement *= pos.w;\\n    pos.xyz += displacement;\\n\\n    gl_FragColor = pos;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform vec2 _TexelSize;\\nuniform float _Flip;\\nuniform sampler2D _RestLength;\\nuniform float _Stiffness;\\nuniform float _Clamp;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvec3 constrain(vec3 a, vec3 b, float restLength) {\\n\\n    vec3 delta = b - a;\\n    float dist = length(delta);\\n       if(dist <= _Clamp) {\\n        return vec3(0.0, 0.0, 0.0);\\n    }\\n    float percentage = (dist-restLength) / dist;\\n    return delta * percentage * _Stiffness;\\n\\n}\\n\\n//inspired by:\\n//https://pdfs.semanticscholar.org/4718/6dcbbc8ccc01c6f4143719d09ed5ab4395fb.pdf?_ga=2.107277378.1544954547.1603025794-293436447.1603025794\\n\\nvoid main() {\\n\\n    // vec4 pos = texture2D(tMap, getCenterTexel(vUv, vec2(0.0)));\\n    vec4 pos = texture2D(tMap, (vUv));\\n    \\n    //r = top right\\n    //g = bottom left\\n    //b = top left\\n    //w = bottom right\\n    vec2 restLength = texture2D(_RestLength, vUv).xy;\\n    vec3 displacement = vec3(0.0, 0.0, 0.0);\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    //floor uv coordinate to get integer representation\\n    //so we know which particle to go towards\\n    vec2 floorCoord = floor(vUv * (_Size-1.0));\\n    vec2 modFloorCoord = mod(floorCoord, 2.0);\\n\\n    bool constrainA = modFloorCoord.x == mix(0.0, 1.0, _Flip) && (vUv.y < 1.0 - texelSize.y) && (vUv.x < 1.0 - texelSize.x);\\n    bool constrainB = modFloorCoord.x == mix(1.0, 0.0, _Flip) && (vUv.y > texelSize.y) && (vUv.x > texelSize.x);\\n\\n    vec3 x1 = texture2D(tMap, vUv + vec2(texelSize.x, texelSize.y)).xyz;\\n    vec3 x2 = texture2D(tMap, vUv + vec2(-texelSize.x, -texelSize.y)).xyz;\\n\\n    if(constrainA) displacement = constrain(pos.xyz, x1, restLength.x);\\n    if(constrainB) displacement = constrain(pos.xyz, x2, restLength.y);\\n\\n    pos.xyz += displacement;\\n\\n    gl_FragColor = pos;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D tMap;\\nuniform vec2 _TexelSize;\\nuniform float _Flip;\\nuniform sampler2D _RestLength;\\nuniform float _Stiffness;\\nuniform float _Clamp;\\nuniform float _Size;\\n\\nvarying vec2 vUv;\\n\\nvec3 constrain(vec3 a, vec3 b, float restLength) {\\n\\n    vec3 delta = b - a;\\n    float dist = length(delta);\\n       if(dist <= _Clamp) {\\n        return vec3(0.0, 0.0, 0.0);\\n    }\\n    float percentage = (dist-restLength) / dist;\\n    return delta * percentage * _Stiffness;\\n\\n}\\n\\n//inspired by:\\n//https://pdfs.semanticscholar.org/4718/6dcbbc8ccc01c6f4143719d09ed5ab4395fb.pdf?_ga=2.107277378.1544954547.1603025794-293436447.1603025794\\n\\nvoid main() {\\n\\n    // vec4 pos = texture2D(tMap, getCenterTexel(vUv, vec2(0.0)));\\n    vec4 pos = texture2D(tMap, (vUv));\\n    \\n    //r = top right\\n    //g = bottom left\\n    //b = top left\\n    //w = bottom right\\n    vec2 restLength = texture2D(_RestLength, vUv).zw;\\n    vec3 displacement = vec3(0.0, 0.0, 0.0);\\n\\n    vec2 texelSize = vec2(1.0/_Size);\\n\\n    //floor uv coordinate to get integer representation\\n    //so we know which particle to go towards\\n    vec2 floorCoord = floor(vUv * (_Size-1.0));\\n    vec2 modFloorCoord = mod(floorCoord, 2.0);\\n    bool constrainA = modFloorCoord.x == mix(1.0, 0.0, _Flip) && (vUv.y < 1.0 - texelSize.y) && (vUv.x > texelSize.x);\\n    bool constrainB = modFloorCoord.x == mix(0.0, 1.0, _Flip) && (vUv.y > texelSize.y) && (vUv.x < 1.0 - texelSize.x);\\n\\n    vec3 x1 = texture2D(tMap, vUv + vec2(-texelSize.x, texelSize.y)).xyz;\\n    vec3 x2 = texture2D(tMap, vUv + vec2(texelSize.x, -texelSize.y)).xyz;\\n\\n    if(constrainA) displacement = constrain(pos.xyz, x1, restLength.x);\\n    if(constrainB) displacement = constrain(pos.xyz, x2, restLength.y);\\n\\n    pos.xyz += displacement;\\n\\n    gl_FragColor = pos;\\n\\n}\";","import { Program } from \"../../../../vendor/ogl/src/core/Program\";\r\nimport { Vec2 } from \"../../../../vendor/ogl/src/math/Vec2\";\r\nimport { Texture } from \"../../../../vendor/ogl/src/core/Texture\";\r\nimport { Vec3 } from \"../../../../vendor/ogl/src/math/Vec3\";\r\nconst { GPGPU } = require(\"../../../../vendor/ogl/src/extras/GPGPU\");\r\n\r\nconst prevPosKernel = require('./kernels/prevPos.frag');\r\nconst currentPosKernel = require('./kernels/currentPos.frag');\r\nconst positionKernel = require('./kernels/position.frag');\r\nconst normalKernel = require('./kernels/calcNormal.frag');\r\n\r\nconst restlengthKernel = require('./kernels/restLength.frag');\r\nconst restLengthDiagonalKernel = require('./kernels/restLengthDiagonal.frag');\r\n\r\nconst constrainHorizontalKernel = require('./kernels/constrainHorizontal.frag');\r\nconst constrainVerticalKernel = require('./kernels/constrainVertical.frag');\r\nconst constrainBLTRKernel = require('./kernels/constrainBLTR.frag');\r\nconst constrainBRTLKernel = require('./kernels/constrainBRTL.frag');\r\n\r\nimport {params} from '../../../params.js';\r\n\r\nexport class Simulator {\r\n\r\n    constructor(gl, {\r\n        data,\r\n        countX,\r\n        countY,\r\n    }) {\r\n\r\n        this.gl = gl;\r\n\r\n        this.data = data;\r\n\r\n        this.countX = countX;\r\n        this.countY = countY;\r\n\r\n        this.initSimulators();\r\n        this.initPrograms();\r\n        this.prewarm();\r\n\r\n    }\r\n\r\n    initSimulators() {\r\n\r\n        this.positionData = new Float32Array(this.countX*this.countY*4);\r\n        let positionDataIterator = 0;\r\n        let origDataIterator = 0;\r\n        \r\n        for(let y = 0; y < this.countY; y++) {\r\n            \r\n            for(let x = 0; x < this.countX; x++) {\r\n\r\n                this.positionData[positionDataIterator++] = this.data[origDataIterator++];\r\n                this.positionData[positionDataIterator++] = this.data[origDataIterator++];\r\n                this.positionData[positionDataIterator++] = this.data[origDataIterator++];\r\n                \r\n                let corner = 0;\r\n\r\n                let isTopLeft = y === 0 && x === 0;\r\n                let isTopRight = y === 0 && x === this.countX - 1;\r\n                let isBottomLeft = y === this.countY-1 && x === this.countX -1;\r\n                let isBottomRight = y === this.countY-1 && x === 0;\r\n\r\n                if(isTopLeft) corner = 1;\r\n                if(isTopRight) corner = 2;\r\n                if(isBottomLeft) corner = 3;\r\n                if(isBottomRight) corner = 4;\r\n               \r\n                this.positionData[positionDataIterator++] = corner;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.currentPosCapture = new GPGPU(this.gl, {\r\n            data: this.positionData,\r\n            type: this.gl.FLOAT\r\n        });\r\n\r\n        const prevPositionData = this.positionData.slice();\r\n        let prevPosIterator = 0;\r\n        origDataIterator = 0;\r\n        let twoPI = Math.PI * 2;\r\n            \r\n            for(let x = 0; x < this.countX*this.countY; x++) {\r\n\r\n                let offsetx = Math.random() * 2.0 - 1.0;\r\n                let offsety = Math.random() * 2.0 - 1.0;\r\n                let offsetz = Math.random() * 2.0 - 1.0;\r\n\r\n                // let offsetx = Math.cos(angleX) * Math.cos(angleX);\r\n                // let offsety = Math.sin(angleY);\r\n                // let offsetz = Math.cos(angleZ) * Math.sin(angleZ); \r\n\r\n                prevPositionData[prevPosIterator++] += (offsetx*0.01);\r\n                prevPositionData[prevPosIterator++] += (offsety*0.01);\r\n                prevPositionData[prevPosIterator++] += (offsetz*0.01);\r\n                prevPositionData[prevPosIterator++] += 0.0;\r\n\r\n        }\r\n\r\n        this.prevPositionCapture = new GPGPU(this.gl, {\r\n            data: prevPositionData,\r\n            type: this.gl.FLOAT\r\n        });\r\n\r\n        this.positionSim = new GPGPU(this.gl, {\r\n            data: this.positionData,\r\n            type: this.gl.FLOAT,\r\n            // filtering: this.gl.N\r\n        });\r\n\r\n        const normalData = new Float32Array(this.countX*this.countY*4.0);\r\n        let normalIterator = 0;\r\n        \r\n        for(let i = 0; i < this.countX*this.countY; i++) {\r\n\r\n            normalData[normalIterator++] = 0.0;\r\n            normalData[normalIterator++] = 0.0;\r\n            normalData[normalIterator++] = -1.0;\r\n            normalData[normalIterator++] = 1.0;\r\n\r\n        }\r\n\r\n        this.normalSim = new GPGPU(this.gl, {\r\n            data: normalData,\r\n            type: this.gl.FLOAT,\r\n            // filtering: this.gl.LINEAR\r\n        });\r\n\r\n        this.restlengthCapture = new GPGPU(this.gl, {\r\n            data: new Float32Array(this.countX*this.countY*4),\r\n            type: this.gl.FLOAT\r\n        });\r\n\r\n        this.restlengthDiagonalCapture = new GPGPU(this.gl, {\r\n            data: new Float32Array(this.countX*this.countY*4),\r\n            type: this.gl.FLOAT\r\n        });\r\n        \r\n        this.constraintSim = new GPGPU(this.gl, {\r\n            data: this.positionData,\r\n            type: this.gl.FLOAT\r\n        });\r\n\r\n    }\r\n\r\n    initPrograms() {\r\n\r\n        const restlengthCaptureU = {\r\n            _InitPos: this.positionSim.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.restlengthCapture.addPass({\r\n            fragment: restlengthKernel,\r\n            uniforms: restlengthCaptureU\r\n        });\r\n\r\n        const restlengthDiagonalU = {\r\n            _InitPos: this.positionSim.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.restlengthDiagonalCapture.addPass({\r\n            fragment: restLengthDiagonalKernel,\r\n            uniforms: restlengthDiagonalU\r\n        });\r\n\r\n        const normalSimU = {\r\n            _Position: this.positionSim.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.normalSim.addPass({\r\n            fragment: normalKernel,\r\n            uniforms: normalSimU\r\n        });\r\n\r\n        const positionSimU = {\r\n            _PrevPos: this.prevPositionCapture.uniform,\r\n            _CurrentPos: this.currentPosCapture.uniform,\r\n            _Normal: this.normalSim.uniform,\r\n            _Force: {\r\n                value: new Vec3(0.0, 0.0, 0.0)\r\n            },\r\n            _Time: {\r\n                value: 0.0\r\n            },\r\n            _InputWorldPos: {\r\n                value: new Vec3(0.0,0.0,0.0)\r\n            },\r\n            _IsInteracting: {\r\n                value: false\r\n            },\r\n            _Corner: {\r\n                value: 0\r\n            },\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.positionSim.addPass({\r\n            fragment: positionKernel,\r\n            uniforms: positionSimU\r\n        });\r\n\r\n        const prevPosCaptureSimU = {\r\n            _Positions: this.currentPosCapture.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.prevPositionCapture.addPass({\r\n            fragment: prevPosKernel,\r\n            uniforms: prevPosCaptureSimU\r\n        });\r\n\r\n        const currentPosCaptureSimU = {\r\n            _Positions: this.positionSim.uniform,\r\n            _Size: {\r\n                value: params.CLOTH.SIZE\r\n              },\r\n        }\r\n\r\n        this.currentPosCapture.addPass({\r\n            fragment: currentPosKernel,\r\n            uniforms: currentPosCaptureSimU\r\n        });\r\n\r\n        //MAKE A SINGLE UNIFORM OR FUNCTION THAT RETURNS A UNIFORM WITH DESIRED PARAMS\r\n\r\n        // const constrainHorizontalFirstPassU = {\r\n        //     _TexelSize: {\r\n        //         value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        //     },\r\n        //     _Stiffness: {\r\n        //         value: params.PHYSICS.STIFFNESS\r\n        //     },\r\n        //     _Flip: {\r\n        //         value: 0.0\r\n        //     },\r\n        //      _RestLength: this.restlengthCapture.uniform,\r\n        //      _Clamp: {\r\n        //          value: params.PHYSICS.CLAMP\r\n        //      },\r\n        //      _Size: {\r\n        //         value: params.CLOTH.SIZE\r\n        //       },\r\n        // }\r\n        \r\n        // const constrainHorizontalSecondPassU = {\r\n        //     _TexelSize: {\r\n        //         value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        //     },\r\n        //     _Stiffness: {\r\n        //         value: params.PHYSICS.STIFFNESS\r\n        //     },\r\n        //     _Flip: {\r\n        //         value: 1.0\r\n        //     },\r\n        //     _RestLength: this.restlengthCapture.uniform,\r\n        //     _Clamp: {\r\n        //         value: params.PHYSICS.CLAMP\r\n        //     },\r\n        //     _Size: {\r\n        //         value: params.CLOTH.SIZE\r\n        //       },\r\n\r\n        // }\r\n        \r\n        // const constrainVerticalFirstPassU = {\r\n        //     _TexelSize: {\r\n        //         value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        //     },\r\n        //     _Stiffness: {\r\n        //         value: params.PHYSICS.STIFFNESS\r\n        //     },\r\n        //     _Flip: {\r\n        //         value: 0.0\r\n        //     },\r\n        //     _RestLength: this.restlengthCapture.uniform,\r\n        //     _Clamp: {\r\n        //         value: params.PHYSICS.CLAMP\r\n        //     },\r\n        //     _Size: {\r\n        //         value: params.CLOTH.SIZE\r\n        //       },\r\n\r\n        // }\r\n\r\n        // const constrainVerticalSecondPassU = {\r\n        //     _TexelSize: {\r\n        //         value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        //     },\r\n        //     _Stiffness: {\r\n        //         value: params.PHYSICS.STIFFNESS\r\n        //     },\r\n        //     _Flip: {\r\n        //         value: 1.0\r\n        //     },\r\n        //     _RestLength: this.restlengthCapture.uniform,\r\n        //     _Clamp: {\r\n        //         value: params.PHYSICS.CLAMP\r\n        //     },\r\n        //     _Size: {\r\n        //         value: params.CLOTH.SIZE\r\n        //       },\r\n\r\n        // }\r\n\r\n        // const constrainBLTRfirstPasssU = {\r\n        //     _TexelSize: {\r\n        //         value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        //     },\r\n        //     _Stiffness: {\r\n        //         value: params.PHYSICS.STIFFNESS\r\n        //     },\r\n        //     _Flip: {\r\n        //         value: 0.0\r\n        //     },\r\n        //     _RestLength: this.restlengthDiagonalCapture.uniform,\r\n        //     _Clamp: {\r\n        //         value: params.PHYSICS.CLAMP\r\n        //     },\r\n        //     _Size: {\r\n        //         value: params.CLOTH.SIZE\r\n        //       },\r\n\r\n        // }\r\n\r\n        // const constrainBLTRsecondPasssU = {\r\n        //     _TexelSize: {\r\n        //         value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        //     },\r\n        //     _Stiffness: {\r\n        //         value: params.PHYSICS.STIFFNESS\r\n        //     },\r\n        //     _Flip: {\r\n        //         value: 1.0\r\n        //     },\r\n        //     _RestLength: this.restlengthDiagonalCapture.uniform,\r\n        //     _Clamp: {\r\n        //         value: params.PHYSICS.CLAMP\r\n        //     },\r\n        //     _Size: {\r\n        //         value: params.CLOTH.SIZE\r\n        //       },\r\n        // }\r\n\r\n        // const constrainBRTLfirstPasssU = {\r\n        //     _TexelSize: {\r\n        //         value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        //     },\r\n        //     _Stiffness: {\r\n        //         value: params.PHYSICS.STIFFNESS\r\n        //     },\r\n        //     _Flip: {\r\n        //         value: 0.0\r\n        //     },\r\n        //     _RestLength: this.restlengthDiagonalCapture.uniform,\r\n        //     _Clamp: {\r\n        //         value: params.PHYSICS.CLAMP\r\n        //     },\r\n        //     _Size: {\r\n        //         value: params.CLOTH.SIZE\r\n        //       },\r\n\r\n        // }\r\n\r\n        // const constrainBRTLsecondPasssU = {\r\n        //     _TexelSize: {\r\n        //         value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        //     },\r\n        //     _Stiffness: {\r\n        //         value: params.PHYSICS.STIFFNESS\r\n        //     },\r\n        //     _Flip: {\r\n        //         value: 1.0\r\n        //     },\r\n        //     _RestLength: this.restlengthDiagonalCapture.uniform,\r\n        //     _Clamp: {\r\n        //         value: params.PHYSICS.CLAMP\r\n        //     },\r\n        //     _Size: {\r\n        //         value: params.CLOTH.SIZE\r\n        //       },\r\n\r\n        // }\r\n\r\n        const constrainHorizontalFirstPassU = this.createConstraintUniform({flip: 0.0, restlength: this.restlengthCapture.uniform}); \r\n        const constrainHorizontalSecondPassU = this.createConstraintUniform({flip: 1.0, restlength: this.restlengthCapture.uniform});\r\n        \r\n        const constrainVerticalFirstPassU = this.createConstraintUniform({flip: 0.0, restlength: this.restlengthCapture.uniform});\r\n        const constrainVerticalSecondPassU = this.createConstraintUniform({flip: 1.0, restlength: this.restlengthCapture.uniform});\r\n\r\n        const constrainBLTRfirstPasssU = this.createConstraintUniform({flip: 0.0, restlength: this.restlengthDiagonalCapture.uniform}); \r\n        const constrainBLTRsecondPasssU = this.createConstraintUniform({flip: 1.0, restlength: this.restlengthDiagonalCapture.uniform});\r\n        \r\n        const constrainBRTLfirstPasssU = this.createConstraintUniform({flip: 0.0, restlength: this.restlengthDiagonalCapture.uniform});\r\n        const constrainBRTLsecondPasssU = this.createConstraintUniform({flip: 1.0, restlength: this.restlengthDiagonalCapture.uniform});\r\n\r\n        for(let i = 0; i < params.PHYSICS.STEPS; i++) {\r\n\r\n                            // //HORIZONTAL CONSTRAINTS\r\n            this.positionSim.addPass({\r\n                fragment: constrainHorizontalKernel,\r\n                uniforms: constrainHorizontalFirstPassU\r\n            });\r\n    \r\n            this.positionSim.addPass({\r\n                fragment: constrainHorizontalKernel,\r\n                uniforms: constrainHorizontalSecondPassU\r\n            });\r\n\r\n            //VERTICAL CONSTRAINTS\r\n            this.positionSim.addPass({\r\n                fragment: constrainVerticalKernel,\r\n                uniforms: constrainVerticalFirstPassU\r\n            });\r\n    \r\n            this.positionSim.addPass({\r\n                fragment: constrainVerticalKernel,\r\n                uniforms: constrainVerticalSecondPassU\r\n            });\r\n\r\n            //DIAGONAL CONSTRAINTS\r\n            this.positionSim.addPass({\r\n                fragment: constrainBLTRKernel,\r\n                uniforms: constrainBLTRfirstPasssU\r\n            });\r\n\r\n            this.positionSim.addPass({\r\n                fragment: constrainBRTLKernel,\r\n                uniforms: constrainBRTLfirstPasssU\r\n            });\r\n\r\n            this.positionSim.addPass({\r\n                fragment: constrainBLTRKernel,\r\n                uniforms: constrainBLTRsecondPasssU\r\n            });\r\n\r\n            this.positionSim.addPass({\r\n                fragment: constrainBRTLKernel,\r\n                uniforms: constrainBRTLsecondPasssU\r\n            });\r\n\r\n            }\r\n\r\n    }\r\n\r\n    createDataTexture({\r\n        data,\r\n        size\r\n    }) {\r\n\r\n        return new Texture(this.gl, {\r\n            image: data,\r\n            target: this.gl.TEXTURE_2D,\r\n            type: this.gl.FLOAT,\r\n            format: this.gl.RGBA,\r\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\r\n            wrapS: this.gl.CLAMP_TO_EDGE,\r\n            wrapT: this.gl.CLAMP_TO_EDGE,\r\n            generateMipmaps: false,\r\n            minFilter: this.gl.NEAREST,\r\n            magFilter: this.gl.NEAREST,\r\n            width: size,\r\n            height: size,\r\n            flipY: false\r\n        })\r\n\r\n    }\r\n\r\n    createConstraintUniform({\r\n        flip,\r\n        restlength\r\n    }) {\r\n       \r\n\r\n    const uniform = {\r\n       \r\n        _TexelSize: {\r\n            value: new Vec2(1.0 / this.countX, 1.0 / this.countY)\r\n        },\r\n        _Stiffness: {\r\n            value: params.PHYSICS.STIFFNESS\r\n        },\r\n        _Flip: {\r\n            value: flip\r\n        },\r\n        _RestLength: restlength,\r\n        _Clamp: {\r\n            value: params.PHYSICS.CLAMP\r\n        },\r\n        _Size: {\r\n            value: params.CLOTH.SIZE\r\n          },\r\n\r\n    }\r\n\r\n       return uniform \r\n    }\r\n\r\n    prewarm() {\r\n\r\n        this.cornerUpdated = false;\r\n        this.restlengthCapture.render();\r\n        this.restlengthDiagonalCapture.render();\r\n\r\n    }\r\n\r\n    update(t, {\r\n        isInteracting,\r\n        inputWorldPos\r\n    }) {\r\n\r\n        this.currentPosCapture.render();   \r\n\r\n        if(isInteracting) {\r\n            if(this.cornerUpdated === false) {\r\n                const corner = (Math.floor(Math.random() * 4) + 1);\r\n                this.positionSim.passes[0].program.uniforms._Corner.value = corner;\r\n                this.cornerUpdated = true;\r\n            }\r\n        } else {\r\n            this.cornerUpdated = false;\r\n        }\r\n\r\n        this.positionSim.passes[0].program.uniforms._Time.value = t;\r\n        this.positionSim.passes[0].program.uniforms._IsInteracting.value = isInteracting;\r\n        this.positionSim.passes[0].program.uniforms._InputWorldPos.value.copy(inputWorldPos);\r\n        this.positionSim.render();\r\n        this.normalSim.render();\r\n        this.prevPositionCapture.render();\r\n        \r\n    }\r\n\r\n    get Positions() {\r\n        return this.positionSim.fbo.read.texture\r\n    }\r\n\r\n    get Normals() {\r\n        return this.normalSim.fbo.read.texture\r\n    }\r\n\r\n    get RestLengthsOrtho() {\r\n        return this.restlengthCapture.fbo.read.texture\r\n    }\r\n\r\n    get RestLengthsDiagonal() {\r\n        return this.restlengthDiagonalCapture.fbo.read.texture\r\n    }\r\n\r\n}","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform sampler2D _Positions;\\nuniform sampler2D _Normals;\\n\\nuniform mat4 projectionMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform mat3 normalMatrix;\\n\\nvarying vec2 vUv;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nuniform float _Size;\\n\\n#define LIGHT vec3(0.0, 5.0, 2.3)\\n\\nvoid main() {\\n\\n    vec3 pos = texture2D(_Positions, (position + vec2(0.0))).xyz;\\n    vec4 mvPos = modelViewMatrix * vec4(pos, 1.0);\\n    vec3 norm = texture2D(_Normals, (position + vec2(0.0))).xyz;\\n\\n    gl_Position = projectionMatrix * mvPos;\\n    vUv = uv;\\n    vPos = pos.xyz;\\n    vNormal = normalMatrix * norm;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform samplerCube _CubeMap;\\n\\nuniform vec3 cameraPosition;\\n\\nvarying vec3 vNormal;\\nvarying vec3 vPos;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    vec3 normal = normalize(vNormal);    \\n    vec3 reflectV = reflect(normalize(vPos - cameraPosition), normal);\\n    vec3 col = textureCube(_CubeMap, reflectV).xyz;\\n    gl_FragColor = vec4(col, 1.0);\\n\\n}\";","import {\r\n  Mesh\r\n} from \"../../../vendor/ogl/src/core/Mesh.js\";\r\nimport {\r\n  Plane\r\n} from \"../../../vendor/ogl/src/extras/Plane.js\";\r\nimport {\r\n  Program\r\n} from \"../../../vendor/ogl/src/core/Program.js\";\r\n\r\nimport {\r\n  Geometry\r\n} from \"../../../vendor/ogl/src/core/Geometry.js\";\r\nimport {\r\n  Vec3\r\n} from \"../../../vendor/ogl/src/math/Vec3.js\";\r\n\r\nimport {params} from '../../params.js';\r\n\r\nimport {Simulator} from './Simulator/index.js';\r\nimport { Texture } from \"../../../vendor/ogl/src/core/Texture.js\";\r\n\r\nimport cubemap from '../../../static/cubemap/*.jpg';\r\n\r\nconst vertex = require(\"./shader/verlet.vert\");\r\nconst fragment = require(\"./shader/verlet.frag\");\r\n\r\nexport class Verlet extends Mesh {\r\n  constructor(gl) {\r\n    super(gl);\r\n\r\n    this.gl = gl;\r\n\r\n    this.initGeometry();\r\n    this.initProgram();\r\n    // this.initShadowPass();\r\n\r\n    this.timestep = 18.0 / 1000.0 //I suppose this is hardcoded delta time, from what I could gather from logging delta time\r\n    this.timeStepSQ = this.timestep * this.timestep;\r\n    this.windForce = new Vec3(0.0, 0.0, 0.0);\r\n    this.forceDir = new Vec3(0.0, 0.0, 0.0);\r\n    // this.gravity = new Vec3(0.0, -0.0005, 0.0);\r\n    this.gravity = new Vec3(0.0, 0, 0.0);\r\n    this.t = 0;\r\n    this.flipped = false;\r\n\r\n    // this.mode = this.gl.POINTS;\r\n\r\n  }\r\n\r\n  initGeometry() {\r\n    this.widthSegments = params.CLOTH.SIZE-1;\r\n    this.heightSegments = params.CLOTH.SIZE-1;\r\n\r\n    const width = 5.0;\r\n    const height = 5.0;\r\n\r\n    const refGeometry = new Plane(this.gl, {\r\n      width,\r\n      height,\r\n      widthSegments: this.widthSegments,\r\n      heightSegments: this.heightSegments\r\n    });\r\n\r\n    this.faces = []; //will be used for normals\r\n    this.particles = [];\r\n    this.sticks = [];\r\n\r\n    const {\r\n      position,\r\n      uv,\r\n      normal,\r\n      index\r\n    } = refGeometry.attributes;\r\n\r\n\r\n    this.simulator = new Simulator(this.gl, {\r\n      data: position.data,\r\n      countX: params.CLOTH.SIZE,\r\n      countY: params.CLOTH.SIZE,\r\n    });\r\n\r\n    this.geometry = new Geometry(this.gl, {\r\n      position: {\r\n        size: 2,\r\n        data: this.simulator.positionSim.coords\r\n      },\r\n      uv: {\r\n        size: 2,\r\n        data: uv.data\r\n      },\r\n      index: {\r\n        data: index.data\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n\r\n  initProgram() {\r\n\r\n    this.cubeMapTexture = new Texture(this.gl, {\r\n      target: this.gl.TEXTURE_CUBE_MAP,\r\n    });\r\n\r\n    this.loadCubeMap();\r\n\r\n    const uniforms = {\r\n      _Positions: {\r\n        value: this.simulator.Positions\r\n      },\r\n      _Normals: {\r\n        value: this.simulator.Normals\r\n      },\r\n      _Size: {\r\n        value: params.CLOTH.SIZE\r\n      },\r\n      _CubeMap: {\r\n        value: this.cubeMapTexture\r\n      },\r\n    };\r\n\r\n    this.program = new Program(this.gl, {\r\n      vertex,\r\n      fragment,\r\n      uniforms,\r\n      cullFace: null,\r\n      transparent: false\r\n    });\r\n  }\r\n\r\n      async loadCubeMap() {\r\n\r\n        function loadImage(src) {\r\n            return new Promise(res => {\r\n\r\n                const img = new Image();\r\n                img.onload = () => res(img);\r\n                img.src = src;\r\n\r\n            });\r\n        }\r\n\r\n        const images = await Promise.all([\r\n            loadImage(cubemap.posx),\r\n            loadImage(cubemap.negx),\r\n            loadImage(cubemap.posy),\r\n            loadImage(cubemap.negy),\r\n            loadImage(cubemap.posz),\r\n            loadImage(cubemap.negz),\r\n        ]);\r\n\r\n        this.cubeMapTexture.image = images;\r\n\r\n    }\r\n\r\n  update({\r\n    t,\r\n    isInteracting,\r\n    inputWorldPos,\r\n    scene\r\n  }) {\r\n    this.t += t;\r\n    this.simulator.update(this.t, {\r\n      isInteracting,\r\n      inputWorldPos\r\n    });\r\n\r\n  }\r\n\r\n  FlipFace() {\r\n\r\n\r\n    this.program.cullFace = this.flipped ? this.gl.FRONT : this.gl.BACK;\r\n    this.program.uniforms._Flip.value = this.flipped ? -1.0 : 1.0;\r\n    this.flipped = !this.flipped;\r\n\r\n  }\r\n\r\n}","import {\r\n    Renderer\r\n} from \"../../vendor/ogl/src/core/Renderer.js\";\r\nimport {\r\n    Transform\r\n} from \"../../vendor/ogl/src/core/Transform.js\";\r\nimport {\r\n    Camera\r\n} from \"../../vendor/ogl/src/core/Camera.js\";\r\nimport {\r\n    Orbit\r\n} from \"../../vendor/ogl/src/extras/Orbit.js\";\r\nimport {\r\n    Raycast\r\n} from '../../vendor/ogl/src/extras/Raycast';\r\nimport { Vec2 } from \"../../vendor/ogl/src/math/Vec2.js\";\r\n\r\nimport {DisplayQuad} from './debug/DisplayQuad.js';\r\n\r\nimport {\r\n    Verlet\r\n} from \"./VerletGPU/index.js\";\r\nimport { Vec3 } from \"../../vendor/ogl/src/math/Vec3.js\";\r\n\r\nexport default class World3d {\r\n    constructor() {\r\n        this.init();\r\n        this.initInputParams();\r\n    }\r\n\r\n    init() {\r\n        this.renderer = new Renderer({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n            antialias: true\r\n        });\r\n        this.gl = this.renderer.gl;\r\n\r\n        this.gl.clearColor(0.8, 0.8, 0.83, 1);\r\n        this.gl.canvas.style.top = \"0\";\r\n        this.gl.canvas.style.left = \"0\";\r\n        this.gl.canvas.style.zIndex = \"0\";\r\n        this.gl.canvas.style.position = \"absolute\";\r\n        this.gl.canvas.style.width = \"100vw\";\r\n        this.gl.canvas.style.height = \"100vh\";\r\n\r\n        document.body.appendChild(this.gl.canvas);\r\n\r\n        this.camera = new Camera(this.gl, {\r\n            aspect: window.innerWidth / window.innerHeight\r\n        });\r\n        this.camera.position.x = 0.0;\r\n        this.camera.position.y = 0.0;\r\n        this.camera.position.z = 7.0;\r\n\r\n        this.orbitCamera = new Orbit(this.camera, {\r\n            element: this.gl.canvas\r\n        });\r\n\r\n        this.scene = new Transform();\r\n\r\n        this.initMesh();\r\n        this.initDebug();\r\n    }\r\n\r\n    initInputParams() {\r\n\r\n        this.inputPos = new Vec3(0.0, 0.0, 0.5);\r\n        this.projectedInputPos = new Vec3(0.0, 0.0, 0.5);\r\n        this.worldInputPos = new Vec3(0.0,0.0,0.5);\r\n        this.raycast = new Raycast(this.gl);\r\n        this.isInteracting = false;\r\n\r\n    }\r\n\r\n    onMouseDown(e) {\r\n\r\n        this.isInteracting = true;\r\n        this.inputPos.x = (e.clientX / window.innerWidth) * 2.0 - 1.0;\r\n        this.inputPos.y = (1.0 - e.clientY / window.innerHeight) * 2.0 - 1.0;\r\n\r\n    }\r\n\r\n    onMouseMove(e) {\r\n\r\n        if(this.isInteracting === false) return;\r\n\r\n        this.inputPos.x = (e.clientX / window.innerWidth) * 2.0 - 1.0;\r\n        this.inputPos.y = (1.0 - e.clientY / window.innerHeight) * 2.0 - 1.0;        \r\n\r\n    }\r\n\r\n    onMouseUp(e) {\r\n\r\n        this.isInteracting = false;\r\n\r\n    }\r\n\r\n    initMesh() {\r\n        this.verlet = new Verlet(this.gl);\r\n        this.verlet.setParent(this.scene);\r\n    }\r\n\r\n    initDebug() {\r\n        \r\n        this.positionQuad = new DisplayQuad(this.gl, {\r\n            aspect: this.renderer.width/this.renderer.height,\r\n            scale: 0.5,\r\n            position: new Vec2(-0.87,0.74)\r\n        });\r\n\r\n        this.prevPositionQuad = new DisplayQuad(this.gl, {\r\n            aspect: this.renderer.width/this.renderer.height,\r\n            scale: 0.5,\r\n            position: new Vec2(-0.87,0.23)\r\n        })\r\n        \r\n        this.restlengthQuad = new DisplayQuad(this.gl, {\r\n            aspect: this.renderer.width/this.renderer.height,\r\n            scale: 0.5,\r\n            position: new Vec2(-0.87, -0.28)\r\n        })\r\n\r\n    }\r\n\r\n    render({\r\n        scene,\r\n        camera = null,\r\n        clear = true\r\n    }) {\r\n        this.renderer.render({\r\n            scene,\r\n            camera,\r\n            clear\r\n        });\r\n    }\r\n\r\n    calcScreenToWorldPos() {\r\n\r\n        \r\n        this.camera.unproject(this.projectedInputPos.copy(this.inputPos));\r\n        this.projectedInputPos.sub(this.camera.position).normalize();\r\n        \r\n        const dist = -this.camera.position.z / this.projectedInputPos.z;\r\n\r\n        this.worldInputPos.copy(this.camera.position).add(this.projectedInputPos.multiply(dist));\r\n        // this.worldInputPos.z = -this.inputPos.y * 1.0;\r\n        this.worldInputPos.z = -this.inputPos.y * 5.0;\r\n\r\n    }\r\n\r\n    update(dt) {\r\n\r\n        this.camera.updateMatrixWorld();\r\n        //  this.orbitCamera.update();\r\n\r\n        this.calcScreenToWorldPos();\r\n\r\n        this.verlet.update({\r\n            t: dt,\r\n            isInteracting: this.isInteracting,\r\n            inputWorldPos: this.worldInputPos,\r\n            scene: this.scene\r\n        });\r\n\r\n        this.render({\r\n            scene: this.scene,\r\n            camera: this.camera,\r\n            clear: true\r\n        });\r\n\r\n    }\r\n\r\n    onResize() {\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.camera.perspective({\r\n            aspect: this.gl.canvas.width / this.gl.canvas.height\r\n        });\r\n    }\r\n}","import World3d from './World3d'\r\n\r\nexport class App {\r\n    constructor() {\r\n       this.World3d = new World3d();\r\n       this.initEvents();\r\n       this.start();\r\n    }\r\n\r\n    initEvents() {\r\n\r\n        this.time = Date.now();\r\n        this.prevTime = this.time;\r\n        this.deltaTime = 0;\r\n        this.ctaHidden = false;\r\n\r\n        window.addEventListener(\"resize\", this.onResize.bind(this));\r\n        window.addEventListener('mousedown', this.onMouseDown);\r\n        window.addEventListener('mousemove', this.onMouseMove);\r\n        window.addEventListener('mouseup', this.onMouseUp);\r\n\r\n    }\r\n\r\n    start() {\r\n    \r\n        this.update();\r\n\r\n    }\r\n\r\n    onMouseDown = e => {\r\n\r\n        this.World3d.onMouseDown(e);\r\n        this.hideCTA();\r\n\r\n\r\n    }\r\n\r\n    onMouseMove = e => {\r\n\r\n        this.World3d.onMouseMove(e);\r\n\r\n    }\r\n\r\n    onMouseUp = e => {\r\n\r\n        this.World3d.onMouseUp(e);\r\n\r\n    }\r\n\r\n    onResize = () => {\r\n        this.World3d.onResize();\r\n    }\r\n\r\n    hideCTA() {\r\n\r\n        if(this.ctaHidden === false) {\r\n            this.ctaHidden = true;\r\n            document.body.querySelector('.cta-message').classList.add('hidden');\r\n        }\r\n\r\n    }\r\n\r\n    update = () => {\r\n    \r\n        window.requestAnimationFrame(() => this.update());\r\n\r\n        this.time = Date.now();\r\n        let tmpTime = this.time;\r\n        this.deltaTime = (this.time - this.prevTime) / 1000.0;\r\n        this.prevTime = tmpTime;\r\n\r\n        this.World3d.update(this.deltaTime);\r\n\r\n    }\r\n    \r\n}\r\n\r\nwindow.onload = () => new App();"]}